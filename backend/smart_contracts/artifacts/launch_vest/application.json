{
    "hints": {
        "bootstrap()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fund_escrow_address(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit_ido_assets(axfer,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "invest(bool,asset,txn,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_ido_asset(asset,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reclaim_investment(asset,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_amount_raised(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pause_project(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unpause_project(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "change_launchpad_admin(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "Investor",
                    "elements": [
                        [
                            "address",
                            "address"
                        ],
                        [
                            "project_id",
                            "uint64"
                        ],
                        [
                            "investment_amount",
                            "uint64"
                        ],
                        [
                            "asset_allocation",
                            "uint64"
                        ],
                        [
                            "asset_claim_timestamp",
                            "uint64"
                        ],
                        [
                            "claimed_ido_asset",
                            "bool"
                        ],
                        [
                            "reclaimed_investment",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "Project",
                    "elements": [
                        [
                            "owner_address",
                            "address"
                        ],
                        [
                            "start_timestamp",
                            "uint64"
                        ],
                        [
                            "end_timestamp",
                            "uint64"
                        ],
                        [
                            "claim_timestamp",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "image_url",
                            "string"
                        ],
                        [
                            "price_per_asset",
                            "uint64"
                        ],
                        [
                            "min_investment_per_investor",
                            "uint64"
                        ],
                        [
                            "max_investment_per_investor",
                            "uint64"
                        ],
                        [
                            "max_cap",
                            "uint64"
                        ],
                        [
                            "total_assets_for_sale",
                            "uint64"
                        ],
                        [
                            "is_paused",
                            "bool"
                        ],
                        [
                            "initiated_withdrawal",
                            "bool"
                        ],
                        [
                            "total_assets_sold",
                            "uint64"
                        ],
                        [
                            "total_amount_raised",
                            "uint64"
                        ],
                        [
                            "amount_withdrawn",
                            "uint64"
                        ],
                        [
                            "vesting_schedule",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin_acct": {
                    "type": "bytes",
                    "key": "admin_acct",
                    "descr": ""
                },
                "escrow_address": {
                    "type": "bytes",
                    "key": "escrow_address",
                    "descr": ""
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "launch_vest",
        "methods": [
            {
                "name": "bootstrap",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Initializes Launch Vest application's global state, sets the admin account, and sets the escrow address."
            },
            {
                "name": "fund_escrow_address",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "The payment transaction to fund the escrow address."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Fund escrow address with Algos."
            },
            {
                "name": "list_project",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset_id",
                        "desc": "The unique identifier of the asset."
                    },
                    {
                        "type": "string",
                        "name": "image_url",
                        "desc": "The project image url."
                    },
                    {
                        "type": "uint64",
                        "name": "start_timestamp",
                        "desc": "The timestamp when the project starts."
                    },
                    {
                        "type": "uint64",
                        "name": "end_timestamp",
                        "desc": "The timestamp when the project ends."
                    },
                    {
                        "type": "uint64",
                        "name": "claim_timestamp",
                        "desc": "The timestamp for asset claiming."
                    },
                    {
                        "type": "uint64",
                        "name": "price_per_asset",
                        "desc": "The price of each asset."
                    },
                    {
                        "type": "uint64",
                        "name": "min_investment_per_investor",
                        "desc": "The minimum investment per user."
                    },
                    {
                        "type": "uint64",
                        "name": "max_investment_per_investor",
                        "desc": "The maximum investment per user."
                    },
                    {
                        "type": "uint64",
                        "name": "vesting_schedule",
                        "desc": "The vesting schedule of project."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Lists a new IDO Project on LaunchVest."
            },
            {
                "name": "deposit_ido_assets",
                "args": [
                    {
                        "type": "axfer",
                        "name": "txn",
                        "desc": "The asset transfer transaction for the deposit."
                    },
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The asset to be deposited."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows depositing IDO assets using the provided transaction and asset."
            },
            {
                "name": "invest",
                "args": [
                    {
                        "type": "bool",
                        "name": "is_staking",
                        "desc": "Indicates whether the investor is staking $VEST"
                    },
                    {
                        "type": "asset",
                        "name": "project_id",
                        "desc": "The project (asset) ID to invest in."
                    },
                    {
                        "type": "txn",
                        "name": "txn",
                        "desc": "The payment transaction for the investment."
                    },
                    {
                        "type": "uint64",
                        "name": "asset_allocation",
                        "desc": "Asset allocation for investor."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Executes an investment transaction for a project."
            },
            {
                "name": "claim_ido_asset",
                "args": [
                    {
                        "type": "asset",
                        "name": "project_id",
                        "desc": "Project (asset) ID to be claimed."
                    },
                    {
                        "type": "bool",
                        "name": "is_staking",
                        "desc": "Flag to indicate whether investor is staking $VEST."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows users to claim a specific IDO Project asset."
            },
            {
                "name": "reclaim_investment",
                "args": [
                    {
                        "type": "asset",
                        "name": "project_id",
                        "desc": "Project (asset) ID to be claimed."
                    },
                    {
                        "type": "bool",
                        "name": "is_staking",
                        "desc": "Flag to indicate whether investor is current staking $VEST."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows investors to reclaim their investment."
            },
            {
                "name": "withdraw_amount_raised",
                "args": [
                    {
                        "type": "uint64",
                        "name": "project_id",
                        "desc": "The unique identifier of the project for which funds are withdrawn."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows the withdrawal of the amount raised for a specific project, retains LaunchVest fee in the escrow."
            },
            {
                "name": "pause_project",
                "args": [
                    {
                        "type": "uint64",
                        "name": "project_id",
                        "desc": "The unique identifier of the project to be paused."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows pausing a project with the specified project ID."
            },
            {
                "name": "unpause_project",
                "args": [
                    {
                        "type": "uint64",
                        "name": "project_id",
                        "desc": "The unique identifier of the project to be un-paused."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows un-pausing a project with the specified project ID."
            },
            {
                "name": "change_launchpad_admin",
                "args": [
                    {
                        "type": "address",
                        "name": "new_admin_acct",
                        "desc": "The new admin account address."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows changing the admin account for the launchpad."
            },
            {
                "name": "get_investor",
                "args": [
                    {
                        "type": "address",
                        "name": "investor",
                        "desc": "The Algorand address of the investor to retrieve."
                    }
                ],
                "returns": {
                    "type": "(address,uint64,uint64,uint64,uint64,bool,bool)"
                },
                "desc": "Retrieves investor information for the specified investor address and stores it in the output."
            },
            {
                "name": "get_project",
                "args": [
                    {
                        "type": "uint64",
                        "name": "project_id",
                        "desc": "The unique identifier of the project to retrieve."
                    }
                ],
                "returns": {
                    "type": "(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)"
                },
                "desc": "Retrieves project information for the specified project ID and stores it in the output."
            }
        ],
        "networks": {},
        "desc": "LaunchVest Application"
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}