# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "bootstrap()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fund_escrow_address(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit_ido_assets(axfer,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "invest(bool,asset,txn,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_ido_asset(asset,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reclaim_investment(asset,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_amount_raised(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pause_project(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unpause_project(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "change_launchpad_admin(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "Investor",
                    "elements": [
                        [
                            "address",
                            "address"
                        ],
                        [
                            "project_id",
                            "uint64"
                        ],
                        [
                            "investment_amount",
                            "uint64"
                        ],
                        [
                            "asset_allocation",
                            "uint64"
                        ],
                        [
                            "asset_claim_timestamp",
                            "uint64"
                        ],
                        [
                            "claimed_ido_asset",
                            "bool"
                        ],
                        [
                            "reclaimed_investment",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "Project",
                    "elements": [
                        [
                            "owner_address",
                            "address"
                        ],
                        [
                            "start_timestamp",
                            "uint64"
                        ],
                        [
                            "end_timestamp",
                            "uint64"
                        ],
                        [
                            "claim_timestamp",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "image_url",
                            "string"
                        ],
                        [
                            "price_per_asset",
                            "uint64"
                        ],
                        [
                            "min_investment_per_investor",
                            "uint64"
                        ],
                        [
                            "max_investment_per_investor",
                            "uint64"
                        ],
                        [
                            "max_cap",
                            "uint64"
                        ],
                        [
                            "total_assets_for_sale",
                            "uint64"
                        ],
                        [
                            "is_paused",
                            "bool"
                        ],
                        [
                            "initiated_withdrawal",
                            "bool"
                        ],
                        [
                            "total_assets_sold",
                            "uint64"
                        ],
                        [
                            "total_amount_raised",
                            "uint64"
                        ],
                        [
                            "amount_withdrawn",
                            "uint64"
                        ],
                        [
                            "vesting_schedule",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin_acct": {
                    "type": "bytes",
                    "key": "admin_acct",
                    "descr": ""
                },
                "escrow_address": {
                    "type": "bytes",
                    "key": "escrow_address",
                    "descr": ""
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "launch_vest",
        "methods": [
            {
                "name": "bootstrap",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Initializes Launch Vest application's global state, sets the admin account, and sets the escrow address."
            },
            {
                "name": "fund_escrow_address",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "The payment transaction to fund the escrow address."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Fund escrow address with Algos."
            },
            {
                "name": "list_project",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset_id",
                        "desc": "The unique identifier of the asset."
                    },
                    {
                        "type": "string",
                        "name": "image_url",
                        "desc": "The project image url."
                    },
                    {
                        "type": "uint64",
                        "name": "start_timestamp",
                        "desc": "The timestamp when the project starts."
                    },
                    {
                        "type": "uint64",
                        "name": "end_timestamp",
                        "desc": "The timestamp when the project ends."
                    },
                    {
                        "type": "uint64",
                        "name": "claim_timestamp",
                        "desc": "The timestamp for asset claiming."
                    },
                    {
                        "type": "uint64",
                        "name": "price_per_asset",
                        "desc": "The price of each asset."
                    },
                    {
                        "type": "uint64",
                        "name": "min_investment_per_investor",
                        "desc": "The minimum investment per user."
                    },
                    {
                        "type": "uint64",
                        "name": "max_investment_per_investor",
                        "desc": "The maximum investment per user."
                    },
                    {
                        "type": "uint64",
                        "name": "vesting_schedule",
                        "desc": "The vesting schedule of project."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Lists a new IDO Project on LaunchVest."
            },
            {
                "name": "deposit_ido_assets",
                "args": [
                    {
                        "type": "axfer",
                        "name": "txn",
                        "desc": "The asset transfer transaction for the deposit."
                    },
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The asset to be deposited."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows depositing IDO assets using the provided transaction and asset."
            },
            {
                "name": "invest",
                "args": [
                    {
                        "type": "bool",
                        "name": "is_staking",
                        "desc": "Indicates whether the investor is staking $VEST"
                    },
                    {
                        "type": "asset",
                        "name": "project_id",
                        "desc": "The project (asset) ID to invest in."
                    },
                    {
                        "type": "txn",
                        "name": "txn",
                        "desc": "The payment transaction for the investment."
                    },
                    {
                        "type": "uint64",
                        "name": "asset_allocation",
                        "desc": "Asset allocation for investor."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Executes an investment transaction for a project."
            },
            {
                "name": "claim_ido_asset",
                "args": [
                    {
                        "type": "asset",
                        "name": "project_id",
                        "desc": "Project (asset) ID to be claimed."
                    },
                    {
                        "type": "bool",
                        "name": "is_staking",
                        "desc": "Flag to indicate whether investor is staking $VEST."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows users to claim a specific IDO Project asset."
            },
            {
                "name": "reclaim_investment",
                "args": [
                    {
                        "type": "asset",
                        "name": "project_id",
                        "desc": "Project (asset) ID to be claimed."
                    },
                    {
                        "type": "bool",
                        "name": "is_staking",
                        "desc": "Flag to indicate whether investor is current staking $VEST."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows investors to reclaim their investment."
            },
            {
                "name": "withdraw_amount_raised",
                "args": [
                    {
                        "type": "uint64",
                        "name": "project_id",
                        "desc": "The unique identifier of the project for which funds are withdrawn."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows the withdrawal of the amount raised for a specific project, retains LaunchVest fee in the escrow."
            },
            {
                "name": "pause_project",
                "args": [
                    {
                        "type": "uint64",
                        "name": "project_id",
                        "desc": "The unique identifier of the project to be paused."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows pausing a project with the specified project ID."
            },
            {
                "name": "unpause_project",
                "args": [
                    {
                        "type": "uint64",
                        "name": "project_id",
                        "desc": "The unique identifier of the project to be un-paused."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows un-pausing a project with the specified project ID."
            },
            {
                "name": "change_launchpad_admin",
                "args": [
                    {
                        "type": "address",
                        "name": "new_admin_acct",
                        "desc": "The new admin account address."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows changing the admin account for the launchpad."
            },
            {
                "name": "get_investor",
                "args": [
                    {
                        "type": "address",
                        "name": "investor",
                        "desc": "The Algorand address of the investor to retrieve."
                    }
                ],
                "returns": {
                    "type": "(address,uint64,uint64,uint64,uint64,bool,bool)"
                },
                "desc": "Retrieves investor information for the specified investor address and stores it in the output."
            },
            {
                "name": "get_project",
                "args": [
                    {
                        "type": "uint64",
                        "name": "project_id",
                        "desc": "The unique identifier of the project to retrieve."
                    }
                ],
                "returns": {
                    "type": "(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)"
                },
                "desc": "Retrieves project information for the specified project ID and stores it in the output."
            }
        ],
        "networks": {},
        "desc": "LaunchVest Application"
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class BootstrapArgs(_ArgsBase[None]):
    """Initializes Launch Vest application's global state, sets the admin account, and sets the escrow address."""

    @staticmethod
    def method() -> str:
        return "bootstrap()void"


@dataclasses.dataclass(kw_only=True)
class FundEscrowAddressArgs(_ArgsBase[None]):
    """Fund escrow address with Algos."""

    txn: TransactionWithSigner
    """The payment transaction to fund the escrow address."""

    @staticmethod
    def method() -> str:
        return "fund_escrow_address(pay)void"


@dataclasses.dataclass(kw_only=True)
class ListProjectArgs(_ArgsBase[None]):
    """Lists a new IDO Project on LaunchVest."""

    asset_id: int
    """The unique identifier of the asset."""
    image_url: str
    """The project image url."""
    start_timestamp: int
    """The timestamp when the project starts."""
    end_timestamp: int
    """The timestamp when the project ends."""
    claim_timestamp: int
    """The timestamp for asset claiming."""
    price_per_asset: int
    """The price of each asset."""
    min_investment_per_investor: int
    """The minimum investment per user."""
    max_investment_per_investor: int
    """The maximum investment per user."""
    vesting_schedule: int
    """The vesting schedule of project."""

    @staticmethod
    def method() -> str:
        return "list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void"


@dataclasses.dataclass(kw_only=True)
class DepositIdoAssetsArgs(_ArgsBase[None]):
    """Allows depositing IDO assets using the provided transaction and asset."""

    txn: TransactionWithSigner
    """The asset transfer transaction for the deposit."""
    asset: int
    """The asset to be deposited."""

    @staticmethod
    def method() -> str:
        return "deposit_ido_assets(axfer,asset)void"


@dataclasses.dataclass(kw_only=True)
class InvestArgs(_ArgsBase[None]):
    """Executes an investment transaction for a project."""

    is_staking: bool
    """Indicates whether the investor is staking $VEST"""
    project_id: int
    """The project (asset) ID to invest in."""
    txn: TransactionWithSigner
    """The payment transaction for the investment."""
    asset_allocation: int
    """Asset allocation for investor."""

    @staticmethod
    def method() -> str:
        return "invest(bool,asset,txn,uint64)void"


@dataclasses.dataclass(kw_only=True)
class ClaimIdoAssetArgs(_ArgsBase[None]):
    """Allows users to claim a specific IDO Project asset."""

    project_id: int
    """Project (asset) ID to be claimed."""
    is_staking: bool
    """Flag to indicate whether investor is staking $VEST."""

    @staticmethod
    def method() -> str:
        return "claim_ido_asset(asset,bool)void"


@dataclasses.dataclass(kw_only=True)
class ReclaimInvestmentArgs(_ArgsBase[None]):
    """Allows investors to reclaim their investment."""

    project_id: int
    """Project (asset) ID to be claimed."""
    is_staking: bool
    """Flag to indicate whether investor is current staking $VEST."""

    @staticmethod
    def method() -> str:
        return "reclaim_investment(asset,bool)void"


@dataclasses.dataclass(kw_only=True)
class WithdrawAmountRaisedArgs(_ArgsBase[None]):
    """Allows the withdrawal of the amount raised for a specific project, retains LaunchVest fee in the escrow."""

    project_id: int
    """The unique identifier of the project for which funds are withdrawn."""

    @staticmethod
    def method() -> str:
        return "withdraw_amount_raised(uint64)void"


@dataclasses.dataclass(kw_only=True)
class PauseProjectArgs(_ArgsBase[None]):
    """Allows pausing a project with the specified project ID."""

    project_id: int
    """The unique identifier of the project to be paused."""

    @staticmethod
    def method() -> str:
        return "pause_project(uint64)void"


@dataclasses.dataclass(kw_only=True)
class UnpauseProjectArgs(_ArgsBase[None]):
    """Allows un-pausing a project with the specified project ID."""

    project_id: int
    """The unique identifier of the project to be un-paused."""

    @staticmethod
    def method() -> str:
        return "unpause_project(uint64)void"


@dataclasses.dataclass(kw_only=True)
class ChangeLaunchpadAdminArgs(_ArgsBase[None]):
    """Allows changing the admin account for the launchpad."""

    new_admin_acct: str
    """The new admin account address."""

    @staticmethod
    def method() -> str:
        return "change_launchpad_admin(address)void"


@dataclasses.dataclass(kw_only=True)
class Investor:
    address: str
    project_id: int
    investment_amount: int
    asset_allocation: int
    asset_claim_timestamp: int
    claimed_ido_asset: bool
    reclaimed_investment: bool


@dataclasses.dataclass(kw_only=True)
class GetInvestorArgs(_ArgsBase[Investor]):
    """Retrieves investor information for the specified investor address and stores it in the output."""

    investor: str
    """The Algorand address of the investor to retrieve."""

    @staticmethod
    def method() -> str:
        return "get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)"


@dataclasses.dataclass(kw_only=True)
class Project:
    owner_address: str
    start_timestamp: int
    end_timestamp: int
    claim_timestamp: int
    asset_id: int
    image_url: str
    price_per_asset: int
    min_investment_per_investor: int
    max_investment_per_investor: int
    max_cap: int
    total_assets_for_sale: int
    is_paused: bool
    initiated_withdrawal: bool
    total_assets_sold: int
    total_amount_raised: int
    amount_withdrawn: int
    vesting_schedule: int


@dataclasses.dataclass(kw_only=True)
class GetProjectArgs(_ArgsBase[Project]):
    """Retrieves project information for the specified project ID and stores it in the output."""

    project_id: int
    """The unique identifier of the project to retrieve."""

    @staticmethod
    def method() -> str:
        return "get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.admin_acct = ByteReader(typing.cast(bytes, data.get(b"admin_acct")))
        self.escrow_address = ByteReader(typing.cast(bytes, data.get(b"escrow_address")))


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def bootstrap(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Initializes Launch Vest application's global state, sets the admin account, and sets the escrow address.
        
        Adds a call to `bootstrap()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BootstrapArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def fund_escrow_address(
        self,
        *,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Fund escrow address with Algos.
        
        Adds a call to `fund_escrow_address(pay)void` ABI method
        
        :param TransactionWithSigner txn: The payment transaction to fund the escrow address.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = FundEscrowAddressArgs(
            txn=txn,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def list_project(
        self,
        *,
        asset_id: int,
        image_url: str,
        start_timestamp: int,
        end_timestamp: int,
        claim_timestamp: int,
        price_per_asset: int,
        min_investment_per_investor: int,
        max_investment_per_investor: int,
        vesting_schedule: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Lists a new IDO Project on LaunchVest.
        
        Adds a call to `list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method
        
        :param int asset_id: The unique identifier of the asset.
        :param str image_url: The project image url.
        :param int start_timestamp: The timestamp when the project starts.
        :param int end_timestamp: The timestamp when the project ends.
        :param int claim_timestamp: The timestamp for asset claiming.
        :param int price_per_asset: The price of each asset.
        :param int min_investment_per_investor: The minimum investment per user.
        :param int max_investment_per_investor: The maximum investment per user.
        :param int vesting_schedule: The vesting schedule of project.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ListProjectArgs(
            asset_id=asset_id,
            image_url=image_url,
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            claim_timestamp=claim_timestamp,
            price_per_asset=price_per_asset,
            min_investment_per_investor=min_investment_per_investor,
            max_investment_per_investor=max_investment_per_investor,
            vesting_schedule=vesting_schedule,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def deposit_ido_assets(
        self,
        *,
        txn: TransactionWithSigner,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Allows depositing IDO assets using the provided transaction and asset.
        
        Adds a call to `deposit_ido_assets(axfer,asset)void` ABI method
        
        :param TransactionWithSigner txn: The asset transfer transaction for the deposit.
        :param int asset: The asset to be deposited.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DepositIdoAssetsArgs(
            txn=txn,
            asset=asset,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def invest(
        self,
        *,
        is_staking: bool,
        project_id: int,
        txn: TransactionWithSigner,
        asset_allocation: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Executes an investment transaction for a project.
        
        Adds a call to `invest(bool,asset,txn,uint64)void` ABI method
        
        :param bool is_staking: Indicates whether the investor is staking $VEST
        :param int project_id: The project (asset) ID to invest in.
        :param TransactionWithSigner txn: The payment transaction for the investment.
        :param int asset_allocation: Asset allocation for investor.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = InvestArgs(
            is_staking=is_staking,
            project_id=project_id,
            txn=txn,
            asset_allocation=asset_allocation,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def claim_ido_asset(
        self,
        *,
        project_id: int,
        is_staking: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Allows users to claim a specific IDO Project asset.
        
        Adds a call to `claim_ido_asset(asset,bool)void` ABI method
        
        :param int project_id: Project (asset) ID to be claimed.
        :param bool is_staking: Flag to indicate whether investor is staking $VEST.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ClaimIdoAssetArgs(
            project_id=project_id,
            is_staking=is_staking,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def reclaim_investment(
        self,
        *,
        project_id: int,
        is_staking: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Allows investors to reclaim their investment.
        
        Adds a call to `reclaim_investment(asset,bool)void` ABI method
        
        :param int project_id: Project (asset) ID to be claimed.
        :param bool is_staking: Flag to indicate whether investor is current staking $VEST.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ReclaimInvestmentArgs(
            project_id=project_id,
            is_staking=is_staking,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw_amount_raised(
        self,
        *,
        project_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Allows the withdrawal of the amount raised for a specific project, retains LaunchVest fee in the escrow.
        
        Adds a call to `withdraw_amount_raised(uint64)void` ABI method
        
        :param int project_id: The unique identifier of the project for which funds are withdrawn.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawAmountRaisedArgs(
            project_id=project_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def pause_project(
        self,
        *,
        project_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Allows pausing a project with the specified project ID.
        
        Adds a call to `pause_project(uint64)void` ABI method
        
        :param int project_id: The unique identifier of the project to be paused.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PauseProjectArgs(
            project_id=project_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def unpause_project(
        self,
        *,
        project_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Allows un-pausing a project with the specified project ID.
        
        Adds a call to `unpause_project(uint64)void` ABI method
        
        :param int project_id: The unique identifier of the project to be un-paused.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UnpauseProjectArgs(
            project_id=project_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def change_launchpad_admin(
        self,
        *,
        new_admin_acct: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Allows changing the admin account for the launchpad.
        
        Adds a call to `change_launchpad_admin(address)void` ABI method
        
        :param str new_admin_acct: The new admin account address.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ChangeLaunchpadAdminArgs(
            new_admin_acct=new_admin_acct,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_investor(
        self,
        *,
        investor: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Retrieves investor information for the specified investor address and stores it in the output.
        
        Adds a call to `get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)` ABI method
        
        :param str investor: The Algorand address of the investor to retrieve.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetInvestorArgs(
            investor=investor,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_project(
        self,
        *,
        project_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Retrieves project information for the specified project ID and stores it in the output.
        
        Adds a call to `get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)` ABI method
        
        :param int project_id: The unique identifier of the project to retrieve.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetProjectArgs(
            project_id=project_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class LaunchVestClient:
    """LaunchVest Application
    
    A class for interacting with the launch_vest app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        LaunchVestClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def bootstrap(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Initializes Launch Vest application's global state, sets the admin account, and sets the escrow address.
        
        Calls `bootstrap()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = BootstrapArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def fund_escrow_address(
        self,
        *,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Fund escrow address with Algos.
        
        Calls `fund_escrow_address(pay)void` ABI method
        
        :param TransactionWithSigner txn: The payment transaction to fund the escrow address.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = FundEscrowAddressArgs(
            txn=txn,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def list_project(
        self,
        *,
        asset_id: int,
        image_url: str,
        start_timestamp: int,
        end_timestamp: int,
        claim_timestamp: int,
        price_per_asset: int,
        min_investment_per_investor: int,
        max_investment_per_investor: int,
        vesting_schedule: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Lists a new IDO Project on LaunchVest.
        
        Calls `list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method
        
        :param int asset_id: The unique identifier of the asset.
        :param str image_url: The project image url.
        :param int start_timestamp: The timestamp when the project starts.
        :param int end_timestamp: The timestamp when the project ends.
        :param int claim_timestamp: The timestamp for asset claiming.
        :param int price_per_asset: The price of each asset.
        :param int min_investment_per_investor: The minimum investment per user.
        :param int max_investment_per_investor: The maximum investment per user.
        :param int vesting_schedule: The vesting schedule of project.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ListProjectArgs(
            asset_id=asset_id,
            image_url=image_url,
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            claim_timestamp=claim_timestamp,
            price_per_asset=price_per_asset,
            min_investment_per_investor=min_investment_per_investor,
            max_investment_per_investor=max_investment_per_investor,
            vesting_schedule=vesting_schedule,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def deposit_ido_assets(
        self,
        *,
        txn: TransactionWithSigner,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Allows depositing IDO assets using the provided transaction and asset.
        
        Calls `deposit_ido_assets(axfer,asset)void` ABI method
        
        :param TransactionWithSigner txn: The asset transfer transaction for the deposit.
        :param int asset: The asset to be deposited.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DepositIdoAssetsArgs(
            txn=txn,
            asset=asset,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def invest(
        self,
        *,
        is_staking: bool,
        project_id: int,
        txn: TransactionWithSigner,
        asset_allocation: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Executes an investment transaction for a project.
        
        Calls `invest(bool,asset,txn,uint64)void` ABI method
        
        :param bool is_staking: Indicates whether the investor is staking $VEST
        :param int project_id: The project (asset) ID to invest in.
        :param TransactionWithSigner txn: The payment transaction for the investment.
        :param int asset_allocation: Asset allocation for investor.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = InvestArgs(
            is_staking=is_staking,
            project_id=project_id,
            txn=txn,
            asset_allocation=asset_allocation,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def claim_ido_asset(
        self,
        *,
        project_id: int,
        is_staking: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Allows users to claim a specific IDO Project asset.
        
        Calls `claim_ido_asset(asset,bool)void` ABI method
        
        :param int project_id: Project (asset) ID to be claimed.
        :param bool is_staking: Flag to indicate whether investor is staking $VEST.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ClaimIdoAssetArgs(
            project_id=project_id,
            is_staking=is_staking,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def reclaim_investment(
        self,
        *,
        project_id: int,
        is_staking: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Allows investors to reclaim their investment.
        
        Calls `reclaim_investment(asset,bool)void` ABI method
        
        :param int project_id: Project (asset) ID to be claimed.
        :param bool is_staking: Flag to indicate whether investor is current staking $VEST.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ReclaimInvestmentArgs(
            project_id=project_id,
            is_staking=is_staking,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def withdraw_amount_raised(
        self,
        *,
        project_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Allows the withdrawal of the amount raised for a specific project, retains LaunchVest fee in the escrow.
        
        Calls `withdraw_amount_raised(uint64)void` ABI method
        
        :param int project_id: The unique identifier of the project for which funds are withdrawn.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = WithdrawAmountRaisedArgs(
            project_id=project_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def pause_project(
        self,
        *,
        project_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Allows pausing a project with the specified project ID.
        
        Calls `pause_project(uint64)void` ABI method
        
        :param int project_id: The unique identifier of the project to be paused.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = PauseProjectArgs(
            project_id=project_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def unpause_project(
        self,
        *,
        project_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Allows un-pausing a project with the specified project ID.
        
        Calls `unpause_project(uint64)void` ABI method
        
        :param int project_id: The unique identifier of the project to be un-paused.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UnpauseProjectArgs(
            project_id=project_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def change_launchpad_admin(
        self,
        *,
        new_admin_acct: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Allows changing the admin account for the launchpad.
        
        Calls `change_launchpad_admin(address)void` ABI method
        
        :param str new_admin_acct: The new admin account address.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ChangeLaunchpadAdminArgs(
            new_admin_acct=new_admin_acct,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_investor(
        self,
        *,
        investor: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Investor]:
        """Retrieves investor information for the specified investor address and stores it in the output.
        
        Calls `get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)` ABI method
        
        :param str investor: The Algorand address of the investor to retrieve.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Investor]: The result of the transaction"""

        args = GetInvestorArgs(
            investor=investor,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Investor(**result_dict)
        return result

    def get_project(
        self,
        *,
        project_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Project]:
        """Retrieves project information for the specified project ID and stores it in the output.
        
        Calls `get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)` ABI method
        
        :param int project_id: The unique identifier of the project to retrieve.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Project]: The result of the transaction"""

        args = GetProjectArgs(
            project_id=project_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Project(**result_dict)
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
