#pragma version 8
intcblock 0 1 32 48 147 912 913 131 139 512 513
bytecblock 0x 0x00 0x657363726f775f61646472657373 0x61646d696e5f61636374 0x151f7c75
txn NumAppArgs
intc_0 // 0
==
bnz main_l28
txna ApplicationArgs 0
pushbytes 0xbec76d87 // "bootstrap()void"
==
bnz main_l27
txna ApplicationArgs 0
pushbytes 0x963a596e // "fund_escrow_address(pay)void"
==
bnz main_l26
txna ApplicationArgs 0
pushbytes 0xd26f170f // "list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void"
==
bnz main_l25
txna ApplicationArgs 0
pushbytes 0x33755ef0 // "deposit_ido_assets(axfer,asset)void"
==
bnz main_l24
txna ApplicationArgs 0
pushbytes 0x4d8bcb19 // "invest(bool,asset,pay)void"
==
bnz main_l23
txna ApplicationArgs 0
pushbytes 0x2d388f26 // "claim_ido_asset(asset,bool)void"
==
bnz main_l22
txna ApplicationArgs 0
pushbytes 0xc4bdcca7 // "reclaim_investment(asset,bool)void"
==
bnz main_l21
txna ApplicationArgs 0
pushbytes 0x38a41c6e // "withdraw_amount_raised(uint64)void"
==
bnz main_l20
txna ApplicationArgs 0
pushbytes 0x90fad566 // "pause_project(uint64)void"
==
bnz main_l19
txna ApplicationArgs 0
pushbytes 0x5eb29672 // "unpause_project(uint64)void"
==
bnz main_l18
txna ApplicationArgs 0
pushbytes 0x11fef69e // "change_launchpad_admin(address)void"
==
bnz main_l17
txna ApplicationArgs 0
pushbytes 0x5313374d // "get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)"
==
bnz main_l16
txna ApplicationArgs 0
pushbytes 0x5cdc6c33 // "get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)"
==
bnz main_l15
err
main_l15:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub getprojectcaster_25
intc_1 // 1
return
main_l16:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub getinvestorcaster_24
intc_1 // 1
return
main_l17:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub changelaunchpadadmincaster_23
intc_1 // 1
return
main_l18:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub unpauseprojectcaster_22
intc_1 // 1
return
main_l19:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub pauseprojectcaster_21
intc_1 // 1
return
main_l20:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub withdrawamountraisedcaster_20
intc_1 // 1
return
main_l21:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub reclaiminvestmentcaster_19
intc_1 // 1
return
main_l22:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub claimidoassetcaster_18
intc_1 // 1
return
main_l23:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub investcaster_17
intc_1 // 1
return
main_l24:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub depositidoassetscaster_16
intc_1 // 1
return
main_l25:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub listprojectcaster_15
intc_1 // 1
return
main_l26:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub fundescrowaddresscaster_14
intc_1 // 1
return
main_l27:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub bootstrapcaster_13
intc_1 // 1
return
main_l28:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l30
err
main_l30:
txn ApplicationID
intc_0 // 0
==
assert
intc_1 // 1
return

// bootstrap
bootstrap_0:
proto 0 0
bytec_3 // "admin_acct"
bytec_0 // ""
app_global_put
bytec_2 // "escrow_address"
bytec_0 // ""
app_global_put
bytec_3 // "admin_acct"
global CreatorAddress
app_global_put
bytec_2 // "escrow_address"
global CurrentApplicationAddress
app_global_put
retsub

// fund_escrow_address
fundescrowaddress_1:
proto 1 0
frame_dig -1
gtxns Amount
intc_0 // 0
>
// Invalid amount, receiver or type_enum
assert
frame_dig -1
gtxns Receiver
bytec_2 // "escrow_address"
app_global_get
==
// Invalid amount, receiver or type_enum
assert
frame_dig -1
gtxns TypeEnum
intc_1 // pay
==
// Invalid amount, receiver or type_enum
assert
retsub

// list_project
listproject_2:
proto 9 0
bytec_0 // ""
dup
intc_0 // 0
dupn 11
bytec_0 // ""
dup
frame_dig -9
txnas Assets
asset_params_get AssetDecimals
store 1
store 0
load 0
intc_0 // 0
!=
// A valid asset ID must be provided
assert
frame_dig -4
intc_0 // 0
>
// Asset price must be greater than 0
assert
frame_dig -3
intc_0 // 0
>
// Min. and max. investment must be greater than 0
assert
frame_dig -2
intc_0 // 0
>
// Min. and max. investment must be greater than 0
assert
frame_dig -3
frame_dig -2
<
// Min. investment must be lesser than max. investment
assert
frame_dig -7
global LatestTimestamp
>
// Start, end and claim times must be greater than current time
assert
frame_dig -6
global LatestTimestamp
>
// Start, end and claim times must be greater than current time
assert
frame_dig -5
global LatestTimestamp
>
// Start, end and claim times must be greater than current time
assert
frame_dig -7
frame_dig -6
<
// Start time must be less than end time
assert
frame_dig -5
frame_dig -7
>
// Claim time must be greater than start and end time
assert
frame_dig -5
frame_dig -6
>
// Claim time must be greater than start and end time
assert
frame_dig -1
pushint 60 // 60
==
frame_dig -1
pushint 7776000 // 7776000
==
||
frame_dig -1
pushint 15552000 // 15552000
==
||
frame_dig -1
pushint 31536000 // 31536000
==
||
// Vesting schedule must fall between quarterly, half_year or yearly periods.
assert
itxn_begin
pushint 4 // axfer
itxn_field TypeEnum
intc_0 // 0
itxn_field AssetAmount
bytec_2 // "escrow_address"
app_global_get
itxn_field AssetReceiver
frame_dig -9
txnas Assets
itxn_field XferAsset
itxn_submit
txn Sender
frame_bury 1
frame_dig 1
len
intc_2 // 32
==
assert
frame_dig -9
txnas Assets
frame_bury 2
load 0
frame_bury 3
intc_0 // 0
frame_bury 4
intc_0 // 0
frame_bury 5
intc_0 // 0
!
!
frame_bury 6
intc_0 // 0
!
!
frame_bury 7
intc_0 // 0
frame_bury 8
intc_0 // 0
frame_bury 9
intc_0 // 0
frame_bury 10
global LatestTimestamp
frame_dig -1
+
frame_bury 11
frame_dig 1
frame_dig -7
itob
concat
frame_dig -6
itob
concat
frame_dig -5
itob
concat
frame_dig 2
itob
concat
frame_dig 3
itob
concat
frame_dig -8
frame_bury 15
frame_dig 15
frame_bury 14
intc 4 // 147
frame_bury 12
frame_dig 12
itob
extract 6 0
concat
frame_dig -4
itob
concat
frame_dig -3
itob
concat
frame_dig -2
itob
concat
frame_dig 4
itob
concat
frame_dig 5
itob
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 6
setbit
intc_1 // 1
frame_dig 7
setbit
concat
frame_dig 8
itob
concat
frame_dig 9
itob
concat
frame_dig 10
itob
concat
frame_dig 11
itob
concat
frame_dig 14
concat
frame_bury 0
frame_dig -9
txnas Assets
itob
box_del
pop
frame_dig -9
txnas Assets
itob
frame_dig 0
box_put
retsub

// deposit_ido_assets
depositidoassets_3:
proto 2 0
bytec_0 // ""
dup
intc_0 // 0
dupn 4
bytec_0 // ""
intc_0 // 0
dupn 12
bytec_0 // ""
dup
frame_dig -1
txnas Assets
itob
box_get
store 3
store 2
load 3
assert
load 2
frame_bury 0
frame_dig 0
extract 0 32
frame_bury 1
txn Sender
frame_dig 1
==
// Transaction sender must be the project owner.
assert
frame_dig -2
gtxns AssetAmount
intc_0 // 0
>
// Invalid asset_amount, asset_receiver, type_enum, xfer_asset or sender.
assert
frame_dig -2
gtxns AssetReceiver
bytec_2 // "escrow_address"
app_global_get
==
// Invalid asset_amount, asset_receiver, type_enum, xfer_asset or sender.
assert
frame_dig -2
gtxns TypeEnum
pushint 4 // axfer
==
// Invalid asset_amount, asset_receiver, type_enum, xfer_asset or sender.
assert
frame_dig -2
gtxns XferAsset
frame_dig -1
txnas Assets
==
// Invalid asset_amount, asset_receiver, type_enum, xfer_asset or sender.
assert
frame_dig -2
gtxns Sender
frame_dig 1
==
// Invalid asset_amount, asset_receiver, type_enum, xfer_asset or sender.
assert
frame_dig 0
intc_2 // 32
extract_uint64
frame_bury 2
frame_dig 0
pushint 40 // 40
extract_uint64
frame_bury 3
frame_dig 0
intc_3 // 48
extract_uint64
frame_bury 4
frame_dig 0
pushint 56 // 56
extract_uint64
frame_bury 5
frame_dig 0
pushint 64 // 64
extract_uint64
frame_bury 6
frame_dig 0
frame_dig 0
pushint 72 // 72
extract_uint16
dig 1
len
substring3
frame_bury 7
frame_dig 0
pushint 74 // 74
extract_uint64
frame_bury 8
frame_dig 0
pushint 82 // 82
extract_uint64
frame_bury 9
frame_dig 0
pushint 90 // 90
extract_uint64
frame_bury 10
frame_dig 0
pushint 98 // 98
extract_uint64
frame_bury 11
frame_dig -2
gtxns AssetAmount
frame_bury 12
frame_dig 0
intc 5 // 912
getbit
frame_bury 13
frame_dig 0
intc 6 // 913
getbit
frame_bury 14
frame_dig 0
pushint 115 // 115
extract_uint64
frame_bury 15
frame_dig 0
pushint 123 // 123
extract_uint64
frame_bury 16
frame_dig 0
intc 7 // 131
extract_uint64
frame_bury 17
frame_dig 0
intc 8 // 139
extract_uint64
frame_bury 18
frame_dig 12
frame_dig 8
*
frame_bury 11
frame_dig 1
frame_dig 2
itob
concat
frame_dig 3
itob
concat
frame_dig 4
itob
concat
frame_dig 5
itob
concat
frame_dig 6
itob
concat
frame_dig 7
frame_bury 22
frame_dig 22
frame_bury 21
intc 4 // 147
frame_bury 19
frame_dig 19
itob
extract 6 0
concat
frame_dig 8
itob
concat
frame_dig 9
itob
concat
frame_dig 10
itob
concat
frame_dig 11
itob
concat
frame_dig 12
itob
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 13
setbit
intc_1 // 1
frame_dig 14
setbit
concat
frame_dig 15
itob
concat
frame_dig 16
itob
concat
frame_dig 17
itob
concat
frame_dig 18
itob
concat
frame_dig 21
concat
frame_bury 0
frame_dig -1
txnas Assets
itob
box_del
pop
frame_dig -1
txnas Assets
itob
frame_dig 0
box_put
retsub

// invest
invest_4:
proto 3 0
bytec_0 // ""
dupn 2
intc_0 // 0
dupn 4
bytec_0 // ""
intc_0 // 0
dupn 10
bytec_0 // ""
intc_0 // 0
dupn 7
bytec_0 // ""
dup
intc_0 // 0
dup
bytec_0 // ""
dup
frame_dig -3
intc_1 // 1
==
// Investor must be staking $VEST.
assert
frame_dig -2
txnas Assets
itob
box_len
store 5
store 4
load 5
// A valid project ID must be provided
assert
frame_dig -2
txnas Assets
itob
box_get
store 7
store 6
load 7
assert
load 6
frame_bury 1
bytec_2 // "escrow_address"
app_global_get
frame_dig -2
txnas Assets
asset_holding_get AssetBalance
store 8
intc_0 // 0
>
// Project assets must be available in escrow.
assert
frame_dig 1
extract 0 32
frame_bury 2
frame_dig 1
intc_2 // 32
extract_uint64
frame_bury 3
frame_dig 1
pushint 40 // 40
extract_uint64
frame_bury 4
frame_dig 1
intc_3 // 48
extract_uint64
frame_bury 5
frame_dig 1
pushint 56 // 56
extract_uint64
frame_bury 6
frame_dig 1
pushint 64 // 64
extract_uint64
frame_bury 7
frame_dig 1
frame_dig 1
pushint 72 // 72
extract_uint16
dig 1
len
substring3
frame_bury 8
frame_dig 1
pushint 74 // 74
extract_uint64
frame_bury 9
frame_dig 1
pushint 82 // 82
extract_uint64
frame_bury 10
frame_dig 1
pushint 90 // 90
extract_uint64
frame_bury 11
frame_dig 1
pushint 98 // 98
extract_uint64
frame_bury 12
frame_dig 1
pushint 106 // 106
extract_uint64
frame_bury 13
frame_dig 1
intc 5 // 912
getbit
frame_bury 14
frame_dig 1
intc 6 // 913
getbit
frame_bury 15
frame_dig 1
pushint 115 // 115
extract_uint64
frame_bury 16
frame_dig 1
pushint 123 // 123
extract_uint64
frame_bury 17
frame_dig 1
intc 7 // 131
extract_uint64
frame_bury 18
frame_dig 1
intc 8 // 139
extract_uint64
frame_bury 19
frame_dig 14
intc_0 // 0
==
// Project must not be paused.
assert
frame_dig 17
frame_dig 12
<
// Total amount raised must be less than Max. cap
assert
global LatestTimestamp
frame_dig 3
>=
// Project must be live and ongoing.
assert
global LatestTimestamp
frame_dig 4
<
// Project must be live and ongoing.
assert
frame_dig -1
gtxns Receiver
bytec_2 // "escrow_address"
app_global_get
==
// Invalid receiver or transaction type.
assert
frame_dig -1
gtxns TypeEnum
intc_1 // pay
==
// Invalid receiver or transaction type.
assert
frame_dig -1
gtxns AssetAmount
frame_dig 10
>=
frame_dig -1
gtxns AssetAmount
frame_dig 11
<=
||
// Asset amount must be greater than or equal to min_investment and must be less than or equal to max_investment.
assert
txn Sender
frame_bury 20
frame_dig 20
len
intc_2 // 32
==
assert
frame_dig -2
txnas Assets
frame_bury 21
frame_dig -1
gtxns Amount
frame_bury 22
intc_0 // 0
frame_bury 23
intc_0 // 0
!
!
frame_bury 24
intc_0 // 0
!
!
frame_bury 25
intc_0 // 0
frame_bury 26
frame_dig 22
frame_dig 9
>=
// Investment amount cannot be lesser than asset price
assert
frame_dig 22
frame_dig 9
/
frame_bury 26
frame_dig 26
frame_bury 26
frame_dig 20
frame_dig 21
itob
concat
frame_dig 22
itob
concat
frame_dig 26
itob
concat
frame_dig 23
itob
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 24
setbit
intc_1 // 1
frame_dig 25
setbit
concat
frame_bury 0
frame_dig 20
box_del
pop
frame_dig 20
frame_dig 0
box_put
frame_dig 13
frame_dig 26
-
frame_bury 16
frame_dig 17
frame_dig 22
+
frame_bury 17
frame_dig 2
frame_dig 3
itob
concat
frame_dig 4
itob
concat
frame_dig 5
itob
concat
frame_dig 6
itob
concat
frame_dig 7
itob
concat
frame_dig 8
frame_bury 34
frame_dig 34
frame_bury 33
intc 4 // 147
frame_bury 31
frame_dig 31
itob
extract 6 0
concat
frame_dig 9
itob
concat
frame_dig 10
itob
concat
frame_dig 11
itob
concat
frame_dig 12
itob
concat
frame_dig 13
itob
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 14
setbit
intc_1 // 1
frame_dig 15
setbit
concat
frame_dig 16
itob
concat
frame_dig 17
itob
concat
frame_dig 18
itob
concat
frame_dig 19
itob
concat
frame_dig 33
concat
frame_bury 1
frame_dig -2
txnas Assets
itob
box_del
pop
frame_dig -2
txnas Assets
itob
frame_dig 1
box_put
retsub

// claim_ido_asset
claimidoasset_5:
proto 2 0
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
dup
intc_0 // 0
dupn 7
bytec_0 // ""
dup
txn Sender
box_len
store 10
store 9
load 10
// Invalid investor.
assert
frame_dig -2
txnas Assets
itob
box_len
store 12
store 11
load 12
// Invalid project.
assert
frame_dig -2
txnas Assets
itob
box_get
store 14
store 13
load 14
assert
load 13
frame_bury 0
frame_dig 0
intc_3 // 48
extract_uint64
frame_bury 1
global LatestTimestamp
frame_dig 1
>=
// Asset claiming hasn't begun.
assert
txn Sender
box_get
store 16
store 15
load 16
assert
load 15
frame_bury 2
frame_dig 2
extract 0 32
frame_bury 3
frame_dig 2
intc_2 // 32
extract_uint64
frame_bury 4
frame_dig 2
pushint 40 // 40
extract_uint64
frame_bury 5
frame_dig 2
intc_3 // 48
extract_uint64
frame_bury 6
frame_dig 2
pushint 56 // 56
extract_uint64
frame_bury 7
frame_dig 2
intc 9 // 512
getbit
frame_bury 8
frame_dig 2
intc 10 // 513
getbit
frame_bury 9
frame_dig -1
intc_1 // 1
==
// Investor must be staking.
assert
frame_dig 5
intc_0 // 0
>
// Investor amount must be greater than 0.
assert
frame_dig 6
intc_0 // 0
>
// Investor asset allocation must be greater than 0.
assert
frame_dig 7
intc_0 // 0
==
// Investor claim_timestamp must be 0.
assert
frame_dig 8
intc_0 // 0
==
// Investor must have not claimed their allocation.
assert
frame_dig 9
intc_0 // 0
==
// Investor must have not reclaimed their investment.
assert
itxn_begin
pushint 4 // axfer
itxn_field TypeEnum
frame_dig 6
itxn_field AssetAmount
frame_dig 3
itxn_field AssetReceiver
frame_dig -2
txnas Assets
itxn_field XferAsset
itxn_submit
global LatestTimestamp
frame_bury 7
intc_1 // 1
!
!
frame_bury 8
frame_dig 3
frame_dig 4
itob
concat
frame_dig 5
itob
concat
frame_dig 6
itob
concat
frame_dig 7
itob
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 8
setbit
intc_1 // 1
frame_dig 9
setbit
concat
frame_bury 2
frame_dig 3
box_del
pop
frame_dig 3
frame_dig 2
box_put
retsub

// reclaim_investment
reclaiminvestment_6:
proto 2 0
bytec_0 // ""
dup
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dupn 7
bytec_0 // ""
dup
txn Sender
box_len
store 18
store 17
load 18
// Invalid investor.
assert
frame_dig -2
txnas Assets
itob
box_len
store 20
store 19
load 20
// Invalid project ID.
assert
txn Sender
box_get
store 22
store 21
load 22
assert
load 21
frame_bury 0
frame_dig -2
txnas Assets
itob
box_get
store 24
store 23
load 24
assert
load 23
frame_bury 1
frame_dig 1
intc_3 // 48
extract_uint64
frame_bury 2
frame_dig 0
extract 0 32
frame_bury 3
frame_dig 0
intc_2 // 32
extract_uint64
frame_bury 4
frame_dig 0
pushint 40 // 40
extract_uint64
frame_bury 5
frame_dig 0
intc_3 // 48
extract_uint64
frame_bury 6
frame_dig 0
intc 9 // 512
getbit
frame_bury 7
frame_dig 0
pushint 56 // 56
extract_uint64
frame_bury 8
frame_dig 0
intc 10 // 513
getbit
frame_bury 9
bytec_2 // "escrow_address"
app_global_get
frame_dig -2
txnas Assets
asset_holding_get AssetBalance
store 25
intc_0 // 0
>
// Project assets must be available in escrow.
assert
frame_dig -1
intc_1 // 1
==
// Investor must be staking $VEST.
assert
frame_dig 6
intc_0 // 0
>
// Investor asset allocation must be greater than 0.
assert
frame_dig 7
intc_0 // 0
==
// Investor must have not claimed their asset allocation.
assert
frame_dig 9
intc_0 // 0
==
// Investor must have not reclaimed investment.
assert
pushint 1209600 // 1209600
global LatestTimestamp
frame_dig 2
-
>=
// Claim must be within the reclaim window.
assert
itxn_begin
intc_1 // pay
itxn_field TypeEnum
frame_dig 3
itxn_field Receiver
frame_dig 5
itxn_field Amount
itxn_submit
intc_0 // 0
frame_bury 5
intc_0 // 0
frame_bury 6
intc_1 // 1
!
!
frame_bury 9
frame_dig 3
frame_dig 4
itob
concat
frame_dig 5
itob
concat
frame_dig 6
itob
concat
frame_dig 8
itob
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 7
setbit
intc_1 // 1
frame_dig 9
setbit
concat
frame_bury 0
frame_dig 3
box_del
pop
frame_dig 3
frame_dig 0
box_put
retsub

// withdraw_amount_raised
withdrawamountraised_7:
proto 1 0
bytec_0 // ""
dup
intc_0 // 0
dupn 4
bytec_0 // ""
intc_0 // 0
dupn 16
bytec_0 // ""
dup
frame_dig -1
itob
box_len
store 27
store 26
load 27
// Invalid project ID.
assert
frame_dig -1
itob
box_get
store 29
store 28
load 29
assert
load 28
frame_bury 0
frame_dig 0
extract 0 32
frame_bury 1
frame_dig 0
intc_2 // 32
extract_uint64
frame_bury 2
frame_dig 0
pushint 40 // 40
extract_uint64
frame_bury 3
frame_dig 0
intc_3 // 48
extract_uint64
frame_bury 4
frame_dig 0
pushint 56 // 56
extract_uint64
frame_bury 5
frame_dig 0
pushint 64 // 64
extract_uint64
frame_bury 6
frame_dig 0
frame_dig 0
pushint 72 // 72
extract_uint16
dig 1
len
substring3
frame_bury 7
frame_dig 0
pushint 74 // 74
extract_uint64
frame_bury 8
frame_dig 0
pushint 82 // 82
extract_uint64
frame_bury 9
frame_dig 0
pushint 90 // 90
extract_uint64
frame_bury 10
frame_dig 0
pushint 98 // 98
extract_uint64
frame_bury 11
frame_dig 0
pushint 106 // 106
extract_uint64
frame_bury 12
frame_dig 0
intc 5 // 912
getbit
frame_bury 13
frame_dig 0
intc 6 // 913
getbit
frame_bury 14
frame_dig 0
pushint 115 // 115
extract_uint64
frame_bury 15
frame_dig 0
pushint 123 // 123
extract_uint64
frame_bury 16
frame_dig 0
intc 7 // 131
extract_uint64
frame_bury 17
frame_dig 0
intc 8 // 139
extract_uint64
frame_bury 18
txn Sender
frame_dig 1
==
// Invalid sender.
assert
frame_dig 16
intc_0 // 0
>
// Amount raised must be greater than 0.
assert
global LatestTimestamp
frame_dig 4
>
// Withdrawal must be after claim period.
assert
pushint 10 // 10
frame_bury 19
intc_0 // 0
frame_bury 20
frame_dig 16
frame_dig 16
frame_dig 19
*
pushint 100 // 100
/
-
frame_bury 20
pushint 10 // 10
frame_bury 21
intc_0 // 0
frame_bury 22
frame_dig 21
intc_0 // 0
>
assert
frame_dig 21
pushint 100 // 100
<=
assert
frame_dig 21
frame_dig 20
*
pushint 100 // 100
/
frame_bury 22
frame_dig 14
intc_0 // 0
==
bnz withdrawamountraised_7_l2
global LatestTimestamp
frame_dig 18
>
// Subsequent withdrawal must be after vesting period.
assert
frame_dig 17
frame_dig 20
<
// Accumulated withdrawn amount must be less than amount raised.
assert
itxn_begin
intc_1 // pay
itxn_field TypeEnum
frame_dig 22
itxn_field Amount
frame_dig 1
itxn_field Receiver
itxn_submit
frame_dig 17
frame_dig 22
+
frame_bury 17
b withdrawamountraised_7_l3
withdrawamountraised_7_l2:
itxn_begin
intc_1 // pay
itxn_field TypeEnum
frame_dig 22
itxn_field Amount
frame_dig 1
itxn_field Receiver
itxn_submit
intc_1 // 1
!
!
frame_bury 14
frame_dig 17
frame_dig 22
+
frame_bury 17
withdrawamountraised_7_l3:
frame_dig 1
frame_dig 2
itob
concat
frame_dig 3
itob
concat
frame_dig 4
itob
concat
frame_dig 5
itob
concat
frame_dig 6
itob
concat
frame_dig 7
frame_bury 26
frame_dig 26
frame_bury 25
intc 4 // 147
frame_bury 23
frame_dig 23
itob
extract 6 0
concat
frame_dig 8
itob
concat
frame_dig 9
itob
concat
frame_dig 10
itob
concat
frame_dig 11
itob
concat
frame_dig 12
itob
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 13
setbit
intc_1 // 1
frame_dig 14
setbit
concat
frame_dig 15
itob
concat
frame_dig 16
itob
concat
frame_dig 17
itob
concat
frame_dig 18
itob
concat
frame_dig 25
concat
frame_bury 0
frame_dig -1
itob
box_del
pop
frame_dig -1
itob
frame_dig 0
box_put
retsub

// pause_project
pauseproject_8:
proto 1 0
bytec_0 // ""
dup
intc_0 // 0
dupn 4
bytec_0 // ""
intc_0 // 0
dupn 12
bytec_0 // ""
dup
txn Sender
global CreatorAddress
==
// unauthorized
assert
frame_dig -1
itob
box_len
store 31
store 30
load 31
// Invalid project ID.
assert
frame_dig -1
itob
box_get
store 33
store 32
load 33
assert
load 32
frame_bury 0
frame_dig 0
extract 0 32
frame_bury 1
frame_dig 0
intc_2 // 32
extract_uint64
frame_bury 2
frame_dig 0
pushint 40 // 40
extract_uint64
frame_bury 3
frame_dig 0
intc_3 // 48
extract_uint64
frame_bury 4
frame_dig 0
pushint 56 // 56
extract_uint64
frame_bury 5
frame_dig 0
pushint 64 // 64
extract_uint64
frame_bury 6
frame_dig 0
frame_dig 0
pushint 72 // 72
extract_uint16
dig 1
len
substring3
frame_bury 7
frame_dig 0
pushint 74 // 74
extract_uint64
frame_bury 8
frame_dig 0
pushint 82 // 82
extract_uint64
frame_bury 9
frame_dig 0
pushint 90 // 90
extract_uint64
frame_bury 10
frame_dig 0
pushint 98 // 98
extract_uint64
frame_bury 11
frame_dig 0
pushint 106 // 106
extract_uint64
frame_bury 12
frame_dig 0
intc 5 // 912
getbit
frame_bury 13
frame_dig 0
intc 6 // 913
getbit
frame_bury 14
frame_dig 0
pushint 115 // 115
extract_uint64
frame_bury 15
frame_dig 0
pushint 123 // 123
extract_uint64
frame_bury 16
frame_dig 0
intc 7 // 131
extract_uint64
frame_bury 17
frame_dig 0
intc 8 // 139
extract_uint64
frame_bury 18
frame_dig 13
intc_0 // 0
==
// Project must not be paused.
assert
intc_1 // 1
!
!
frame_bury 13
frame_dig 1
frame_dig 2
itob
concat
frame_dig 3
itob
concat
frame_dig 4
itob
concat
frame_dig 5
itob
concat
frame_dig 6
itob
concat
frame_dig 7
frame_bury 22
frame_dig 22
frame_bury 21
intc 4 // 147
frame_bury 19
frame_dig 19
itob
extract 6 0
concat
frame_dig 8
itob
concat
frame_dig 9
itob
concat
frame_dig 10
itob
concat
frame_dig 11
itob
concat
frame_dig 12
itob
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 13
setbit
intc_1 // 1
frame_dig 14
setbit
concat
frame_dig 15
itob
concat
frame_dig 16
itob
concat
frame_dig 17
itob
concat
frame_dig 18
itob
concat
frame_dig 21
concat
frame_bury 0
frame_dig -1
itob
box_del
pop
frame_dig -1
itob
frame_dig 0
box_put
retsub

// unpause_project
unpauseproject_9:
proto 1 0
bytec_0 // ""
dup
intc_0 // 0
dupn 4
bytec_0 // ""
intc_0 // 0
dupn 12
bytec_0 // ""
dup
txn Sender
global CreatorAddress
==
// unauthorized
assert
frame_dig -1
itob
box_len
store 35
store 34
load 35
// Invalid project ID.
assert
frame_dig -1
itob
box_get
store 37
store 36
load 37
assert
load 36
frame_bury 0
frame_dig 0
extract 0 32
frame_bury 1
frame_dig 0
intc_2 // 32
extract_uint64
frame_bury 2
frame_dig 0
pushint 40 // 40
extract_uint64
frame_bury 3
frame_dig 0
intc_3 // 48
extract_uint64
frame_bury 4
frame_dig 0
pushint 56 // 56
extract_uint64
frame_bury 5
frame_dig 0
pushint 64 // 64
extract_uint64
frame_bury 6
frame_dig 0
frame_dig 0
pushint 72 // 72
extract_uint16
dig 1
len
substring3
frame_bury 7
frame_dig 0
pushint 74 // 74
extract_uint64
frame_bury 8
frame_dig 0
pushint 82 // 82
extract_uint64
frame_bury 9
frame_dig 0
pushint 90 // 90
extract_uint64
frame_bury 10
frame_dig 0
pushint 98 // 98
extract_uint64
frame_bury 11
frame_dig 0
pushint 106 // 106
extract_uint64
frame_bury 12
frame_dig 0
intc 5 // 912
getbit
frame_bury 13
frame_dig 0
intc 6 // 913
getbit
frame_bury 14
frame_dig 0
pushint 115 // 115
extract_uint64
frame_bury 15
frame_dig 0
pushint 123 // 123
extract_uint64
frame_bury 16
frame_dig 0
intc 7 // 131
extract_uint64
frame_bury 17
frame_dig 0
intc 8 // 139
extract_uint64
frame_bury 18
frame_dig 13
intc_1 // 1
==
// Project must be paused.
assert
intc_0 // 0
!
!
frame_bury 13
frame_dig 1
frame_dig 2
itob
concat
frame_dig 3
itob
concat
frame_dig 4
itob
concat
frame_dig 5
itob
concat
frame_dig 6
itob
concat
frame_dig 7
frame_bury 22
frame_dig 22
frame_bury 21
intc 4 // 147
frame_bury 19
frame_dig 19
itob
extract 6 0
concat
frame_dig 8
itob
concat
frame_dig 9
itob
concat
frame_dig 10
itob
concat
frame_dig 11
itob
concat
frame_dig 12
itob
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 13
setbit
intc_1 // 1
frame_dig 14
setbit
concat
frame_dig 15
itob
concat
frame_dig 16
itob
concat
frame_dig 17
itob
concat
frame_dig 18
itob
concat
frame_dig 21
concat
frame_bury 0
frame_dig -1
itob
box_del
pop
frame_dig -1
itob
frame_dig 0
box_put
retsub

// change_launchpad_admin
changelaunchpadadmin_10:
proto 1 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
bytec_3 // "admin_acct"
frame_dig -1
app_global_put
retsub

// get_investor
getinvestor_11:
proto 1 1
bytec_0 // ""
frame_dig -1
box_get
store 39
store 38
load 39
assert
load 38
frame_bury 0
retsub

// get_project
getproject_12:
proto 1 1
bytec_0 // ""
frame_dig -1
itob
box_get
store 41
store 40
load 41
assert
load 40
frame_bury 0
retsub

// bootstrap_caster
bootstrapcaster_13:
proto 0 0
callsub bootstrap_0
retsub

// fund_escrow_address_caster
fundescrowaddresscaster_14:
proto 0 0
intc_0 // 0
txn GroupIndex
intc_1 // 1
-
frame_bury 0
frame_dig 0
gtxns TypeEnum
intc_1 // pay
==
assert
frame_dig 0
callsub fundescrowaddress_1
retsub

// list_project_caster
listprojectcaster_15:
proto 0 0
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dupn 6
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 0
txna ApplicationArgs 2
frame_bury 1
txna ApplicationArgs 3
btoi
frame_bury 2
txna ApplicationArgs 4
btoi
frame_bury 3
txna ApplicationArgs 5
btoi
frame_bury 4
txna ApplicationArgs 6
btoi
frame_bury 5
txna ApplicationArgs 7
btoi
frame_bury 6
txna ApplicationArgs 8
btoi
frame_bury 7
txna ApplicationArgs 9
btoi
frame_bury 8
frame_dig 0
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
frame_dig 5
frame_dig 6
frame_dig 7
frame_dig 8
callsub listproject_2
retsub

// deposit_ido_assets_caster
depositidoassetscaster_16:
proto 0 0
intc_0 // 0
dup
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 1
txn GroupIndex
intc_1 // 1
-
frame_bury 0
frame_dig 0
gtxns TypeEnum
pushint 4 // axfer
==
assert
frame_dig 0
frame_dig 1
callsub depositidoassets_3
retsub

// invest_caster
investcaster_17:
proto 0 0
intc_0 // 0
dupn 2
txna ApplicationArgs 1
intc_0 // 0
pushint 8 // 8
*
getbit
frame_bury 0
txna ApplicationArgs 2
intc_0 // 0
getbyte
frame_bury 1
txn GroupIndex
intc_1 // 1
-
frame_bury 2
frame_dig 2
gtxns TypeEnum
intc_1 // pay
==
assert
frame_dig 0
frame_dig 1
frame_dig 2
callsub invest_4
retsub

// claim_ido_asset_caster
claimidoassetcaster_18:
proto 0 0
intc_0 // 0
dup
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 0
txna ApplicationArgs 2
intc_0 // 0
pushint 8 // 8
*
getbit
frame_bury 1
frame_dig 0
frame_dig 1
callsub claimidoasset_5
retsub

// reclaim_investment_caster
reclaiminvestmentcaster_19:
proto 0 0
intc_0 // 0
dup
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 0
txna ApplicationArgs 2
intc_0 // 0
pushint 8 // 8
*
getbit
frame_bury 1
frame_dig 0
frame_dig 1
callsub reclaiminvestment_6
retsub

// withdraw_amount_raised_caster
withdrawamountraisedcaster_20:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
btoi
frame_bury 0
frame_dig 0
callsub withdrawamountraised_7
retsub

// pause_project_caster
pauseprojectcaster_21:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
btoi
frame_bury 0
frame_dig 0
callsub pauseproject_8
retsub

// unpause_project_caster
unpauseprojectcaster_22:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
btoi
frame_bury 0
frame_dig 0
callsub unpauseproject_9
retsub

// change_launchpad_admin_caster
changelaunchpadadmincaster_23:
proto 0 0
bytec_0 // ""
txna ApplicationArgs 1
frame_bury 0
frame_dig 0
callsub changelaunchpadadmin_10
retsub

// get_investor_caster
getinvestorcaster_24:
proto 0 0
bytec_0 // ""
dup
txna ApplicationArgs 1
frame_bury 1
frame_dig 1
callsub getinvestor_11
frame_bury 0
bytec 4 // 0x151f7c75
frame_dig 0
concat
log
retsub

// get_project_caster
getprojectcaster_25:
proto 0 0
bytec_0 // ""
intc_0 // 0
txna ApplicationArgs 1
btoi
frame_bury 1
frame_dig 1
callsub getproject_12
frame_bury 0
bytec 4 // 0x151f7c75
frame_dig 0
concat
log
retsub