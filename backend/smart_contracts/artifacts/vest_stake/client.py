# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "bootstrap(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fund_escrow_address(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_stake_amounts(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_annual_rate(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stake(asset,uint64,axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "un_stake(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_staker(address)(address,uint64,uint64,bool,uint64,uint64)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "Staker",
                    "elements": [
                        [
                            "address",
                            "address"
                        ],
                        [
                            "amount",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "is_staking",
                            "bool"
                        ],
                        [
                            "start_timestamp",
                            "uint64"
                        ],
                        [
                            "end_timestamp",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSAxMCA0IDEwMDAwMDAwIDMxNTM2MDAwCmJ5dGVjYmxvY2sgMHggMHg2NTczNjM3MjZmNzc1ZjYxNjQ2NDcyNjU3MzczIDB4NmQ2MTc4NWY3Mzc0NjE2YjY1IDB4NmQ2OTZlNWY3Mzc0NjE2YjY1IDB4NzY2NTczNzQ1ZjY0NjU2MzY5NmQ2MTZjNzMgMHg2MTZlNmU3NTYxNmM1ZjcyNjE3NDY1IDB4NjE2NDZkNjk2ZTVmNjE2MzYzNzQgMHgwMAp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sMTYKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgzNDQ5NGQ4NyAvLyAiYm9vdHN0cmFwKGFzc2V0KXZvaWQiCj09CmJueiBtYWluX2wxNQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDk2M2E1OTZlIC8vICJmdW5kX2VzY3Jvd19hZGRyZXNzKHBheSl2b2lkIgo9PQpibnogbWFpbl9sMTQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgyY2E2YWUwMiAvLyAic2V0X3N0YWtlX2Ftb3VudHModWludDY0LHVpbnQ2NCl2b2lkIgo9PQpibnogbWFpbl9sMTMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgxYzA5NGI2MCAvLyAic2V0X2FubnVhbF9yYXRlKHVpbnQ2NCl2b2lkIgo9PQpibnogbWFpbl9sMTIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhhZTRiOWU5MiAvLyAic3Rha2UoYXNzZXQsdWludDY0LGF4ZmVyKXZvaWQiCj09CmJueiBtYWluX2wxMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDU3YmFhNWI1IC8vICJ1bl9zdGFrZShhc3NldCl2b2lkIgo9PQpibnogbWFpbl9sMTAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgyZmUyY2I0ZSAvLyAiZ2V0X3N0YWtlcihhZGRyZXNzKShhZGRyZXNzLHVpbnQ2NCx1aW50NjQsYm9vbCx1aW50NjQsdWludDY0KSIKPT0KYm56IG1haW5fbDkKZXJyCm1haW5fbDk6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgZ2V0c3Rha2VyY2FzdGVyXzEzCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiB1bnN0YWtlY2FzdGVyXzEyCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBzdGFrZWNhc3Rlcl8xMQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTI6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgc2V0YW5udWFscmF0ZWNhc3Rlcl8xMAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTM6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgc2V0c3Rha2VhbW91bnRzY2FzdGVyXzkKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE0Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGZ1bmRlc2Nyb3dhZGRyZXNzY2FzdGVyXzgKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE1Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGJvb3RzdHJhcGNhc3Rlcl83CmludGNfMSAvLyAxCnJldHVybgptYWluX2wxNjoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQpibnogbWFpbl9sMTgKZXJyCm1haW5fbDE4Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBib290c3RyYXAKYm9vdHN0cmFwXzA6CnByb3RvIDEgMApieXRlYyA2IC8vICJhZG1pbl9hY2N0IgpieXRlY18wIC8vICIiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDUgLy8gImFubnVhbF9yYXRlIgppbnRjXzIgLy8gMTAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMSAvLyAiZXNjcm93X2FkZHJlc3MiCmJ5dGVjXzAgLy8gIiIKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMiAvLyAibWF4X3N0YWtlIgpwdXNoaW50IDIwMDAwIC8vIDIwMDAwCmludGNfMiAvLyAxMAoqCmludGMgNCAvLyAxMDAwMDAwMAoqCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzMgLy8gIm1pbl9zdGFrZSIKcHVzaGludCAxMDAgLy8gMTAwCmludGNfMiAvLyAxMAoqCmludGMgNCAvLyAxMDAwMDAwMAoqCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDQgLy8gInZlc3RfZGVjaW1hbHMiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDYgLy8gImFkbWluX2FjY3QiCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwphcHBfZ2xvYmFsX3B1dApieXRlY18xIC8vICJlc2Nyb3dfYWRkcmVzcyIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKYXBwX2dsb2JhbF9wdXQKZnJhbWVfZGlnIC0xCnR4bmFzIEFzc2V0cwphc3NldF9wYXJhbXNfZ2V0IEFzc2V0RGVjaW1hbHMKc3RvcmUgMQpzdG9yZSAwCmxvYWQgMAppbnRjXzAgLy8gMAohPQphc3NlcnQKYnl0ZWMgNCAvLyAidmVzdF9kZWNpbWFscyIKbG9hZCAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzEgLy8gImVzY3Jvd19hZGRyZXNzIgphcHBfZ2xvYmFsX2dldApmcmFtZV9kaWcgLTEKdHhuYXMgQXNzZXRzCmFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQpzdG9yZSAyCmludGNfMCAvLyAwCj09CmJ6IGJvb3RzdHJhcF8wX2wyCml0eG5fYmVnaW4KaW50Y18zIC8vIGF4ZmVyCml0eG5fZmllbGQgVHlwZUVudW0KZnJhbWVfZGlnIC0xCnR4bmFzIEFzc2V0cwppdHhuX2ZpZWxkIFhmZXJBc3NldAppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEFzc2V0QW1vdW50CmJ5dGVjXzEgLy8gImVzY3Jvd19hZGRyZXNzIgphcHBfZ2xvYmFsX2dldAppdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKaXR4bl9zdWJtaXQKYm9vdHN0cmFwXzBfbDI6CnJldHN1YgoKLy8gZnVuZF9lc2Nyb3dfYWRkcmVzcwpmdW5kZXNjcm93YWRkcmVzc18xOgpwcm90byAxIDAKZnJhbWVfZGlnIC0xCmd0eG5zIEFtb3VudAppbnRjXzAgLy8gMAo+CmFzc2VydApmcmFtZV9kaWcgLTEKZ3R4bnMgUmVjZWl2ZXIKYnl0ZWNfMSAvLyAiZXNjcm93X2FkZHJlc3MiCmFwcF9nbG9iYWxfZ2V0Cj09CmFzc2VydApmcmFtZV9kaWcgLTEKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKcmV0c3ViCgovLyBzZXRfc3Rha2VfYW1vdW50cwpzZXRzdGFrZWFtb3VudHNfMjoKcHJvdG8gMiAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKZnJhbWVfZGlnIC0yCmludGNfMCAvLyAwCj4KYXNzZXJ0CmZyYW1lX2RpZyAtMQppbnRjXzAgLy8gMAo+CmFzc2VydApmcmFtZV9kaWcgLTEKZnJhbWVfZGlnIC0yCj4KYXNzZXJ0CmJ5dGVjXzMgLy8gIm1pbl9zdGFrZSIKZnJhbWVfZGlnIC0yCmludGNfMiAvLyAxMAoqCmJ5dGVjIDQgLy8gInZlc3RfZGVjaW1hbHMiCmFwcF9nbG9iYWxfZ2V0CioKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMiAvLyAibWF4X3N0YWtlIgpmcmFtZV9kaWcgLTEKaW50Y18yIC8vIDEwCioKYnl0ZWMgNCAvLyAidmVzdF9kZWNpbWFscyIKYXBwX2dsb2JhbF9nZXQKKgphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHNldF9hbm51YWxfcmF0ZQpzZXRhbm51YWxyYXRlXzM6CnByb3RvIDEgMAp0eG4gU2VuZGVyCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmJ5dGVjIDUgLy8gImFubnVhbF9yYXRlIgpmcmFtZV9kaWcgLTEKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBzdGFrZQpzdGFrZV80Ogpwcm90byAzIDAKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKZHVwbiA2CmJ5dGVjXzAgLy8gIiIKZHVwCmZyYW1lX2RpZyAtMQpndHhucyBUeXBlRW51bQppbnRjXzMgLy8gYXhmZXIKPT0KYXNzZXJ0CmZyYW1lX2RpZyAtMQpndHhucyBBc3NldFJlY2VpdmVyCmJ5dGVjXzEgLy8gImVzY3Jvd19hZGRyZXNzIgphcHBfZ2xvYmFsX2dldAo9PQphc3NlcnQKZnJhbWVfZGlnIC0xCmd0eG5zIFhmZXJBc3NldApmcmFtZV9kaWcgLTMKdHhuYXMgQXNzZXRzCj09CmFzc2VydApmcmFtZV9kaWcgLTEKZ3R4bnMgQXNzZXRBbW91bnQKYnl0ZWNfMyAvLyAibWluX3N0YWtlIgphcHBfZ2xvYmFsX2dldAo+PQpmcmFtZV9kaWcgLTEKZ3R4bnMgQXNzZXRBbW91bnQKYnl0ZWNfMiAvLyAibWF4X3N0YWtlIgphcHBfZ2xvYmFsX2dldAo8PQomJgphc3NlcnQKZnJhbWVfZGlnIC0xCmd0eG5zIEFzc2V0QW1vdW50CmJ5dGVjXzMgLy8gIm1pbl9zdGFrZSIKYXBwX2dsb2JhbF9nZXQKPgpmcmFtZV9kaWcgLTEKZ3R4bnMgQXNzZXRBbW91bnQKYnl0ZWNfMiAvLyAibWF4X3N0YWtlIgphcHBfZ2xvYmFsX2dldAo8PQp8fAphc3NlcnQKZnJhbWVfZGlnIC0yCnB1c2hpbnQgMzAwIC8vIDMwMAo9PQpmcmFtZV9kaWcgLTIKcHVzaGludCA3ODg0MDAwIC8vIDc4ODQwMDAKPT0KfHwKZnJhbWVfZGlnIC0yCnB1c2hpbnQgMTU3NjgwMDAgLy8gMTU3NjgwMDAKPT0KfHwKZnJhbWVfZGlnIC0yCmludGMgNSAvLyAzMTUzNjAwMAo9PQp8fAphc3NlcnQKdHhuIFNlbmRlcgpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKbGVuCnB1c2hpbnQgMzIgLy8gMzIKPT0KYXNzZXJ0CmZyYW1lX2RpZyAtMQpndHhucyBBc3NldEFtb3VudApmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIC0zCnR4bmFzIEFzc2V0cwpmcmFtZV9idXJ5IDMKaW50Y18xIC8vIDEKIQohCmZyYW1lX2J1cnkgNApnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCmZyYW1lX2J1cnkgNQpmcmFtZV9kaWcgNQpmcmFtZV9kaWcgLTIKKwpmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDMKaXRvYgpjb25jYXQKYnl0ZWMgNyAvLyAweDAwCmludGNfMCAvLyAwCmZyYW1lX2RpZyA0CnNldGJpdApjb25jYXQKZnJhbWVfZGlnIDUKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDYKaXRvYgpjb25jYXQKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAxCmJveF9kZWwKcG9wCmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAwCmJveF9wdXQKcmV0c3ViCgovLyB1bl9zdGFrZQp1bnN0YWtlXzU6CnByb3RvIDEgMApieXRlY18wIC8vICIiCmR1cAppbnRjXzAgLy8gMApkdXBuIDgKYnl0ZWNfMCAvLyAiIgpkdXAKdHhuIFNlbmRlcgpib3hfbGVuCnN0b3JlIDQKc3RvcmUgMwpsb2FkIDQKYXNzZXJ0CnR4biBTZW5kZXIKYm94X2dldApzdG9yZSA2CnN0b3JlIDUKbG9hZCA2CmFzc2VydApsb2FkIDUKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmV4dHJhY3QgMCAzMgpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDAKcHVzaGludCAzMiAvLyAzMgpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIDAKcHVzaGludCA0MCAvLyA0MApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIDAKcHVzaGludCAzODQgLy8gMzg0CmdldGJpdApmcmFtZV9idXJ5IDQKZnJhbWVfZGlnIDAKcHVzaGludCA0OSAvLyA0OQpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDAKcHVzaGludCA1NyAvLyA1NwpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIDQKaW50Y18xIC8vIDEKPT0KYXNzZXJ0Cmdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKZnJhbWVfZGlnIDYKPj0KYXNzZXJ0CmZyYW1lX2RpZyAtMQp0eG5hcyBBc3NldHMKZnJhbWVfZGlnIDMKPT0KLy8gaGVyZQphc3NlcnQKZnJhbWVfZGlnIDYKZnJhbWVfZGlnIDUKLQpmcmFtZV9idXJ5IDcKaW50Y18wIC8vIDAKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyAyCmJ5dGVjIDUgLy8gImFubnVhbF9yYXRlIgphcHBfZ2xvYmFsX2dldAoqCmZyYW1lX2RpZyA3CioKcHVzaGludCAxMDAgLy8gMTAwCmludGMgNSAvLyAzMTUzNjAwMAoqCi8KZnJhbWVfYnVyeSA4Cml0eG5fYmVnaW4KaW50Y18zIC8vIGF4ZmVyCml0eG5fZmllbGQgVHlwZUVudW0KZnJhbWVfZGlnIC0xCnR4bmFzIEFzc2V0cwppdHhuX2ZpZWxkIFhmZXJBc3NldApmcmFtZV9kaWcgMQppdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKZnJhbWVfZGlnIDgKaXR4bl9maWVsZCBBc3NldEFtb3VudAppdHhuX3N1Ym1pdAppbnRjXzAgLy8gMAohCiEKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCml0b2IKY29uY2F0CmZyYW1lX2RpZyAzCml0b2IKY29uY2F0CmJ5dGVjIDcgLy8gMHgwMAppbnRjXzAgLy8gMApmcmFtZV9kaWcgNApzZXRiaXQKY29uY2F0CmZyYW1lX2RpZyA1Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA2Cml0b2IKY29uY2F0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMQpib3hfZGVsCnBvcApyZXRzdWIKCi8vIGdldF9zdGFrZXIKZ2V0c3Rha2VyXzY6CnByb3RvIDEgMQpieXRlY18wIC8vICIiCmZyYW1lX2RpZyAtMQpib3hfZ2V0CnN0b3JlIDgKc3RvcmUgNwpsb2FkIDgKYXNzZXJ0CmxvYWQgNwpmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBib290c3RyYXBfY2FzdGVyCmJvb3RzdHJhcGNhc3Rlcl83Ogpwcm90byAwIDAKaW50Y18wIC8vIDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApnZXRieXRlCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApjYWxsc3ViIGJvb3RzdHJhcF8wCnJldHN1YgoKLy8gZnVuZF9lc2Nyb3dfYWRkcmVzc19jYXN0ZXIKZnVuZGVzY3Jvd2FkZHJlc3NjYXN0ZXJfODoKcHJvdG8gMCAwCmludGNfMCAvLyAwCnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAwCmNhbGxzdWIgZnVuZGVzY3Jvd2FkZHJlc3NfMQpyZXRzdWIKCi8vIHNldF9zdGFrZV9hbW91bnRzX2Nhc3RlcgpzZXRzdGFrZWFtb3VudHNjYXN0ZXJfOToKcHJvdG8gMCAwCmludGNfMCAvLyAwCmR1cAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKZnJhbWVfYnVyeSAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKYnRvaQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDEKY2FsbHN1YiBzZXRzdGFrZWFtb3VudHNfMgpyZXRzdWIKCi8vIHNldF9hbm51YWxfcmF0ZV9jYXN0ZXIKc2V0YW5udWFscmF0ZWNhc3Rlcl8xMDoKcHJvdG8gMCAwCmludGNfMCAvLyAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKYnRvaQpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKY2FsbHN1YiBzZXRhbm51YWxyYXRlXzMKcmV0c3ViCgovLyBzdGFrZV9jYXN0ZXIKc3Rha2VjYXN0ZXJfMTE6CnByb3RvIDAgMAppbnRjXzAgLy8gMApkdXBuIDIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApnZXRieXRlCmZyYW1lX2J1cnkgMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmJ0b2kKZnJhbWVfYnVyeSAxCnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAyCmd0eG5zIFR5cGVFbnVtCmludGNfMyAvLyBheGZlcgo9PQphc3NlcnQKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKY2FsbHN1YiBzdGFrZV80CnJldHN1YgoKLy8gdW5fc3Rha2VfY2FzdGVyCnVuc3Rha2VjYXN0ZXJfMTI6CnByb3RvIDAgMAppbnRjXzAgLy8gMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmludGNfMCAvLyAwCmdldGJ5dGUKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgdW5zdGFrZV81CnJldHN1YgoKLy8gZ2V0X3N0YWtlcl9jYXN0ZXIKZ2V0c3Rha2VyY2FzdGVyXzEzOgpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgpkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKY2FsbHN1YiBnZXRzdGFrZXJfNgpmcmFtZV9idXJ5IDAKcHVzaGJ5dGVzIDB4MTUxZjdjNzUgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1Yg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin_acct": {
                    "type": "bytes",
                    "key": "admin_acct",
                    "descr": ""
                },
                "annual_rate": {
                    "type": "uint64",
                    "key": "annual_rate",
                    "descr": ""
                },
                "escrow_address": {
                    "type": "bytes",
                    "key": "escrow_address",
                    "descr": ""
                },
                "max_stake": {
                    "type": "uint64",
                    "key": "max_stake",
                    "descr": ""
                },
                "min_stake": {
                    "type": "uint64",
                    "key": "min_stake",
                    "descr": ""
                },
                "vest_decimals": {
                    "type": "uint64",
                    "key": "vest_decimals",
                    "descr": ""
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "vest_stake",
        "methods": [
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "fund_escrow_address",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "The payment transaction to fund the escrow address."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Fund escrow address with Algos."
            },
            {
                "name": "set_stake_amounts",
                "args": [
                    {
                        "type": "uint64",
                        "name": "min_stake"
                    },
                    {
                        "type": "uint64",
                        "name": "max_stake"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_annual_rate",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_annual_rate"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "stake",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "stake_duration"
                    },
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "un_stake",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_staker",
                "args": [
                    {
                        "type": "address",
                        "name": "staker"
                    }
                ],
                "returns": {
                    "type": "(address,uint64,uint64,bool,uint64,uint64)"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.CommonCallParametersDict:
    return typing.cast(algokit_utils.CommonCallParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class BootstrapArgs(_ArgsBase[None]):
    asset: int

    @staticmethod
    def method() -> str:
        return "bootstrap(asset)void"


@dataclasses.dataclass(kw_only=True)
class FundEscrowAddressArgs(_ArgsBase[None]):
    """Fund escrow address with Algos."""

    txn: TransactionWithSigner
    """The payment transaction to fund the escrow address."""

    @staticmethod
    def method() -> str:
        return "fund_escrow_address(pay)void"


@dataclasses.dataclass(kw_only=True)
class SetStakeAmountsArgs(_ArgsBase[None]):
    min_stake: int
    max_stake: int

    @staticmethod
    def method() -> str:
        return "set_stake_amounts(uint64,uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetAnnualRateArgs(_ArgsBase[None]):
    new_annual_rate: int

    @staticmethod
    def method() -> str:
        return "set_annual_rate(uint64)void"


@dataclasses.dataclass(kw_only=True)
class StakeArgs(_ArgsBase[None]):
    asset: int
    stake_duration: int
    txn: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "stake(asset,uint64,axfer)void"


@dataclasses.dataclass(kw_only=True)
class UnStakeArgs(_ArgsBase[None]):
    asset: int

    @staticmethod
    def method() -> str:
        return "un_stake(asset)void"


@dataclasses.dataclass(kw_only=True)
class Staker:
    address: str
    amount: int
    asset_id: int
    is_staking: bool
    start_timestamp: int
    end_timestamp: int


@dataclasses.dataclass(kw_only=True)
class GetStakerArgs(_ArgsBase[Staker]):
    staker: str

    @staticmethod
    def method() -> str:
        return "get_staker(address)(address,uint64,uint64,bool,uint64,uint64)"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.admin_acct = ByteReader(typing.cast(bytes, data.get(b"admin_acct")))
        self.annual_rate = typing.cast(int, data.get(b"annual_rate"))
        self.escrow_address = ByteReader(typing.cast(bytes, data.get(b"escrow_address")))
        self.max_stake = typing.cast(int, data.get(b"max_stake"))
        self.min_stake = typing.cast(int, data.get(b"min_stake"))
        self.vest_decimals = typing.cast(int, data.get(b"vest_decimals"))


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def bootstrap(
        self,
        *,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `bootstrap(asset)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BootstrapArgs(
            asset=asset,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def fund_escrow_address(
        self,
        *,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Fund escrow address with Algos.
        
        Adds a call to `fund_escrow_address(pay)void` ABI method
        
        :param TransactionWithSigner txn: The payment transaction to fund the escrow address.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = FundEscrowAddressArgs(
            txn=txn,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_stake_amounts(
        self,
        *,
        min_stake: int,
        max_stake: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `set_stake_amounts(uint64,uint64)void` ABI method
        
        :param int min_stake: The `min_stake` ABI parameter
        :param int max_stake: The `max_stake` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetStakeAmountsArgs(
            min_stake=min_stake,
            max_stake=max_stake,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_annual_rate(
        self,
        *,
        new_annual_rate: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `set_annual_rate(uint64)void` ABI method
        
        :param int new_annual_rate: The `new_annual_rate` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetAnnualRateArgs(
            new_annual_rate=new_annual_rate,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def stake(
        self,
        *,
        asset: int,
        stake_duration: int,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `stake(asset,uint64,axfer)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param int stake_duration: The `stake_duration` ABI parameter
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = StakeArgs(
            asset=asset,
            stake_duration=stake_duration,
            txn=txn,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def un_stake(
        self,
        *,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `un_stake(asset)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UnStakeArgs(
            asset=asset,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_staker(
        self,
        *,
        staker: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `get_staker(address)(address,uint64,uint64,bool,uint64,uint64)` ABI method
        
        :param str staker: The `staker` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetStakerArgs(
            staker=staker,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class VestStakeClient:
    """A class for interacting with the vest_stake app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        VestStakeClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def bootstrap(
        self,
        *,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `bootstrap(asset)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = BootstrapArgs(
            asset=asset,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def fund_escrow_address(
        self,
        *,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Fund escrow address with Algos.
        
        Calls `fund_escrow_address(pay)void` ABI method
        
        :param TransactionWithSigner txn: The payment transaction to fund the escrow address.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = FundEscrowAddressArgs(
            txn=txn,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_stake_amounts(
        self,
        *,
        min_stake: int,
        max_stake: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `set_stake_amounts(uint64,uint64)void` ABI method
        
        :param int min_stake: The `min_stake` ABI parameter
        :param int max_stake: The `max_stake` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetStakeAmountsArgs(
            min_stake=min_stake,
            max_stake=max_stake,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_annual_rate(
        self,
        *,
        new_annual_rate: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `set_annual_rate(uint64)void` ABI method
        
        :param int new_annual_rate: The `new_annual_rate` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetAnnualRateArgs(
            new_annual_rate=new_annual_rate,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def stake(
        self,
        *,
        asset: int,
        stake_duration: int,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `stake(asset,uint64,axfer)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param int stake_duration: The `stake_duration` ABI parameter
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = StakeArgs(
            asset=asset,
            stake_duration=stake_duration,
            txn=txn,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def un_stake(
        self,
        *,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `un_stake(asset)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UnStakeArgs(
            asset=asset,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_staker(
        self,
        *,
        staker: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Staker]:
        """Calls `get_staker(address)(address,uint64,uint64,bool,uint64,uint64)` ABI method
        
        :param str staker: The `staker` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Staker]: The result of the transaction"""

        args = GetStakerArgs(
            staker=staker,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Staker(**result_dict)
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
