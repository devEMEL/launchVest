{
    "hints": {
        "bootstrap(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fund_escrow_address(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_stake_amounts(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_annual_rate(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_asset_decimal(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_asset_id(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stake(asset,uint64,axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unstake(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_staker(address)(address,uint64,uint64,bool,uint64,uint64)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "Staker",
                    "elements": [
                        [
                            "address",
                            "address"
                        ],
                        [
                            "amount",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "is_staking",
                            "bool"
                        ],
                        [
                            "start_timestamp",
                            "uint64"
                        ],
                        [
                            "end_timestamp",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 5
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin_acct": {
                    "type": "bytes",
                    "key": "admin_acct",
                    "descr": ""
                },
                "annual_rate": {
                    "type": "uint64",
                    "key": "annual_rate",
                    "descr": ""
                },
                "asset_id": {
                    "type": "uint64",
                    "key": "asset_id",
                    "descr": ""
                },
                "escrow_address": {
                    "type": "bytes",
                    "key": "escrow_address",
                    "descr": ""
                },
                "max_stake": {
                    "type": "uint64",
                    "key": "max_stake",
                    "descr": ""
                },
                "min_stake": {
                    "type": "uint64",
                    "key": "min_stake",
                    "descr": ""
                },
                "vest_decimals": {
                    "type": "uint64",
                    "key": "vest_decimals",
                    "descr": ""
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "vest_stake",
        "methods": [
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The unique asset ID to be opted into by the escrow address."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Initializes Vest Stake application's global state, sets admin account, escrow address, asset decimal, and\nopts into the provided asset."
            },
            {
                "name": "fund_escrow_address",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "The payment transaction to fund the escrow address."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Fund escrow address with Algos."
            },
            {
                "name": "set_stake_amounts",
                "args": [
                    {
                        "type": "uint64",
                        "name": "min_stake",
                        "desc": "The minimum stake amount."
                    },
                    {
                        "type": "uint64",
                        "name": "max_stake",
                        "desc": "The maximum stake amount."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the minimum and maximum stake amounts for staking."
            },
            {
                "name": "set_annual_rate",
                "args": [
                    {
                        "type": "uint64",
                        "name": "annual_rate",
                        "desc": "The annual rate."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the annual rate."
            },
            {
                "name": "set_asset_decimal",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asset_decimal",
                        "desc": "The asset decimal."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the asset decimal."
            },
            {
                "name": "set_asset_id",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asset_id",
                        "desc": "The unique asset ID."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the asset ID."
            },
            {
                "name": "stake",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The asset to be staked."
                    },
                    {
                        "type": "uint64",
                        "name": "stake_duration",
                        "desc": "The duration of the stake."
                    },
                    {
                        "type": "axfer",
                        "name": "txn",
                        "desc": "The transaction object for the staking operation."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Initiates a stake for the specified asset and duration."
            },
            {
                "name": "unstake",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The asset to be unstaked."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Initiates the unstaking of the specified asset."
            },
            {
                "name": "get_staker",
                "args": [
                    {
                        "type": "address",
                        "name": "staker",
                        "desc": "The stakers address."
                    }
                ],
                "returns": {
                    "type": "(address,uint64,uint64,bool,uint64,uint64)"
                },
                "desc": "Retrieves staker information for the specified staker address and stores it in the output."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}