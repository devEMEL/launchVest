#pragma version 8
intcblock 0 1 10 4 31536000 10000000
bytecblock 0x 0x657363726f775f61646472657373 0x766573745f646563696d616c73 0x616e6e75616c5f72617465 0x6d61785f7374616b65 0x6d696e5f7374616b65 0x61646d696e5f61636374 0x61737365745f6964 0x00
txn NumAppArgs
intc_0 // 0
==
bnz main_l20
txna ApplicationArgs 0
pushbytes 0x34494d87 // "bootstrap(asset)void"
==
bnz main_l19
txna ApplicationArgs 0
pushbytes 0x963a596e // "fund_escrow_address(pay)void"
==
bnz main_l18
txna ApplicationArgs 0
pushbytes 0x2ca6ae02 // "set_stake_amounts(uint64,uint64)void"
==
bnz main_l17
txna ApplicationArgs 0
pushbytes 0x1c094b60 // "set_annual_rate(uint64)void"
==
bnz main_l16
txna ApplicationArgs 0
pushbytes 0x3b46be58 // "set_asset_decimal(uint64)void"
==
bnz main_l15
txna ApplicationArgs 0
pushbytes 0xd130c74a // "set_asset_id(uint64)void"
==
bnz main_l14
txna ApplicationArgs 0
pushbytes 0xae4b9e92 // "stake(asset,uint64,axfer)void"
==
bnz main_l13
txna ApplicationArgs 0
pushbytes 0x57baa5b5 // "un_stake(asset)void"
==
bnz main_l12
txna ApplicationArgs 0
pushbytes 0x2fe2cb4e // "get_staker(address)(address,uint64,uint64,bool,uint64,uint64)"
==
bnz main_l11
err
main_l11:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub getstakercaster_18
intc_1 // 1
return
main_l12:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub unstakecaster_17
intc_1 // 1
return
main_l13:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub stakecaster_16
intc_1 // 1
return
main_l14:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub setassetidcaster_15
intc_1 // 1
return
main_l15:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub setassetdecimalcaster_14
intc_1 // 1
return
main_l16:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub setannualratecaster_13
intc_1 // 1
return
main_l17:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub setstakeamountscaster_12
intc_1 // 1
return
main_l18:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub fundescrowaddresscaster_11
intc_1 // 1
return
main_l19:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub bootstrapcaster_10
intc_1 // 1
return
main_l20:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l22
err
main_l22:
txn ApplicationID
intc_0 // 0
==
assert
intc_1 // 1
return

// calculate_stake_reward
calculatestakereward_0:
proto 2 1
frame_dig -2
frame_dig -2
bytec_3 // "annual_rate"
app_global_get
*
frame_dig -1
*
pushint 100 // 100
intc 4 // 31536000
*
/
+
retsub

// bootstrap
bootstrap_1:
proto 1 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
bytec 6 // "admin_acct"
bytec_0 // ""
app_global_put
bytec_3 // "annual_rate"
intc_2 // 10
app_global_put
bytec 7 // "asset_id"
intc_0 // 0
app_global_put
bytec_1 // "escrow_address"
bytec_0 // ""
app_global_put
bytec 4 // "max_stake"
pushint 20000 // 20000
intc_2 // 10
*
intc 5 // 10000000
*
app_global_put
bytec 5 // "min_stake"
pushint 100 // 100
intc_2 // 10
*
intc 5 // 10000000
*
app_global_put
bytec_2 // "vest_decimals"
intc_0 // 0
app_global_put
bytec 6 // "admin_acct"
global CreatorAddress
app_global_put
bytec_1 // "escrow_address"
global CurrentApplicationAddress
app_global_put
frame_dig -1
txnas Assets
asset_params_get AssetDecimals
store 1
store 0
load 0
intc_0 // 0
!=
// Invalid asset ID.
assert
bytec_2 // "vest_decimals"
load 0
app_global_put
bytec_1 // "escrow_address"
app_global_get
frame_dig -1
txnas Assets
asset_holding_get AssetBalance
store 2
intc_0 // 0
==
bz bootstrap_1_l2
itxn_begin
intc_3 // axfer
itxn_field TypeEnum
frame_dig -1
txnas Assets
itxn_field XferAsset
intc_0 // 0
itxn_field AssetAmount
bytec_1 // "escrow_address"
app_global_get
itxn_field AssetReceiver
itxn_submit
bootstrap_1_l2:
retsub

// fund_escrow_address
fundescrowaddress_2:
proto 1 0
frame_dig -1
gtxns Amount
intc_0 // 0
>
// Invalid transaction amount, receiver or type_enum.
assert
frame_dig -1
gtxns Receiver
global CurrentApplicationAddress
==
// Invalid transaction amount, receiver or type_enum.
assert
frame_dig -1
gtxns TypeEnum
intc_1 // pay
==
// Invalid transaction amount, receiver or type_enum.
assert
retsub

// set_stake_amounts
setstakeamounts_3:
proto 2 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
frame_dig -2
intc_0 // 0
>
// Min. stake must be greater than 0, and Max. stake must be greater than min. stake.
assert
frame_dig -1
frame_dig -2
>
// Min. stake must be greater than 0, and Max. stake must be greater than min. stake.
assert
bytec 5 // "min_stake"
frame_dig -2
intc_2 // 10
*
bytec_2 // "vest_decimals"
app_global_get
*
app_global_put
bytec 4 // "max_stake"
frame_dig -1
intc_2 // 10
*
bytec_2 // "vest_decimals"
app_global_get
*
app_global_put
retsub

// set_annual_rate
setannualrate_4:
proto 1 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
bytec_3 // "annual_rate"
frame_dig -1
app_global_put
retsub

// set_asset_decimal
setassetdecimal_5:
proto 1 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
bytec_2 // "vest_decimals"
frame_dig -1
app_global_put
retsub

// set_asset_id
setassetid_6:
proto 1 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
bytec 7 // "asset_id"
frame_dig -1
app_global_put
retsub

// stake
stake_7:
proto 3 0
bytec_0 // ""
dup
intc_0 // 0
dupn 6
bytec_0 // ""
dup
txn Sender
box_len
store 4
store 3
load 4
!
// Staker already staking.
assert
frame_dig -1
gtxns TypeEnum
intc_3 // axfer
==
// Invalid transaction type_enum, asset_receiver or xfer_asset.
assert
frame_dig -1
gtxns AssetReceiver
bytec_1 // "escrow_address"
app_global_get
==
// Invalid transaction type_enum, asset_receiver or xfer_asset.
assert
frame_dig -1
gtxns XferAsset
frame_dig -3
txnas Assets
==
// Invalid transaction type_enum, asset_receiver or xfer_asset.
assert
frame_dig -1
gtxns AssetAmount
bytec 5 // "min_stake"
app_global_get
>=
frame_dig -1
gtxns AssetAmount
bytec 4 // "max_stake"
app_global_get
<=
&&
// Asset amount must be within the min_stake and max_stake.
assert
frame_dig -2
pushint 300 // 300
==
frame_dig -2
pushint 7776000 // 7776000
==
||
frame_dig -2
pushint 15552000 // 15552000
==
||
frame_dig -2
intc 4 // 31536000
==
||
// Staking duration must be one of quarter, half year, or annual.
assert
txn Sender
frame_bury 1
frame_dig 1
len
pushint 32 // 32
==
assert
frame_dig -1
gtxns AssetAmount
frame_bury 2
frame_dig -3
txnas Assets
frame_bury 3
intc_1 // 1
!
!
frame_bury 4
global LatestTimestamp
frame_dig 5
+
frame_bury 5
frame_dig 5
frame_dig -2
+
frame_bury 6
frame_dig 1
frame_dig 2
itob
concat
frame_dig 3
itob
concat
bytec 8 // 0x00
intc_0 // 0
frame_dig 4
setbit
concat
frame_dig 5
itob
concat
frame_dig 6
itob
concat
frame_bury 0
frame_dig 1
box_del
pop
frame_dig 1
frame_dig 0
box_put
retsub

// un_stake
unstake_8:
proto 1 0
bytec_0 // ""
dup
intc_0 // 0
dupn 8
bytec_0 // ""
dup
txn Sender
box_len
store 6
store 5
load 6
// Invalid staker.
assert
txn Sender
box_get
store 8
store 7
load 8
assert
load 7
frame_bury 0
frame_dig 0
extract 0 32
frame_bury 1
frame_dig 0
pushint 32 // 32
extract_uint64
frame_bury 2
frame_dig 0
pushint 40 // 40
extract_uint64
frame_bury 3
frame_dig 0
pushint 384 // 384
getbit
frame_bury 4
frame_dig 0
pushint 49 // 49
extract_uint64
frame_bury 5
frame_dig 0
pushint 57 // 57
extract_uint64
frame_bury 6
frame_dig 4
intc_1 // 1
==
// Staker must be staking.
assert
global LatestTimestamp
frame_dig 6
>=
// Staking period is yet to be over.
assert
frame_dig -1
txnas Assets
frame_dig 3
==
// Invalid asset ID.
assert
frame_dig 6
frame_dig 5
-
frame_bury 7
frame_dig 2
frame_dig 7
callsub calculatestakereward_0
frame_bury 8
itxn_begin
intc_3 // axfer
itxn_field TypeEnum
frame_dig -1
txnas Assets
itxn_field XferAsset
frame_dig 1
itxn_field AssetReceiver
frame_dig 8
itxn_field AssetAmount
itxn_submit
intc_0 // 0
!
!
frame_bury 4
frame_dig 1
frame_dig 2
itob
concat
frame_dig 3
itob
concat
bytec 8 // 0x00
intc_0 // 0
frame_dig 4
setbit
concat
frame_dig 5
itob
concat
frame_dig 6
itob
concat
frame_bury 0
frame_dig 1
box_del
pop
retsub

// get_staker
getstaker_9:
proto 1 1
bytec_0 // ""
frame_dig -1
box_get
store 10
store 9
load 10
assert
load 9
frame_bury 0
retsub

// bootstrap_caster
bootstrapcaster_10:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 0
frame_dig 0
callsub bootstrap_1
retsub

// fund_escrow_address_caster
fundescrowaddresscaster_11:
proto 0 0
intc_0 // 0
txn GroupIndex
intc_1 // 1
-
frame_bury 0
frame_dig 0
gtxns TypeEnum
intc_1 // pay
==
assert
frame_dig 0
callsub fundescrowaddress_2
retsub

// set_stake_amounts_caster
setstakeamountscaster_12:
proto 0 0
intc_0 // 0
dup
txna ApplicationArgs 1
btoi
frame_bury 0
txna ApplicationArgs 2
btoi
frame_bury 1
frame_dig 0
frame_dig 1
callsub setstakeamounts_3
retsub

// set_annual_rate_caster
setannualratecaster_13:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
btoi
frame_bury 0
frame_dig 0
callsub setannualrate_4
retsub

// set_asset_decimal_caster
setassetdecimalcaster_14:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
btoi
frame_bury 0
frame_dig 0
callsub setassetdecimal_5
retsub

// set_asset_id_caster
setassetidcaster_15:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
btoi
frame_bury 0
frame_dig 0
callsub setassetid_6
retsub

// stake_caster
stakecaster_16:
proto 0 0
intc_0 // 0
dupn 2
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 0
txna ApplicationArgs 2
btoi
frame_bury 1
txn GroupIndex
intc_1 // 1
-
frame_bury 2
frame_dig 2
gtxns TypeEnum
intc_3 // axfer
==
assert
frame_dig 0
frame_dig 1
frame_dig 2
callsub stake_7
retsub

// un_stake_caster
unstakecaster_17:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 0
frame_dig 0
callsub unstake_8
retsub

// get_staker_caster
getstakercaster_18:
proto 0 0
bytec_0 // ""
dup
txna ApplicationArgs 1
frame_bury 1
frame_dig 1
callsub getstaker_9
frame_bury 0
pushbytes 0x151f7c75 // 0x151f7c75
frame_dig 0
concat
log
retsub