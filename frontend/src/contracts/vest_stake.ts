/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "bootstrap(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fund_escrow_address(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_stake_amounts(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_annual_rate(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_asset_decimal(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_asset_id(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stake(asset,uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "un_stake(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_staker(address)(address,uint64,uint64,bool,uint64,uint64)": {
      "read_only": true,
      "structs": {
        "output": {
          "name": "Staker",
          "elements": [
            [
              "address",
              "address"
            ],
            [
              "amount",
              "uint64"
            ],
            [
              "asset_id",
              "uint64"
            ],
            [
              "is_staking",
              "bool"
            ],
            [
              "start_timestamp",
              "uint64"
            ],
            [
              "end_timestamp",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSAxMCA0IDEwMDAwMDAwIDMxNTM2MDAwCmJ5dGVjYmxvY2sgMHggMHg2NTczNjM3MjZmNzc1ZjYxNjQ2NDcyNjU3MzczIDB4NzY2NTczNzQ1ZjY0NjU2MzY5NmQ2MTZjNzMgMHg2ZDYxNzg1ZjczNzQ2MTZiNjUgMHg2ZDY5NmU1ZjczNzQ2MTZiNjUgMHg2MTZlNmU3NTYxNmM1ZjcyNjE3NDY1IDB4NjE2NDZkNjk2ZTVmNjE2MzYzNzQgMHg2MTczNzM2NTc0NWY2OTY0IDB4MDAKdHhuIE51bUFwcEFyZ3MKaW50Y18wIC8vIDAKPT0KYm56IG1haW5fbDIwCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MzQ0OTRkODcgLy8gImJvb3RzdHJhcChhc3NldCl2b2lkIgo9PQpibnogbWFpbl9sMTkKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg5NjNhNTk2ZSAvLyAiZnVuZF9lc2Nyb3dfYWRkcmVzcyhwYXkpdm9pZCIKPT0KYm56IG1haW5fbDE4CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MmNhNmFlMDIgLy8gInNldF9zdGFrZV9hbW91bnRzKHVpbnQ2NCx1aW50NjQpdm9pZCIKPT0KYm56IG1haW5fbDE3CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MWMwOTRiNjAgLy8gInNldF9hbm51YWxfcmF0ZSh1aW50NjQpdm9pZCIKPT0KYm56IG1haW5fbDE2CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4M2I0NmJlNTggLy8gInNldF9hc3NldF9kZWNpbWFsKHVpbnQ2NCl2b2lkIgo9PQpibnogbWFpbl9sMTUKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhkMTMwYzc0YSAvLyAic2V0X2Fzc2V0X2lkKHVpbnQ2NCl2b2lkIgo9PQpibnogbWFpbl9sMTQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhhZTRiOWU5MiAvLyAic3Rha2UoYXNzZXQsdWludDY0LGF4ZmVyKXZvaWQiCj09CmJueiBtYWluX2wxMwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDU3YmFhNWI1IC8vICJ1bl9zdGFrZShhc3NldCl2b2lkIgo9PQpibnogbWFpbl9sMTIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgyZmUyY2I0ZSAvLyAiZ2V0X3N0YWtlcihhZGRyZXNzKShhZGRyZXNzLHVpbnQ2NCx1aW50NjQsYm9vbCx1aW50NjQsdWludDY0KSIKPT0KYm56IG1haW5fbDExCmVycgptYWluX2wxMToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBnZXRzdGFrZXJjYXN0ZXJfMTcKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDEyOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHVuc3Rha2VjYXN0ZXJfMTYKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDEzOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHN0YWtlY2FzdGVyXzE1CmludGNfMSAvLyAxCnJldHVybgptYWluX2wxNDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBzZXRhc3NldGlkY2FzdGVyXzE0CmludGNfMSAvLyAxCnJldHVybgptYWluX2wxNToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBzZXRhc3NldGRlY2ltYWxjYXN0ZXJfMTMKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHNldGFubnVhbHJhdGVjYXN0ZXJfMTIKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE3Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHNldHN0YWtlYW1vdW50c2Nhc3Rlcl8xMQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTg6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgZnVuZGVzY3Jvd2FkZHJlc3NjYXN0ZXJfMTAKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE5Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGJvb3RzdHJhcGNhc3Rlcl85CmludGNfMSAvLyAxCnJldHVybgptYWluX2wyMDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQpibnogbWFpbl9sMjIKZXJyCm1haW5fbDIyOgp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBib290c3RyYXAKYm9vdHN0cmFwXzA6CnByb3RvIDEgMApieXRlYyA2IC8vICJhZG1pbl9hY2N0IgpieXRlY18wIC8vICIiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDUgLy8gImFubnVhbF9yYXRlIgppbnRjXzIgLy8gMTAKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNyAvLyAiYXNzZXRfaWQiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzEgLy8gImVzY3Jvd19hZGRyZXNzIgpieXRlY18wIC8vICIiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzMgLy8gIm1heF9zdGFrZSIKcHVzaGludCAyMDAwMCAvLyAyMDAwMAppbnRjXzIgLy8gMTAKKgppbnRjIDQgLy8gMTAwMDAwMDAKKgphcHBfZ2xvYmFsX3B1dApieXRlYyA0IC8vICJtaW5fc3Rha2UiCnB1c2hpbnQgMTAwIC8vIDEwMAppbnRjXzIgLy8gMTAKKgppbnRjIDQgLy8gMTAwMDAwMDAKKgphcHBfZ2xvYmFsX3B1dApieXRlY18yIC8vICJ2ZXN0X2RlY2ltYWxzIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApieXRlYyA2IC8vICJhZG1pbl9hY2N0IgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMSAvLyAiZXNjcm93X2FkZHJlc3MiCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmFwcF9nbG9iYWxfcHV0CmZyYW1lX2RpZyAtMQp0eG5hcyBBc3NldHMKYXNzZXRfcGFyYW1zX2dldCBBc3NldERlY2ltYWxzCnN0b3JlIDEKc3RvcmUgMApsb2FkIDAKaW50Y18wIC8vIDAKIT0KYXNzZXJ0CmJ5dGVjXzIgLy8gInZlc3RfZGVjaW1hbHMiCmxvYWQgMAphcHBfZ2xvYmFsX3B1dApieXRlY18xIC8vICJlc2Nyb3dfYWRkcmVzcyIKYXBwX2dsb2JhbF9nZXQKZnJhbWVfZGlnIC0xCnR4bmFzIEFzc2V0cwphc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKc3RvcmUgMgppbnRjXzAgLy8gMAo9PQpieiBib290c3RyYXBfMF9sMgppdHhuX2JlZ2luCmludGNfMyAvLyBheGZlcgppdHhuX2ZpZWxkIFR5cGVFbnVtCmZyYW1lX2RpZyAtMQp0eG5hcyBBc3NldHMKaXR4bl9maWVsZCBYZmVyQXNzZXQKaW50Y18wIC8vIDAKaXR4bl9maWVsZCBBc3NldEFtb3VudApieXRlY18xIC8vICJlc2Nyb3dfYWRkcmVzcyIKYXBwX2dsb2JhbF9nZXQKaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCml0eG5fc3VibWl0CmJvb3RzdHJhcF8wX2wyOgpyZXRzdWIKCi8vIGZ1bmRfZXNjcm93X2FkZHJlc3MKZnVuZGVzY3Jvd2FkZHJlc3NfMToKcHJvdG8gMSAwCmZyYW1lX2RpZyAtMQpndHhucyBBbW91bnQKaW50Y18wIC8vIDAKPgphc3NlcnQKZnJhbWVfZGlnIC0xCmd0eG5zIFJlY2VpdmVyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCj09CmFzc2VydApmcmFtZV9kaWcgLTEKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKcmV0c3ViCgovLyBzZXRfc3Rha2VfYW1vdW50cwpzZXRzdGFrZWFtb3VudHNfMjoKcHJvdG8gMiAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKZnJhbWVfZGlnIC0yCmludGNfMCAvLyAwCj4KYXNzZXJ0CmZyYW1lX2RpZyAtMQppbnRjXzAgLy8gMAo+CmFzc2VydApmcmFtZV9kaWcgLTEKZnJhbWVfZGlnIC0yCj4KYXNzZXJ0CmJ5dGVjIDQgLy8gIm1pbl9zdGFrZSIKZnJhbWVfZGlnIC0yCmludGNfMiAvLyAxMAoqCmJ5dGVjXzIgLy8gInZlc3RfZGVjaW1hbHMiCmFwcF9nbG9iYWxfZ2V0CioKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMyAvLyAibWF4X3N0YWtlIgpmcmFtZV9kaWcgLTEKaW50Y18yIC8vIDEwCioKYnl0ZWNfMiAvLyAidmVzdF9kZWNpbWFscyIKYXBwX2dsb2JhbF9nZXQKKgphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHNldF9hbm51YWxfcmF0ZQpzZXRhbm51YWxyYXRlXzM6CnByb3RvIDEgMAp0eG4gU2VuZGVyCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmJ5dGVjIDUgLy8gImFubnVhbF9yYXRlIgpmcmFtZV9kaWcgLTEKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBzZXRfYXNzZXRfZGVjaW1hbApzZXRhc3NldGRlY2ltYWxfNDoKcHJvdG8gMSAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKYnl0ZWNfMiAvLyAidmVzdF9kZWNpbWFscyIKZnJhbWVfZGlnIC0xCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gc2V0X2Fzc2V0X2lkCnNldGFzc2V0aWRfNToKcHJvdG8gMSAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKYnl0ZWMgNyAvLyAiYXNzZXRfaWQiCmZyYW1lX2RpZyAtMQphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHN0YWtlCnN0YWtlXzY6CnByb3RvIDMgMApieXRlY18wIC8vICIiCmR1cAppbnRjXzAgLy8gMApkdXBuIDYKYnl0ZWNfMCAvLyAiIgpkdXAKdHhuIFNlbmRlcgpib3hfbGVuCnN0b3JlIDQKc3RvcmUgMwpsb2FkIDQKIQovLyBTdGFrZXIgYWxyZWFkeSBzdGFraW5nCmFzc2VydApmcmFtZV9kaWcgLTEKZ3R4bnMgVHlwZUVudW0KaW50Y18zIC8vIGF4ZmVyCj09CmFzc2VydApmcmFtZV9kaWcgLTEKZ3R4bnMgQXNzZXRSZWNlaXZlcgpieXRlY18xIC8vICJlc2Nyb3dfYWRkcmVzcyIKYXBwX2dsb2JhbF9nZXQKPT0KYXNzZXJ0CmZyYW1lX2RpZyAtMQpndHhucyBYZmVyQXNzZXQKZnJhbWVfZGlnIC0zCnR4bmFzIEFzc2V0cwo9PQphc3NlcnQKZnJhbWVfZGlnIC0xCmd0eG5zIEFzc2V0QW1vdW50CmJ5dGVjIDQgLy8gIm1pbl9zdGFrZSIKYXBwX2dsb2JhbF9nZXQKPj0KZnJhbWVfZGlnIC0xCmd0eG5zIEFzc2V0QW1vdW50CmJ5dGVjXzMgLy8gIm1heF9zdGFrZSIKYXBwX2dsb2JhbF9nZXQKPD0KJiYKYXNzZXJ0CmZyYW1lX2RpZyAtMQpndHhucyBBc3NldEFtb3VudApieXRlYyA0IC8vICJtaW5fc3Rha2UiCmFwcF9nbG9iYWxfZ2V0Cj4KZnJhbWVfZGlnIC0xCmd0eG5zIEFzc2V0QW1vdW50CmJ5dGVjXzMgLy8gIm1heF9zdGFrZSIKYXBwX2dsb2JhbF9nZXQKPD0KfHwKYXNzZXJ0CmZyYW1lX2RpZyAtMgpwdXNoaW50IDMwMCAvLyAzMDAKPT0KZnJhbWVfZGlnIC0yCnB1c2hpbnQgNzg4NDAwMCAvLyA3ODg0MDAwCj09Cnx8CmZyYW1lX2RpZyAtMgpwdXNoaW50IDE1NzY4MDAwIC8vIDE1NzY4MDAwCj09Cnx8CmZyYW1lX2RpZyAtMgppbnRjIDUgLy8gMzE1MzYwMDAKPT0KfHwKYXNzZXJ0CnR4biBTZW5kZXIKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmxlbgpwdXNoaW50IDMyIC8vIDMyCj09CmFzc2VydApmcmFtZV9kaWcgLTEKZ3R4bnMgQXNzZXRBbW91bnQKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAtMwp0eG5hcyBBc3NldHMKZnJhbWVfYnVyeSAzCmludGNfMSAvLyAxCiEKIQpmcmFtZV9idXJ5IDQKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcApmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDUKZnJhbWVfZGlnIC0yCisKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCml0b2IKY29uY2F0CmZyYW1lX2RpZyAzCml0b2IKY29uY2F0CmJ5dGVjIDggLy8gMHgwMAppbnRjXzAgLy8gMApmcmFtZV9kaWcgNApzZXRiaXQKY29uY2F0CmZyYW1lX2RpZyA1Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA2Cml0b2IKY29uY2F0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMQpib3hfZGVsCnBvcApmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMApib3hfcHV0CnJldHN1YgoKLy8gdW5fc3Rha2UKdW5zdGFrZV83Ogpwcm90byAxIDAKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKZHVwbiA4CmJ5dGVjXzAgLy8gIiIKZHVwCnR4biBTZW5kZXIKYm94X2xlbgpzdG9yZSA2CnN0b3JlIDUKbG9hZCA2CmFzc2VydAp0eG4gU2VuZGVyCmJveF9nZXQKc3RvcmUgOApzdG9yZSA3CmxvYWQgOAphc3NlcnQKbG9hZCA3CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApleHRyYWN0IDAgMzIKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAwCnB1c2hpbnQgMzIgLy8gMzIKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAwCnB1c2hpbnQgNDAgLy8gNDAKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAzCmZyYW1lX2RpZyAwCnB1c2hpbnQgMzg0IC8vIDM4NApnZXRiaXQKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyAwCnB1c2hpbnQgNDkgLy8gNDkKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyAwCnB1c2hpbnQgNTcgLy8gNTcKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyA0CmludGNfMSAvLyAxCj09CmFzc2VydApnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCmZyYW1lX2RpZyA2Cj49CmFzc2VydApmcmFtZV9kaWcgLTEKdHhuYXMgQXNzZXRzCmZyYW1lX2RpZyAzCj09Ci8vIGhlcmUKYXNzZXJ0CmZyYW1lX2RpZyA2CmZyYW1lX2RpZyA1Ci0KZnJhbWVfYnVyeSA3CmludGNfMCAvLyAwCmZyYW1lX2J1cnkgOApmcmFtZV9kaWcgMgpmcmFtZV9kaWcgMgpieXRlYyA1IC8vICJhbm51YWxfcmF0ZSIKYXBwX2dsb2JhbF9nZXQKKgpmcmFtZV9kaWcgNwoqCnB1c2hpbnQgMTAwIC8vIDEwMAppbnRjIDUgLy8gMzE1MzYwMDAKKgovCisKZnJhbWVfYnVyeSA4Cml0eG5fYmVnaW4KaW50Y18zIC8vIGF4ZmVyCml0eG5fZmllbGQgVHlwZUVudW0KZnJhbWVfZGlnIC0xCnR4bmFzIEFzc2V0cwppdHhuX2ZpZWxkIFhmZXJBc3NldApmcmFtZV9kaWcgMQppdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKZnJhbWVfZGlnIDgKaXR4bl9maWVsZCBBc3NldEFtb3VudAppdHhuX3N1Ym1pdAppbnRjXzAgLy8gMAohCiEKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCml0b2IKY29uY2F0CmZyYW1lX2RpZyAzCml0b2IKY29uY2F0CmJ5dGVjIDggLy8gMHgwMAppbnRjXzAgLy8gMApmcmFtZV9kaWcgNApzZXRiaXQKY29uY2F0CmZyYW1lX2RpZyA1Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA2Cml0b2IKY29uY2F0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMQpib3hfZGVsCnBvcApyZXRzdWIKCi8vIGdldF9zdGFrZXIKZ2V0c3Rha2VyXzg6CnByb3RvIDEgMQpieXRlY18wIC8vICIiCmZyYW1lX2RpZyAtMQpib3hfZ2V0CnN0b3JlIDEwCnN0b3JlIDkKbG9hZCAxMAphc3NlcnQKbG9hZCA5CmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGJvb3RzdHJhcF9jYXN0ZXIKYm9vdHN0cmFwY2FzdGVyXzk6CnByb3RvIDAgMAppbnRjXzAgLy8gMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmludGNfMCAvLyAwCmdldGJ5dGUKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgYm9vdHN0cmFwXzAKcmV0c3ViCgovLyBmdW5kX2VzY3Jvd19hZGRyZXNzX2Nhc3RlcgpmdW5kZXNjcm93YWRkcmVzc2Nhc3Rlcl8xMDoKcHJvdG8gMCAwCmludGNfMCAvLyAwCnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAwCmNhbGxzdWIgZnVuZGVzY3Jvd2FkZHJlc3NfMQpyZXRzdWIKCi8vIHNldF9zdGFrZV9hbW91bnRzX2Nhc3RlcgpzZXRzdGFrZWFtb3VudHNjYXN0ZXJfMTE6CnByb3RvIDAgMAppbnRjXzAgLy8gMApkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpidG9pCmZyYW1lX2J1cnkgMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmJ0b2kKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAxCmNhbGxzdWIgc2V0c3Rha2VhbW91bnRzXzIKcmV0c3ViCgovLyBzZXRfYW5udWFsX3JhdGVfY2FzdGVyCnNldGFubnVhbHJhdGVjYXN0ZXJfMTI6CnByb3RvIDAgMAppbnRjXzAgLy8gMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgc2V0YW5udWFscmF0ZV8zCnJldHN1YgoKLy8gc2V0X2Fzc2V0X2RlY2ltYWxfY2FzdGVyCnNldGFzc2V0ZGVjaW1hbGNhc3Rlcl8xMzoKcHJvdG8gMCAwCmludGNfMCAvLyAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKYnRvaQpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKY2FsbHN1YiBzZXRhc3NldGRlY2ltYWxfNApyZXRzdWIKCi8vIHNldF9hc3NldF9pZF9jYXN0ZXIKc2V0YXNzZXRpZGNhc3Rlcl8xNDoKcHJvdG8gMCAwCmludGNfMCAvLyAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKYnRvaQpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKY2FsbHN1YiBzZXRhc3NldGlkXzUKcmV0c3ViCgovLyBzdGFrZV9jYXN0ZXIKc3Rha2VjYXN0ZXJfMTU6CnByb3RvIDAgMAppbnRjXzAgLy8gMApkdXBuIDIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApnZXRieXRlCmZyYW1lX2J1cnkgMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmJ0b2kKZnJhbWVfYnVyeSAxCnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAyCmd0eG5zIFR5cGVFbnVtCmludGNfMyAvLyBheGZlcgo9PQphc3NlcnQKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKY2FsbHN1YiBzdGFrZV82CnJldHN1YgoKLy8gdW5fc3Rha2VfY2FzdGVyCnVuc3Rha2VjYXN0ZXJfMTY6CnByb3RvIDAgMAppbnRjXzAgLy8gMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmludGNfMCAvLyAwCmdldGJ5dGUKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgdW5zdGFrZV83CnJldHN1YgoKLy8gZ2V0X3N0YWtlcl9jYXN0ZXIKZ2V0c3Rha2VyY2FzdGVyXzE3Ogpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgpkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKY2FsbHN1YiBnZXRzdGFrZXJfOApmcmFtZV9idXJ5IDAKcHVzaGJ5dGVzIDB4MTUxZjdjNzUgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1Yg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "admin_acct": {
          "type": "bytes",
          "key": "admin_acct",
          "descr": ""
        },
        "annual_rate": {
          "type": "uint64",
          "key": "annual_rate",
          "descr": ""
        },
        "asset_id": {
          "type": "uint64",
          "key": "asset_id",
          "descr": ""
        },
        "escrow_address": {
          "type": "bytes",
          "key": "escrow_address",
          "descr": ""
        },
        "max_stake": {
          "type": "uint64",
          "key": "max_stake",
          "descr": ""
        },
        "min_stake": {
          "type": "uint64",
          "key": "min_stake",
          "descr": ""
        },
        "vest_decimals": {
          "type": "uint64",
          "key": "vest_decimals",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "vest_stake",
    "methods": [
      {
        "name": "bootstrap",
        "args": [
          {
            "type": "asset",
            "name": "asset",
            "desc": "The unique asset ID to be opted into by the escrow address."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Initializes Vest Stake application's global state, sets admin account, escrow address, asset decimal, and\nopts into the provided asset."
      },
      {
        "name": "fund_escrow_address",
        "args": [
          {
            "type": "pay",
            "name": "txn",
            "desc": "The payment transaction to fund the escrow address."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Fund escrow address with Algos."
      },
      {
        "name": "set_stake_amounts",
        "args": [
          {
            "type": "uint64",
            "name": "min_stake",
            "desc": "The minimum stake amount."
          },
          {
            "type": "uint64",
            "name": "max_stake",
            "desc": "The maximum stake amount."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Sets the minimum and maximum stake amounts for staking."
      },
      {
        "name": "set_annual_rate",
        "args": [
          {
            "type": "uint64",
            "name": "annual_rate",
            "desc": "The annual rate."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Sets the annual rate."
      },
      {
        "name": "set_asset_decimal",
        "args": [
          {
            "type": "uint64",
            "name": "asset_decimal",
            "desc": "The asset decimal."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Sets the asset decimal."
      },
      {
        "name": "set_asset_id",
        "args": [
          {
            "type": "uint64",
            "name": "asset_id",
            "desc": "The unique asset ID."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Sets the asset ID."
      },
      {
        "name": "stake",
        "args": [
          {
            "type": "asset",
            "name": "asset",
            "desc": "The asset to be staked."
          },
          {
            "type": "uint64",
            "name": "stake_duration",
            "desc": "The duration of the stake."
          },
          {
            "type": "axfer",
            "name": "txn",
            "desc": "The transaction object for the staking operation."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Initiates a stake for the specified asset and duration."
      },
      {
        "name": "un_stake",
        "args": [
          {
            "type": "asset",
            "name": "asset",
            "desc": "The asset to be unstaked."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Initiates the unstaking of the specified asset."
      },
      {
        "name": "get_staker",
        "args": [
          {
            "type": "address",
            "name": "staker"
          }
        ],
        "returns": {
          "type": "(address,uint64,uint64,bool,uint64,uint64)"
        },
        "desc": "Retrieves staker information for the specified staker address and stores it in the output."
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the VestStake smart contract.
 */
export type VestStake = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap(asset)void' | 'bootstrap', {
      argsObj: {
        /**
         * The unique asset ID to be opted into by the escrow address.
         */
        asset: number | bigint
      }
      argsTuple: [asset: number | bigint]
      returns: void
    }>
    & Record<'fund_escrow_address(pay)void' | 'fund_escrow_address', {
      argsObj: {
        /**
         * The payment transaction to fund the escrow address.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'set_stake_amounts(uint64,uint64)void' | 'set_stake_amounts', {
      argsObj: {
        /**
         * The minimum stake amount.
         */
        min_stake: bigint | number
        /**
         * The maximum stake amount.
         */
        max_stake: bigint | number
      }
      argsTuple: [min_stake: bigint | number, max_stake: bigint | number]
      returns: void
    }>
    & Record<'set_annual_rate(uint64)void' | 'set_annual_rate', {
      argsObj: {
        /**
         * The annual rate.
         */
        annual_rate: bigint | number
      }
      argsTuple: [annual_rate: bigint | number]
      returns: void
    }>
    & Record<'set_asset_decimal(uint64)void' | 'set_asset_decimal', {
      argsObj: {
        /**
         * The asset decimal.
         */
        asset_decimal: bigint | number
      }
      argsTuple: [asset_decimal: bigint | number]
      returns: void
    }>
    & Record<'set_asset_id(uint64)void' | 'set_asset_id', {
      argsObj: {
        /**
         * The unique asset ID.
         */
        asset_id: bigint | number
      }
      argsTuple: [asset_id: bigint | number]
      returns: void
    }>
    & Record<'stake(asset,uint64,axfer)void' | 'stake', {
      argsObj: {
        /**
         * The asset to be staked.
         */
        asset: number | bigint
        /**
         * The duration of the stake.
         */
        stake_duration: bigint | number
        /**
         * The transaction object for the staking operation.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [asset: number | bigint, stake_duration: bigint | number, txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'un_stake(asset)void' | 'un_stake', {
      argsObj: {
        /**
         * The asset to be unstaked.
         */
        asset: number | bigint
      }
      argsTuple: [asset: number | bigint]
      returns: void
    }>
    & Record<'get_staker(address)(address,uint64,uint64,bool,uint64,uint64)' | 'get_staker', {
      argsObj: {
        staker: string
      }
      argsTuple: [staker: string]
      returns: Staker
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'admin_acct'?: BinaryState
      'annual_rate'?: IntegerState
      'asset_id'?: IntegerState
      'escrow_address'?: BinaryState
      'max_stake'?: IntegerState
      'min_stake'?: IntegerState
      'vest_decimals'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type VestStakeSig = keyof VestStake['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends VestStakeSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a Staker result as a struct
 */
export type Staker = {
  address: string
  amount: bigint
  asset_id: bigint
  is_staking: boolean
  start_timestamp: bigint
  end_timestamp: bigint
}
/**
 * Converts the tuple representation of a Staker to the struct representation
 */
export function Staker([address, amount, asset_id, is_staking, start_timestamp, end_timestamp]: [string, bigint, bigint, boolean, bigint, bigint] ) {
  return {
    address,
    amount,
    asset_id,
    is_staking,
    start_timestamp,
    end_timestamp,
  }
}
/**
 * Maps a method signature from the VestStake smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends VestStakeSig> = VestStake['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the VestStake smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VestStakeSig> = VestStake['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type VestStakeCreateCalls = (typeof VestStakeCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type VestStakeCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type VestStakeDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: VestStakeCreateCalls) => VestStakeCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class VestStakeCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the vest_stake smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(asset)void ABI method
   *
   * Initializes Vest Stake application's global state, sets admin account, escrow address, asset decimal, and
opts into the provided asset.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fund_escrow_address(pay)void ABI method
   *
   * Fund escrow address with Algos.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fund_escrow_address(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_stake_amounts(uint64,uint64)void ABI method
   *
   * Sets the minimum and maximum stake amounts for staking.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setStakeAmounts(args: MethodArgs<'set_stake_amounts(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_stake_amounts(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.min_stake, args.max_stake],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_annual_rate(uint64)void ABI method
   *
   * Sets the annual rate.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAnnualRate(args: MethodArgs<'set_annual_rate(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_annual_rate(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.annual_rate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_asset_decimal(uint64)void ABI method
   *
   * Sets the asset decimal.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAssetDecimal(args: MethodArgs<'set_asset_decimal(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_asset_decimal(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset_decimal],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_asset_id(uint64)void ABI method
   *
   * Sets the asset ID.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAssetId(args: MethodArgs<'set_asset_id(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_asset_id(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the stake(asset,uint64,axfer)void ABI method
   *
   * Initiates a stake for the specified asset and duration.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static stake(args: MethodArgs<'stake(asset,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'stake(asset,uint64,axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset, args.stake_duration, args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the un_stake(asset)void ABI method
   *
   * Initiates the unstaking of the specified asset.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unStake(args: MethodArgs<'un_stake(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'un_stake(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_staker(address)(address,uint64,uint64,bool,uint64,uint64) ABI method
   *
   * Retrieves staker information for the specified staker address and stores it in the output.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getStaker(args: MethodArgs<'get_staker(address)(address,uint64,uint64,bool,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_staker(address)(address,uint64,uint64,bool,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.staker],
      ...params,
    }
  }
}

/**
 * A client to make calls to the vest_stake smart contract
 */
export class VestStakeClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `VestStakeClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof VestStake['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the vest_stake smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: VestStakeDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(VestStakeCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the vest_stake smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the vest_stake smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap(asset)void ABI method.
   *
   * Initializes Vest Stake application's global state, sets admin account, escrow address, asset decimal, and
opts into the provided asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VestStakeCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the fund_escrow_address(pay)void ABI method.
   *
   * Fund escrow address with Algos.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VestStakeCallFactory.fundEscrowAddress(args, params))
  }

  /**
   * Calls the set_stake_amounts(uint64,uint64)void ABI method.
   *
   * Sets the minimum and maximum stake amounts for staking.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setStakeAmounts(args: MethodArgs<'set_stake_amounts(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VestStakeCallFactory.setStakeAmounts(args, params))
  }

  /**
   * Calls the set_annual_rate(uint64)void ABI method.
   *
   * Sets the annual rate.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAnnualRate(args: MethodArgs<'set_annual_rate(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VestStakeCallFactory.setAnnualRate(args, params))
  }

  /**
   * Calls the set_asset_decimal(uint64)void ABI method.
   *
   * Sets the asset decimal.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAssetDecimal(args: MethodArgs<'set_asset_decimal(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VestStakeCallFactory.setAssetDecimal(args, params))
  }

  /**
   * Calls the set_asset_id(uint64)void ABI method.
   *
   * Sets the asset ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAssetId(args: MethodArgs<'set_asset_id(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VestStakeCallFactory.setAssetId(args, params))
  }

  /**
   * Calls the stake(asset,uint64,axfer)void ABI method.
   *
   * Initiates a stake for the specified asset and duration.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public stake(args: MethodArgs<'stake(asset,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VestStakeCallFactory.stake(args, params))
  }

  /**
   * Calls the un_stake(asset)void ABI method.
   *
   * Initiates the unstaking of the specified asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unStake(args: MethodArgs<'un_stake(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VestStakeCallFactory.unStake(args, params))
  }

  /**
   * Calls the get_staker(address)(address,uint64,uint64,bool,uint64,uint64) ABI method.
   *
   * Retrieves staker information for the specified staker address and stores it in the output.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getStaker(args: MethodArgs<'get_staker(address)(address,uint64,uint64,bool,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VestStakeCallFactory.getStaker(args, params), Staker)
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<VestStake['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get admin_acct() {
        return VestStakeClient.getBinaryState(state, 'admin_acct')
      },
      get annual_rate() {
        return VestStakeClient.getIntegerState(state, 'annual_rate')
      },
      get asset_id() {
        return VestStakeClient.getIntegerState(state, 'asset_id')
      },
      get escrow_address() {
        return VestStakeClient.getBinaryState(state, 'escrow_address')
      },
      get max_stake() {
        return VestStakeClient.getIntegerState(state, 'max_stake')
      },
      get min_stake() {
        return VestStakeClient.getIntegerState(state, 'min_stake')
      },
      get vest_decimals() {
        return VestStakeClient.getIntegerState(state, 'vest_decimals')
      },
    }
  }

  public compose(): VestStakeComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fundEscrowAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setStakeAmounts(args: MethodArgs<'set_stake_amounts(uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setStakeAmounts(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setAnnualRate(args: MethodArgs<'set_annual_rate(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAnnualRate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setAssetDecimal(args: MethodArgs<'set_asset_decimal(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAssetDecimal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setAssetId(args: MethodArgs<'set_asset_id(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAssetId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      stake(args: MethodArgs<'stake(asset,uint64,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.stake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unStake(args: MethodArgs<'un_stake(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getStaker(args: MethodArgs<'get_staker(address)(address,uint64,uint64,bool,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getStaker(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Staker)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as VestStakeComposer
  }
}
export type VestStakeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(asset)void ABI method.
   *
   * Initializes Vest Stake application's global state, sets admin account, escrow address, asset decimal, and
opts into the provided asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VestStakeComposer<[...TReturns, MethodReturn<'bootstrap(asset)void'>]>

  /**
   * Calls the fund_escrow_address(pay)void ABI method.
   *
   * Fund escrow address with Algos.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VestStakeComposer<[...TReturns, MethodReturn<'fund_escrow_address(pay)void'>]>

  /**
   * Calls the set_stake_amounts(uint64,uint64)void ABI method.
   *
   * Sets the minimum and maximum stake amounts for staking.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setStakeAmounts(args: MethodArgs<'set_stake_amounts(uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VestStakeComposer<[...TReturns, MethodReturn<'set_stake_amounts(uint64,uint64)void'>]>

  /**
   * Calls the set_annual_rate(uint64)void ABI method.
   *
   * Sets the annual rate.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAnnualRate(args: MethodArgs<'set_annual_rate(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VestStakeComposer<[...TReturns, MethodReturn<'set_annual_rate(uint64)void'>]>

  /**
   * Calls the set_asset_decimal(uint64)void ABI method.
   *
   * Sets the asset decimal.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAssetDecimal(args: MethodArgs<'set_asset_decimal(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VestStakeComposer<[...TReturns, MethodReturn<'set_asset_decimal(uint64)void'>]>

  /**
   * Calls the set_asset_id(uint64)void ABI method.
   *
   * Sets the asset ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAssetId(args: MethodArgs<'set_asset_id(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VestStakeComposer<[...TReturns, MethodReturn<'set_asset_id(uint64)void'>]>

  /**
   * Calls the stake(asset,uint64,axfer)void ABI method.
   *
   * Initiates a stake for the specified asset and duration.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(args: MethodArgs<'stake(asset,uint64,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VestStakeComposer<[...TReturns, MethodReturn<'stake(asset,uint64,axfer)void'>]>

  /**
   * Calls the un_stake(asset)void ABI method.
   *
   * Initiates the unstaking of the specified asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unStake(args: MethodArgs<'un_stake(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VestStakeComposer<[...TReturns, MethodReturn<'un_stake(asset)void'>]>

  /**
   * Calls the get_staker(address)(address,uint64,uint64,bool,uint64,uint64) ABI method.
   *
   * Retrieves staker information for the specified staker address and stores it in the output.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStaker(args: MethodArgs<'get_staker(address)(address,uint64,uint64,bool,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VestStakeComposer<[...TReturns, MethodReturn<'get_staker(address)(address,uint64,uint64,bool,uint64,uint64)'>]>

  /**
   * Makes a clear_state call to an existing instance of the vest_stake smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): VestStakeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): VestStakeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<VestStakeComposerResults<TReturns>>
}
export type VestStakeComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
