/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "bootstrap(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fund_escrow_address(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit_ido_assets(axfer,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "invest(bool,asset,txn,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim_ido_asset(asset,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reclaim_investment(asset,bool,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw_amount_raised(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pause_project(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unpause_project(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "change_launchpad_admin(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)": {
      "read_only": true,
      "structs": {
        "output": {
          "name": "Investor",
          "elements": [
            [
              "address",
              "address"
            ],
            [
              "project_id",
              "uint64"
            ],
            [
              "investment_amount",
              "uint64"
            ],
            [
              "asset_allocation",
              "uint64"
            ],
            [
              "asset_claim_timestamp",
              "uint64"
            ],
            [
              "claimed_ido_asset",
              "bool"
            ],
            [
              "reclaimed_investment",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)": {
      "read_only": true,
      "structs": {
        "output": {
          "name": "Project",
          "elements": [
            [
              "owner_address",
              "address"
            ],
            [
              "start_timestamp",
              "uint64"
            ],
            [
              "end_timestamp",
              "uint64"
            ],
            [
              "claim_timestamp",
              "uint64"
            ],
            [
              "asset_id",
              "uint64"
            ],
            [
              "image_url",
              "string"
            ],
            [
              "price_per_asset",
              "uint64"
            ],
            [
              "min_investment_per_investor",
              "uint64"
            ],
            [
              "max_investment_per_investor",
              "uint64"
            ],
            [
              "max_cap",
              "uint64"
            ],
            [
              "total_assets_for_sale",
              "uint64"
            ],
            [
              "is_paused",
              "bool"
            ],
            [
              "initiated_withdrawal",
              "bool"
            ],
            [
              "total_assets_sold",
              "uint64"
            ],
            [
              "total_amount_raised",
              "uint64"
            ],
            [
              "amount_withdrawn",
              "uint64"
            ],
            [
              "vesting_schedule",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSAzMiA0OCAxMzkgODQ4IDg0OSAxMzEgMTA0NTg5NDEgNTEyIDUxMwpieXRlY2Jsb2NrIDB4IDB4NjU3MzYzNzI2Zjc3NWY2MTY0NjQ3MjY1NzM3MyAweDAwIDB4NjE2NDZkNjk2ZTVmNjE2MzYzNzQgMHgxNTFmN2M3NQp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sMjgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgzNDQ5NGQ4NyAvLyAiYm9vdHN0cmFwKGFzc2V0KXZvaWQiCj09CmJueiBtYWluX2wyNwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDk2M2E1OTZlIC8vICJmdW5kX2VzY3Jvd19hZGRyZXNzKHBheSl2b2lkIgo9PQpibnogbWFpbl9sMjYKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhkMjZmMTcwZiAvLyAibGlzdF9wcm9qZWN0KGFzc2V0LHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIKPT0KYm56IG1haW5fbDI1CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MzM3NTVlZjAgLy8gImRlcG9zaXRfaWRvX2Fzc2V0cyhheGZlcixhc3NldCl2b2lkIgo9PQpibnogbWFpbl9sMjQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhiYjdhZTNhNCAvLyAiaW52ZXN0KGJvb2wsYXNzZXQsdHhuLGFzc2V0KXZvaWQiCj09CmJueiBtYWluX2wyMwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDJkMzg4ZjI2IC8vICJjbGFpbV9pZG9fYXNzZXQoYXNzZXQsYm9vbCl2b2lkIgo9PQpibnogbWFpbl9sMjIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhmZDc5NjA0NSAvLyAicmVjbGFpbV9pbnZlc3RtZW50KGFzc2V0LGJvb2wsYXNzZXQpdm9pZCIKPT0KYm56IG1haW5fbDIxCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MzhhNDFjNmUgLy8gIndpdGhkcmF3X2Ftb3VudF9yYWlzZWQodWludDY0KXZvaWQiCj09CmJueiBtYWluX2wyMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDkwZmFkNTY2IC8vICJwYXVzZV9wcm9qZWN0KHVpbnQ2NCl2b2lkIgo9PQpibnogbWFpbl9sMTkKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg1ZWIyOTY3MiAvLyAidW5wYXVzZV9wcm9qZWN0KHVpbnQ2NCl2b2lkIgo9PQpibnogbWFpbl9sMTgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgxMWZlZjY5ZSAvLyAiY2hhbmdlX2xhdW5jaHBhZF9hZG1pbihhZGRyZXNzKXZvaWQiCj09CmJueiBtYWluX2wxNwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDUzMTMzNzRkIC8vICJnZXRfaW52ZXN0b3IoYWRkcmVzcykoYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsYm9vbCxib29sKSIKPT0KYm56IG1haW5fbDE2CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4ZjMxNThmZjQgLy8gImdldF9wcm9qZWN0KHVpbnQ2NCkoYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsYm9vbCxib29sLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkiCj09CmJueiBtYWluX2wxNQplcnIKbWFpbl9sMTU6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgZ2V0cHJvamVjdGNhc3Rlcl8zMQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTY6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgZ2V0aW52ZXN0b3JjYXN0ZXJfMzAKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE3Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGNoYW5nZWxhdW5jaHBhZGFkbWluY2FzdGVyXzI5CmludGNfMSAvLyAxCnJldHVybgptYWluX2wxODoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiB1bnBhdXNlcHJvamVjdGNhc3Rlcl8yOAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTk6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgcGF1c2Vwcm9qZWN0Y2FzdGVyXzI3CmludGNfMSAvLyAxCnJldHVybgptYWluX2wyMDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiB3aXRoZHJhd2Ftb3VudHJhaXNlZGNhc3Rlcl8yNgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMjE6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgcmVjbGFpbWludmVzdG1lbnRjYXN0ZXJfMjUKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDIyOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGNsYWltaWRvYXNzZXRjYXN0ZXJfMjQKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDIzOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGludmVzdGNhc3Rlcl8yMwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMjQ6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgZGVwb3NpdGlkb2Fzc2V0c2Nhc3Rlcl8yMgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMjU6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgbGlzdHByb2plY3RjYXN0ZXJfMjEKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDI2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGZ1bmRlc2Nyb3dhZGRyZXNzY2FzdGVyXzIwCmludGNfMSAvLyAxCnJldHVybgptYWluX2wyNzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBib290c3RyYXBjYXN0ZXJfMTkKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDI4Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CmJueiBtYWluX2wzMAplcnIKbWFpbl9sMzA6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCj09CmFzc2VydAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGNhbGN1bGF0ZV9wcm9qZWN0X21heF9jYXAKY2FsY3VsYXRlcHJvamVjdG1heGNhcF8wOgpwcm90byAyIDEKZnJhbWVfZGlnIC0yCmZyYW1lX2RpZyAtMQoqCnJldHN1YgoKLy8gY2FsY3VsYXRlX2FsbG9jYXRpb25fZm9yX2ludmVzdG9yCmNhbGN1bGF0ZWFsbG9jYXRpb25mb3JpbnZlc3Rvcl8xOgpwcm90byAyIDEKZnJhbWVfZGlnIC0yCmZyYW1lX2RpZyAtMQo+PQovLyBJbnZlc3RtZW50IGFtb3VudCBjYW5ub3QgYmUgbGVzc2VyIHRoYW4gYXNzZXQgcHJpY2UKYXNzZXJ0CmZyYW1lX2RpZyAtMgpmcmFtZV9kaWcgLTEKLwpyZXRzdWIKCi8vIGNhbGN1bGF0ZV9wcm9jZWVkc19hZnRlcl9mZWVfZGVkdWN0aW9uCmNhbGN1bGF0ZXByb2NlZWRzYWZ0ZXJmZWVkZWR1Y3Rpb25fMjoKcHJvdG8gMiAxCmZyYW1lX2RpZyAtMgpmcmFtZV9kaWcgLTIKZnJhbWVfZGlnIC0xCioKcHVzaGludCAxMDAgLy8gMTAwCi8KLQpyZXRzdWIKCi8vIGNhbGN1bGF0ZV9kaXNidXJzZW1lbnQKY2FsY3VsYXRlZGlzYnVyc2VtZW50XzM6CnByb3RvIDIgMQpmcmFtZV9kaWcgLTEKaW50Y18wIC8vIDAKPgphc3NlcnQKZnJhbWVfZGlnIC0xCnB1c2hpbnQgMTAwIC8vIDEwMAo8PQphc3NlcnQKZnJhbWVfZGlnIC0xCmZyYW1lX2RpZyAtMgoqCnB1c2hpbnQgMTAwIC8vIDEwMAovCnJldHN1YgoKLy8gYm9vdHN0cmFwCmJvb3RzdHJhcF80Ogpwcm90byAxIDAKdHhuIFNlbmRlcgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKPT0KLy8gdW5hdXRob3JpemVkCmFzc2VydApieXRlY18zIC8vICJhZG1pbl9hY2N0IgpieXRlY18wIC8vICIiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzEgLy8gImVzY3Jvd19hZGRyZXNzIgpieXRlY18wIC8vICIiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzMgLy8gImFkbWluX2FjY3QiCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwphcHBfZ2xvYmFsX3B1dApieXRlY18xIC8vICJlc2Nyb3dfYWRkcmVzcyIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMSAvLyAiZXNjcm93X2FkZHJlc3MiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2RpZyAtMQp0eG5hcyBBc3NldHMKYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCnN0b3JlIDAKaW50Y18wIC8vIDAKPT0KYnogYm9vdHN0cmFwXzRfbDIKaXR4bl9iZWdpbgpwdXNoaW50IDQgLy8gYXhmZXIKaXR4bl9maWVsZCBUeXBlRW51bQppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEFzc2V0QW1vdW50CmJ5dGVjXzEgLy8gImVzY3Jvd19hZGRyZXNzIgphcHBfZ2xvYmFsX2dldAppdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKZnJhbWVfZGlnIC0xCnR4bmFzIEFzc2V0cwppdHhuX2ZpZWxkIFhmZXJBc3NldAppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEZlZQppdHhuX3N1Ym1pdApib290c3RyYXBfNF9sMjoKcmV0c3ViCgovLyBmdW5kX2VzY3Jvd19hZGRyZXNzCmZ1bmRlc2Nyb3dhZGRyZXNzXzU6CnByb3RvIDEgMApmcmFtZV9kaWcgLTEKZ3R4bnMgQW1vdW50CmludGNfMCAvLyAwCj4KLy8gSW52YWxpZCBhbW91bnQsIHJlY2VpdmVyIG9yIHR5cGVfZW51bS4KYXNzZXJ0CmZyYW1lX2RpZyAtMQpndHhucyBSZWNlaXZlcgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwo9PQovLyBJbnZhbGlkIGFtb3VudCwgcmVjZWl2ZXIgb3IgdHlwZV9lbnVtLgphc3NlcnQKZnJhbWVfZGlnIC0xCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KLy8gSW52YWxpZCBhbW91bnQsIHJlY2VpdmVyIG9yIHR5cGVfZW51bS4KYXNzZXJ0CnJldHN1YgoKLy8gbGlzdF9wcm9qZWN0Cmxpc3Rwcm9qZWN0XzY6CnByb3RvIDkgMApieXRlY18wIC8vICIiCmR1cAppbnRjXzAgLy8gMApkdXBuIDEwCmJ5dGVjXzAgLy8gIiIKZHVwCmZyYW1lX2RpZyAtOQp0eG5hcyBBc3NldHMKYXNzZXRfcGFyYW1zX2dldCBBc3NldFRvdGFsCnN0b3JlIDEKaW50Y18wIC8vIDAKPgovLyBBIHZhbGlkIGFzc2V0IElEIG11c3QgYmUgcHJvdmlkZWQKYXNzZXJ0CmZyYW1lX2RpZyAtNAppbnRjXzAgLy8gMAo+Ci8vIEFzc2V0IHByaWNlIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAKYXNzZXJ0CmZyYW1lX2RpZyAtMwppbnRjXzAgLy8gMAo+Ci8vIE1pbi4gbXVzdCBiZSBncmVhdGVyIHRoYW4gMCwgYW5kIG1heCBpbnZlc3RtZW50IG11c3QgYmUgZ3JlYXRlciB0aGFuIG1pbi4gaW52ZXN0bWVudC4KYXNzZXJ0CmZyYW1lX2RpZyAtMgpmcmFtZV9kaWcgLTMKPgovLyBNaW4uIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAsIGFuZCBtYXggaW52ZXN0bWVudCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBtaW4uIGludmVzdG1lbnQuCmFzc2VydApmcmFtZV9kaWcgLTcKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAo+Ci8vIFN0YXJ0LCBlbmQgYW5kIGNsYWltIHRpbWVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIGN1cnJlbnQgdGltZQphc3NlcnQKZnJhbWVfZGlnIC02Cmdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKPgovLyBTdGFydCwgZW5kIGFuZCBjbGFpbSB0aW1lcyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBjdXJyZW50IHRpbWUKYXNzZXJ0CmZyYW1lX2RpZyAtNQpnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCj4KLy8gU3RhcnQsIGVuZCBhbmQgY2xhaW0gdGltZXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gY3VycmVudCB0aW1lCmFzc2VydApmcmFtZV9kaWcgLTcKZnJhbWVfZGlnIC02CjwKLy8gU3RhcnQgdGltZSBtdXN0IGJlIGxlc3MgdGhhbiBlbmQgdGltZQphc3NlcnQKZnJhbWVfZGlnIC01CmZyYW1lX2RpZyAtNwo+Ci8vIENsYWltIHRpbWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gc3RhcnQgYW5kIGVuZCB0aW1lCmFzc2VydApmcmFtZV9kaWcgLTUKZnJhbWVfZGlnIC02Cj4KLy8gQ2xhaW0gdGltZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBzdGFydCBhbmQgZW5kIHRpbWUKYXNzZXJ0CmZyYW1lX2RpZyAtMQpwdXNoaW50IDYwIC8vIDYwCj09CmZyYW1lX2RpZyAtMQpwdXNoaW50IDc3NzYwMDAgLy8gNzc3NjAwMAo9PQp8fApmcmFtZV9kaWcgLTEKcHVzaGludCAxNTU1MjAwMCAvLyAxNTU1MjAwMAo9PQp8fApmcmFtZV9kaWcgLTEKcHVzaGludCAzMTUzNjAwMCAvLyAzMTUzNjAwMAo9PQp8fAovLyBWZXN0aW5nIHNjaGVkdWxlIG11c3QgZmFsbCBiZXR3ZWVuIHF1YXJ0ZXJseSwgaGFsZl95ZWFyIG9yIHllYXJseSBwZXJpb2RzLgphc3NlcnQKaXR4bl9iZWdpbgpwdXNoaW50IDQgLy8gYXhmZXIKaXR4bl9maWVsZCBUeXBlRW51bQppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEFzc2V0QW1vdW50CmJ5dGVjXzEgLy8gImVzY3Jvd19hZGRyZXNzIgphcHBfZ2xvYmFsX2dldAppdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKZnJhbWVfZGlnIC05CnR4bmFzIEFzc2V0cwppdHhuX2ZpZWxkIFhmZXJBc3NldAppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEZlZQppdHhuX3N1Ym1pdAp0eG4gU2VuZGVyCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpsZW4KaW50Y18yIC8vIDMyCj09CmFzc2VydApmcmFtZV9kaWcgLTkKdHhuYXMgQXNzZXRzCmZyYW1lX2J1cnkgMgppbnRjXzAgLy8gMApmcmFtZV9idXJ5IDMKaW50Y18wIC8vIDAKZnJhbWVfYnVyeSA0CmludGNfMCAvLyAwCiEKIQpmcmFtZV9idXJ5IDUKaW50Y18wIC8vIDAKIQohCmZyYW1lX2J1cnkgNgppbnRjXzAgLy8gMApmcmFtZV9idXJ5IDcKaW50Y18wIC8vIDAKZnJhbWVfYnVyeSA4CmludGNfMCAvLyAwCmZyYW1lX2J1cnkgOQpnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCmZyYW1lX2RpZyAtMQorCmZyYW1lX2J1cnkgMTAKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIC03Cml0b2IKY29uY2F0CmZyYW1lX2RpZyAtNgppdG9iCmNvbmNhdApmcmFtZV9kaWcgLTUKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDIKaXRvYgpjb25jYXQKZnJhbWVfZGlnIC04CmZyYW1lX2J1cnkgMTQKZnJhbWVfZGlnIDE0CmZyYW1lX2J1cnkgMTMKaW50YyA0IC8vIDEzOQpmcmFtZV9idXJ5IDExCmZyYW1lX2RpZyAxMQppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgLTQKaXRvYgpjb25jYXQKZnJhbWVfZGlnIC0zCml0b2IKY29uY2F0CmZyYW1lX2RpZyAtMgppdG9iCmNvbmNhdApmcmFtZV9kaWcgMwppdG9iCmNvbmNhdApmcmFtZV9kaWcgNAppdG9iCmNvbmNhdApieXRlY18yIC8vIDB4MDAKaW50Y18wIC8vIDAKZnJhbWVfZGlnIDUKc2V0Yml0CmludGNfMSAvLyAxCmZyYW1lX2RpZyA2CnNldGJpdApjb25jYXQKZnJhbWVfZGlnIDcKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDgKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDkKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDEwCml0b2IKY29uY2F0CmZyYW1lX2RpZyAxMwpjb25jYXQKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAtOQp0eG5hcyBBc3NldHMKaXRvYgpib3hfZGVsCnBvcApmcmFtZV9kaWcgLTkKdHhuYXMgQXNzZXRzCml0b2IKZnJhbWVfZGlnIDAKYm94X3B1dApyZXRzdWIKCi8vIGRlcG9zaXRfaWRvX2Fzc2V0cwpkZXBvc2l0aWRvYXNzZXRzXzc6CnByb3RvIDIgMApieXRlY18wIC8vICIiCmR1cAppbnRjXzAgLy8gMApkdXBuIDMKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXBuIDEyCmJ5dGVjXzAgLy8gIiIKZHVwCmZyYW1lX2RpZyAtMQp0eG5hcyBBc3NldHMKaXRvYgpib3hfbGVuCnN0b3JlIDMKc3RvcmUgMgpsb2FkIDMKLy8gQSB2YWxpZCBwcm9qZWN0IElEIG11c3QgYmUgcHJvdmlkZWQKYXNzZXJ0CmZyYW1lX2RpZyAtMQp0eG5hcyBBc3NldHMKaXRvYgpib3hfZ2V0CnN0b3JlIDUKc3RvcmUgNApsb2FkIDUKYXNzZXJ0CmxvYWQgNApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKZXh0cmFjdCAwIDMyCmZyYW1lX2J1cnkgMQp0eG4gU2VuZGVyCmZyYW1lX2RpZyAxCj09Ci8vIFRyYW5zYWN0aW9uIHNlbmRlciBtdXN0IGJlIHRoZSBwcm9qZWN0IG93bmVyLgphc3NlcnQKZnJhbWVfZGlnIC0yCmd0eG5zIEFzc2V0QW1vdW50CmludGNfMCAvLyAwCj4KLy8gSW52YWxpZCBhc3NldF9hbW91bnQsIGFzc2V0X3JlY2VpdmVyLCB0eXBlX2VudW0sIHhmZXJfYXNzZXQgb3Igc2VuZGVyLgphc3NlcnQKZnJhbWVfZGlnIC0yCmd0eG5zIEFzc2V0UmVjZWl2ZXIKYnl0ZWNfMSAvLyAiZXNjcm93X2FkZHJlc3MiCmFwcF9nbG9iYWxfZ2V0Cj09Ci8vIEludmFsaWQgYXNzZXRfYW1vdW50LCBhc3NldF9yZWNlaXZlciwgdHlwZV9lbnVtLCB4ZmVyX2Fzc2V0IG9yIHNlbmRlci4KYXNzZXJ0CmZyYW1lX2RpZyAtMgpndHhucyBUeXBlRW51bQpwdXNoaW50IDQgLy8gYXhmZXIKPT0KLy8gSW52YWxpZCBhc3NldF9hbW91bnQsIGFzc2V0X3JlY2VpdmVyLCB0eXBlX2VudW0sIHhmZXJfYXNzZXQgb3Igc2VuZGVyLgphc3NlcnQKZnJhbWVfZGlnIC0yCmd0eG5zIFhmZXJBc3NldApmcmFtZV9kaWcgLTEKdHhuYXMgQXNzZXRzCj09Ci8vIEludmFsaWQgYXNzZXRfYW1vdW50LCBhc3NldF9yZWNlaXZlciwgdHlwZV9lbnVtLCB4ZmVyX2Fzc2V0IG9yIHNlbmRlci4KYXNzZXJ0CmZyYW1lX2RpZyAtMgpndHhucyBTZW5kZXIKZnJhbWVfZGlnIDEKPT0KLy8gSW52YWxpZCBhc3NldF9hbW91bnQsIGFzc2V0X3JlY2VpdmVyLCB0eXBlX2VudW0sIHhmZXJfYXNzZXQgb3Igc2VuZGVyLgphc3NlcnQKZnJhbWVfZGlnIDAKaW50Y18yIC8vIDMyCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMApwdXNoaW50IDQwIC8vIDQwCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgMAppbnRjXzMgLy8gNDgKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyAwCnB1c2hpbnQgNTYgLy8gNTYKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAwCnB1c2hpbnQgNjQgLy8gNjQKZXh0cmFjdF91aW50MTYKZGlnIDEKbGVuCnN1YnN0cmluZzMKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyAwCnB1c2hpbnQgNjYgLy8gNjYKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA3CmZyYW1lX2RpZyAwCnB1c2hpbnQgNzQgLy8gNzQKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyAwCnB1c2hpbnQgODIgLy8gODIKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA5CmZyYW1lX2RpZyAtMgpndHhucyBBc3NldEFtb3VudApmcmFtZV9idXJ5IDEwCmZyYW1lX2RpZyAwCmludGMgNSAvLyA4NDgKZ2V0Yml0CmZyYW1lX2J1cnkgMTEKZnJhbWVfZGlnIDAKaW50YyA2IC8vIDg0OQpnZXRiaXQKZnJhbWVfYnVyeSAxMgpmcmFtZV9kaWcgMApwdXNoaW50IDEwNyAvLyAxMDcKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAxMwpmcmFtZV9kaWcgMApwdXNoaW50IDExNSAvLyAxMTUKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAxNApmcmFtZV9kaWcgMApwdXNoaW50IDEyMyAvLyAxMjMKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAxNQpmcmFtZV9kaWcgMAppbnRjIDcgLy8gMTMxCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMTYKZnJhbWVfZGlnIDEwCmZyYW1lX2RpZyA3CmNhbGxzdWIgY2FsY3VsYXRlcHJvamVjdG1heGNhcF8wCmZyYW1lX2J1cnkgMTcKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDMKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDQKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDUKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDYKZnJhbWVfYnVyeSAyMQpmcmFtZV9kaWcgMjEKZnJhbWVfYnVyeSAyMAppbnRjIDQgLy8gMTM5CmZyYW1lX2J1cnkgMTgKZnJhbWVfZGlnIDE4Cml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyA3Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA4Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA5Cml0b2IKY29uY2F0CmZyYW1lX2RpZyAxNwppdG9iCmNvbmNhdApmcmFtZV9kaWcgMTAKaXRvYgpjb25jYXQKYnl0ZWNfMiAvLyAweDAwCmludGNfMCAvLyAwCmZyYW1lX2RpZyAxMQpzZXRiaXQKaW50Y18xIC8vIDEKZnJhbWVfZGlnIDEyCnNldGJpdApjb25jYXQKZnJhbWVfZGlnIDEzCml0b2IKY29uY2F0CmZyYW1lX2RpZyAxNAppdG9iCmNvbmNhdApmcmFtZV9kaWcgMTUKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDE2Cml0b2IKY29uY2F0CmZyYW1lX2RpZyAyMApjb25jYXQKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAtMQp0eG5hcyBBc3NldHMKaXRvYgpib3hfZGVsCnBvcApmcmFtZV9kaWcgLTEKdHhuYXMgQXNzZXRzCml0b2IKZnJhbWVfZGlnIDAKYm94X3B1dApyZXRzdWIKCi8vIGludmVzdG9yX2FsZ29fcGF5bWVudAppbnZlc3RvcmFsZ29wYXltZW50Xzg6CnByb3RvIDMgMQpmcmFtZV9kaWcgLTEKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQovLyBUcmFuc2FjdGlvbiB0eXBlIG11c3QgYmUgUGF5bWVudC4KYXNzZXJ0CmZyYW1lX2RpZyAtMQpndHhucyBSZWNlaXZlcgpieXRlY18xIC8vICJlc2Nyb3dfYWRkcmVzcyIKYXBwX2dsb2JhbF9nZXQKPT0KLy8gSW52YWxpZCByZWNlaXZlciBvciB0cmFuc2FjdGlvbiB0eXBlLgphc3NlcnQKZnJhbWVfZGlnIC0xCmd0eG5zIEFtb3VudApmcmFtZV9kaWcgLTMKPj0KZnJhbWVfZGlnIC0xCmd0eG5zIEFtb3VudApmcmFtZV9kaWcgLTIKPD0KfHwKLy8gQXNzZXQgYW1vdW50IG11c3QgYmUgZ3JlYXRlciBvciBlcXVhbCB0byBtaW5faW52ZXN0bWVudCBhbmQgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gbWF4X2ludmVzdG1lbnQuCmFzc2VydApmcmFtZV9kaWcgLTEKZ3R4bnMgQW1vdW50CnJldHN1YgoKLy8gaW52ZXN0b3JfdXNkY19wYXltZW50CmludmVzdG9ydXNkY3BheW1lbnRfOToKcHJvdG8gNCAxCmZyYW1lX2RpZyAtMQpndHhucyBUeXBlRW51bQpwdXNoaW50IDQgLy8gYXhmZXIKPT0KLy8gVHJhbnNhY3Rpb24gdHlwZSBtdXN0IGJlIEFzc2V0VHJhbnNmZXIuCmFzc2VydApmcmFtZV9kaWcgLTIKdHhuYXMgQXNzZXRzCmludGMgOCAvLyAxMDQ1ODk0MQo9PQovLyBJbnZhbGlkIGFzc2V0IElEIGZvciBVU0RDLgphc3NlcnQKZnJhbWVfZGlnIC0xCmd0eG5zIEFzc2V0UmVjZWl2ZXIKYnl0ZWNfMSAvLyAiZXNjcm93X2FkZHJlc3MiCmFwcF9nbG9iYWxfZ2V0Cj09Ci8vIEludmFsaWQgcmVjZWl2ZXIgb3IgdHJhbnNhY3Rpb24gdHlwZS4KYXNzZXJ0CmZyYW1lX2RpZyAtMQpndHhucyBYZmVyQXNzZXQKZnJhbWVfZGlnIC0yCnR4bmFzIEFzc2V0cwo9PQovLyBJbnZhbGlkIHJlY2VpdmVyIG9yIHRyYW5zYWN0aW9uIHR5cGUuCmFzc2VydApmcmFtZV9kaWcgLTEKZ3R4bnMgQXNzZXRBbW91bnQKZnJhbWVfZGlnIC00Cj49CmZyYW1lX2RpZyAtMQpndHhucyBBc3NldEFtb3VudApmcmFtZV9kaWcgLTMKPD0KfHwKLy8gQXNzZXQgYW1vdW50IG11c3QgYmUgZ3JlYXRlciBvciBlcXVhbCB0byBtaW5faW52ZXN0bWVudCBhbmQgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gbWF4X2ludmVzdG1lbnQuCmFzc2VydApmcmFtZV9kaWcgLTEKZ3R4bnMgQXNzZXRBbW91bnQKcmV0c3ViCgovLyBpbnZlc3QKaW52ZXN0XzEwOgpwcm90byA0IDAKYnl0ZWNfMCAvLyAiIgpkdXBuIDIKaW50Y18wIC8vIDAKZHVwbiAzCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKZHVwbiAxMQpieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cG4gNgpieXRlY18wIC8vICIiCmR1cAppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMCAvLyAiIgpkdXAKZnJhbWVfZGlnIC00CmludGNfMSAvLyAxCj09Ci8vIEludmVzdG9yIG11c3QgYmUgc3Rha2luZyAkVkVTVC4KYXNzZXJ0CmZyYW1lX2RpZyAtMwp0eG5hcyBBc3NldHMKaXRvYgpib3hfbGVuCnN0b3JlIDcKc3RvcmUgNgpsb2FkIDcKLy8gQSB2YWxpZCBwcm9qZWN0IElEIG11c3QgYmUgcHJvdmlkZWQKYXNzZXJ0CmZyYW1lX2RpZyAtMwp0eG5hcyBBc3NldHMKaXRvYgpib3hfZ2V0CnN0b3JlIDkKc3RvcmUgOApsb2FkIDkKYXNzZXJ0CmxvYWQgOApmcmFtZV9idXJ5IDEKYnl0ZWNfMSAvLyAiZXNjcm93X2FkZHJlc3MiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2RpZyAtMwp0eG5hcyBBc3NldHMKYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCnN0b3JlIDEwCmludGNfMCAvLyAwCj4KLy8gUHJvamVjdCBhc3NldHMgbXVzdCBiZSBhdmFpbGFibGUgaW4gZXNjcm93Lgphc3NlcnQKZnJhbWVfZGlnIDEKZXh0cmFjdCAwIDMyCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMQppbnRjXzIgLy8gMzIKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAzCmZyYW1lX2RpZyAxCnB1c2hpbnQgNDAgLy8gNDAKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyAxCmludGNfMyAvLyA0OApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDEKcHVzaGludCA1NiAvLyA1NgpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDEKcHVzaGludCA2NCAvLyA2NApleHRyYWN0X3VpbnQxNgpkaWcgMQpsZW4Kc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDEKcHVzaGludCA2NiAvLyA2NgpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDgKZnJhbWVfZGlnIDEKcHVzaGludCA3NCAvLyA3NApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDkKZnJhbWVfZGlnIDEKcHVzaGludCA4MiAvLyA4MgpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDEwCmZyYW1lX2RpZyAxCnB1c2hpbnQgOTAgLy8gOTAKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAxMQpmcmFtZV9kaWcgMQpwdXNoaW50IDk4IC8vIDk4CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMTIKZnJhbWVfZGlnIDEKaW50YyA1IC8vIDg0OApnZXRiaXQKZnJhbWVfYnVyeSAxMwpmcmFtZV9kaWcgMQppbnRjIDYgLy8gODQ5CmdldGJpdApmcmFtZV9idXJ5IDE0CmZyYW1lX2RpZyAxCnB1c2hpbnQgMTA3IC8vIDEwNwpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDE1CmZyYW1lX2RpZyAxCnB1c2hpbnQgMTE1IC8vIDExNQpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDE2CmZyYW1lX2RpZyAxCnB1c2hpbnQgMTIzIC8vIDEyMwpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDE3CmZyYW1lX2RpZyAxCmludGMgNyAvLyAxMzEKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAxOApmcmFtZV9kaWcgMTMKaW50Y18wIC8vIDAKPT0KLy8gUHJvamVjdCBtdXN0IG5vdCBiZSBwYXVzZWQuCmFzc2VydApmcmFtZV9kaWcgMTYKZnJhbWVfZGlnIDExCjwKLy8gVG90YWwgYW1vdW50IHJhaXNlZCBtdXN0IGJlIGxlc3MgdGhhbiBtYXguIGNhcAphc3NlcnQKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcApmcmFtZV9kaWcgMwo+PQovLyBQcm9qZWN0IG11c3QgYmUgbGl2ZSBhbmQgb25nb2luZy4KYXNzZXJ0Cmdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKZnJhbWVfZGlnIDQKPAovLyBQcm9qZWN0IG11c3QgYmUgbGl2ZSBhbmQgb25nb2luZy4KYXNzZXJ0CmZyYW1lX2RpZyAtMgpndHhucyBUeXBlRW51bQppbnRjXzEgLy8gcGF5Cj09CmZyYW1lX2RpZyAtMgpndHhucyBUeXBlRW51bQpwdXNoaW50IDQgLy8gYXhmZXIKPT0KfHwKLy8gSW52YWxpZCB0cmFuc2FjdGlvbiB0eXBlLiBNdXN0IGJlIG9mIHR5cGUgUGF5bWVudCBvciBBc3NldFRyYW5zZmVyLgphc3NlcnQKaW50Y18wIC8vIDAKZnJhbWVfYnVyeSAxOQpmcmFtZV9kaWcgLTIKZ3R4bnMgWGZlckFzc2V0CmludGNfMCAvLyAwCj09CmJueiBpbnZlc3RfMTBfbDIKZnJhbWVfZGlnIDkKZnJhbWVfZGlnIDEwCmZyYW1lX2RpZyAtMQpmcmFtZV9kaWcgLTIKY2FsbHN1YiBpbnZlc3RvcnVzZGNwYXltZW50XzkKZnJhbWVfYnVyeSAxOQpiIGludmVzdF8xMF9sMwppbnZlc3RfMTBfbDI6CmZyYW1lX2RpZyA5CmZyYW1lX2RpZyAxMApmcmFtZV9kaWcgLTIKY2FsbHN1YiBpbnZlc3RvcmFsZ29wYXltZW50XzgKZnJhbWVfYnVyeSAxOQppbnZlc3RfMTBfbDM6CnR4biBTZW5kZXIKZnJhbWVfYnVyeSAyMApmcmFtZV9kaWcgMjAKbGVuCmludGNfMiAvLyAzMgo9PQphc3NlcnQKZnJhbWVfZGlnIC0zCnR4bmFzIEFzc2V0cwpmcmFtZV9idXJ5IDIxCmludGNfMCAvLyAwCmZyYW1lX2J1cnkgMjIKaW50Y18wIC8vIDAKIQohCmZyYW1lX2J1cnkgMjMKaW50Y18wIC8vIDAKIQohCmZyYW1lX2J1cnkgMjQKZnJhbWVfZGlnIDE5CmZyYW1lX2RpZyA4CmNhbGxzdWIgY2FsY3VsYXRlYWxsb2NhdGlvbmZvcmludmVzdG9yXzEKZnJhbWVfYnVyeSAyNQpmcmFtZV9kaWcgMjUKZnJhbWVfYnVyeSAyNQpmcmFtZV9kaWcgMjAKZnJhbWVfZGlnIDIxCml0b2IKY29uY2F0CmZyYW1lX2RpZyAxOQppdG9iCmNvbmNhdApmcmFtZV9kaWcgMjUKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDIyCml0b2IKY29uY2F0CmJ5dGVjXzIgLy8gMHgwMAppbnRjXzAgLy8gMApmcmFtZV9kaWcgMjMKc2V0Yml0CmludGNfMSAvLyAxCmZyYW1lX2RpZyAyNApzZXRiaXQKY29uY2F0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMjAKYm94X2RlbApwb3AKZnJhbWVfZGlnIDIwCmZyYW1lX2RpZyAwCmJveF9wdXQKZnJhbWVfZGlnIDEyCmZyYW1lX2RpZyAyNQotCmZyYW1lX2J1cnkgMTUKZnJhbWVfZGlnIDE2CmZyYW1lX2RpZyAxOQorCmZyYW1lX2J1cnkgMTYKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIDMKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDQKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDUKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDYKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDcKZnJhbWVfYnVyeSAzMwpmcmFtZV9kaWcgMzMKZnJhbWVfYnVyeSAzMgppbnRjIDQgLy8gMTM5CmZyYW1lX2J1cnkgMzAKZnJhbWVfZGlnIDMwCml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyA4Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA5Cml0b2IKY29uY2F0CmZyYW1lX2RpZyAxMAppdG9iCmNvbmNhdApmcmFtZV9kaWcgMTEKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDEyCml0b2IKY29uY2F0CmJ5dGVjXzIgLy8gMHgwMAppbnRjXzAgLy8gMApmcmFtZV9kaWcgMTMKc2V0Yml0CmludGNfMSAvLyAxCmZyYW1lX2RpZyAxNApzZXRiaXQKY29uY2F0CmZyYW1lX2RpZyAxNQppdG9iCmNvbmNhdApmcmFtZV9kaWcgMTYKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDE3Cml0b2IKY29uY2F0CmZyYW1lX2RpZyAxOAppdG9iCmNvbmNhdApmcmFtZV9kaWcgMzIKY29uY2F0CmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgLTMKdHhuYXMgQXNzZXRzCml0b2IKYm94X2RlbApwb3AKZnJhbWVfZGlnIC0zCnR4bmFzIEFzc2V0cwppdG9iCmZyYW1lX2RpZyAxCmJveF9wdXQKcmV0c3ViCgovLyBjbGFpbV9pZG9fYXNzZXQKY2xhaW1pZG9hc3NldF8xMToKcHJvdG8gMiAwCmJ5dGVjXzAgLy8gIiIKZHVwCmludGNfMCAvLyAwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKZHVwbiA3CmJ5dGVjXzAgLy8gIiIKZHVwCnR4biBTZW5kZXIKYm94X2xlbgpzdG9yZSAxMgpzdG9yZSAxMQpsb2FkIDEyCi8vIEludmFsaWQgaW52ZXN0b3IuCmFzc2VydApmcmFtZV9kaWcgLTIKdHhuYXMgQXNzZXRzCml0b2IKYm94X2xlbgpzdG9yZSAxNApzdG9yZSAxMwpsb2FkIDE0Ci8vIEludmFsaWQgcHJvamVjdC4KYXNzZXJ0CmZyYW1lX2RpZyAtMgp0eG5hcyBBc3NldHMKaXRvYgpib3hfZ2V0CnN0b3JlIDE2CnN0b3JlIDE1CmxvYWQgMTYKYXNzZXJ0CmxvYWQgMTUKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmludGNfMyAvLyA0OApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDIKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcApmcmFtZV9kaWcgMgo+PQovLyBBc3NldCBjbGFpbWluZyBoYXNuJ3QgYmVndW4uCmFzc2VydAp0eG4gU2VuZGVyCmJveF9nZXQKc3RvcmUgMTgKc3RvcmUgMTcKbG9hZCAxOAphc3NlcnQKbG9hZCAxNwpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKZXh0cmFjdCAwIDMyCmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgMAppbnRjXzIgLy8gMzIKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyAwCnB1c2hpbnQgNDAgLy8gNDAKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyAwCmludGNfMyAvLyA0OApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIDAKcHVzaGludCA1NiAvLyA1NgpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDAKaW50YyA5IC8vIDUxMgpnZXRiaXQKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyAwCmludGMgMTAgLy8gNTEzCmdldGJpdApmcmFtZV9idXJ5IDkKZnJhbWVfZGlnIC0xCmludGNfMSAvLyAxCj09Ci8vIEludmVzdG9yIG11c3QgYmUgc3Rha2luZy4KYXNzZXJ0CmZyYW1lX2RpZyA1CmludGNfMCAvLyAwCj4KLy8gSW52ZXN0b3IgYW1vdW50IG11c3QgYmUgZ3JlYXRlciB0aGFuIDAuCmFzc2VydApmcmFtZV9kaWcgNgppbnRjXzAgLy8gMAo+Ci8vIEludmVzdG9yIGFzc2V0IGFsbG9jYXRpb24gbXVzdCBiZSBncmVhdGVyIHRoYW4gMC4KYXNzZXJ0CmZyYW1lX2RpZyA3CmludGNfMCAvLyAwCj09Ci8vIEludmVzdG9yIGNsYWltX3RpbWVzdGFtcCBtdXN0IGJlIDAuCmFzc2VydApmcmFtZV9kaWcgOAppbnRjXzAgLy8gMAo9PQovLyBJbnZlc3RvciBtdXN0IGhhdmUgbm90IGNsYWltZWQgdGhlaXIgYWxsb2NhdGlvbi4KYXNzZXJ0CmZyYW1lX2RpZyA5CmludGNfMCAvLyAwCj09Ci8vIEludmVzdG9yIG11c3QgaGF2ZSBub3QgcmVjbGFpbWVkIHRoZWlyIGludmVzdG1lbnQuCmFzc2VydAppdHhuX2JlZ2luCnB1c2hpbnQgNCAvLyBheGZlcgppdHhuX2ZpZWxkIFR5cGVFbnVtCmZyYW1lX2RpZyA2Cml0eG5fZmllbGQgQXNzZXRBbW91bnQKZnJhbWVfZGlnIDMKaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCmZyYW1lX2RpZyAtMgp0eG5hcyBBc3NldHMKaXR4bl9maWVsZCBYZmVyQXNzZXQKaW50Y18wIC8vIDAKaXR4bl9maWVsZCBGZWUKaXR4bl9zdWJtaXQKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcApmcmFtZV9idXJ5IDcKaW50Y18xIC8vIDEKIQohCmZyYW1lX2J1cnkgOApmcmFtZV9kaWcgMwpmcmFtZV9kaWcgNAppdG9iCmNvbmNhdApmcmFtZV9kaWcgNQppdG9iCmNvbmNhdApmcmFtZV9kaWcgNgppdG9iCmNvbmNhdApmcmFtZV9kaWcgNwppdG9iCmNvbmNhdApieXRlY18yIC8vIDB4MDAKaW50Y18wIC8vIDAKZnJhbWVfZGlnIDgKc2V0Yml0CmludGNfMSAvLyAxCmZyYW1lX2RpZyA5CnNldGJpdApjb25jYXQKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAzCmJveF9kZWwKcG9wCmZyYW1lX2RpZyAzCmZyYW1lX2RpZyAwCmJveF9wdXQKcmV0c3ViCgovLyByZWNsYWltX2ludmVzdG1lbnQKcmVjbGFpbWludmVzdG1lbnRfMTI6CnByb3RvIDMgMApieXRlY18wIC8vICIiCmR1cG4gMgppbnRjXzAgLy8gMApkdXBuIDgKYnl0ZWNfMCAvLyAiIgpkdXAKdHhuIFNlbmRlcgpib3hfbGVuCnN0b3JlIDIwCnN0b3JlIDE5CmxvYWQgMjAKLy8gSW52YWxpZCBpbnZlc3Rvci4KYXNzZXJ0CmZyYW1lX2RpZyAtMwp0eG5hcyBBc3NldHMKaXRvYgpib3hfbGVuCnN0b3JlIDIyCnN0b3JlIDIxCmxvYWQgMjIKLy8gSW52YWxpZCBwcm9qZWN0IElELgphc3NlcnQKdHhuIFNlbmRlcgpib3hfZ2V0CnN0b3JlIDI0CnN0b3JlIDIzCmxvYWQgMjQKYXNzZXJ0CmxvYWQgMjMKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmV4dHJhY3QgMCAzMgpmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIDAKaW50Y18yIC8vIDMyCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgMApwdXNoaW50IDQwIC8vIDQwCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgNApmcmFtZV9kaWcgMAppbnRjXzMgLy8gNDgKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyAwCmludGMgOSAvLyA1MTIKZ2V0Yml0CmZyYW1lX2J1cnkgNgpmcmFtZV9kaWcgMApwdXNoaW50IDU2IC8vIDU2CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgMAppbnRjIDEwIC8vIDUxMwpnZXRiaXQKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyAtMwp0eG5hcyBBc3NldHMKaXRvYgpib3hfZ2V0CnN0b3JlIDI2CnN0b3JlIDI1CmxvYWQgMjYKYXNzZXJ0CmxvYWQgMjUKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmludGNfMyAvLyA0OApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDkKYnl0ZWNfMSAvLyAiZXNjcm93X2FkZHJlc3MiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2RpZyAtMwp0eG5hcyBBc3NldHMKYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCnN0b3JlIDI3CmludGNfMCAvLyAwCj4KLy8gUHJvamVjdCBhc3NldHMgbXVzdCBiZSBhdmFpbGFibGUgaW4gZXNjcm93Lgphc3NlcnQKZnJhbWVfZGlnIC0yCmludGNfMSAvLyAxCj09Ci8vIEludmVzdG9yIG11c3QgYmUgc3Rha2luZyAkVkVTVC4KYXNzZXJ0CmZyYW1lX2RpZyA1CmludGNfMCAvLyAwCj4KLy8gSW52ZXN0b3IgYXNzZXQgYWxsb2NhdGlvbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLgphc3NlcnQKZnJhbWVfZGlnIDYKaW50Y18wIC8vIDAKPT0KLy8gSW52ZXN0b3IgbXVzdCBoYXZlIG5vdCBjbGFpbWVkIHRoZWlyIGFzc2V0IGFsbG9jYXRpb24uCmFzc2VydApmcmFtZV9kaWcgOAppbnRjXzAgLy8gMAo9PQovLyBJbnZlc3RvciBtdXN0IGhhdmUgbm90IHJlY2xhaW1lZCBpbnZlc3RtZW50Lgphc3NlcnQKcHVzaGludCAxMjA5NjAwIC8vIDEyMDk2MDAKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcApmcmFtZV9kaWcgOQotCj49Ci8vIENsYWltIG11c3QgYmUgd2l0aGluIHJlY2xhaW0gd2luZG93Lgphc3NlcnQKZnJhbWVfZGlnIC0xCnR4bmFzIEFzc2V0cwppbnRjXzAgLy8gMAo9PQpibnogcmVjbGFpbWludmVzdG1lbnRfMTJfbDIKZnJhbWVfZGlnIC0xCnR4bmFzIEFzc2V0cwppbnRjIDggLy8gMTA0NTg5NDEKPT0KLy8gUmVjbGFpbSBhc3NldCBtdXN0IGJlIFVTREMgYXNzZXQgSUQ6IChJbnQgMTA0NTg5NDEpCmFzc2VydAppdHhuX2JlZ2luCnB1c2hpbnQgNCAvLyBheGZlcgppdHhuX2ZpZWxkIFR5cGVFbnVtCmZyYW1lX2RpZyAyCml0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgpmcmFtZV9kaWcgNAppdHhuX2ZpZWxkIEFzc2V0QW1vdW50CmZyYW1lX2RpZyAtMQp0eG5hcyBBc3NldHMKaXR4bl9maWVsZCBYZmVyQXNzZXQKaW50Y18wIC8vIDAKaXR4bl9maWVsZCBGZWUKaXR4bl9zdWJtaXQKYiByZWNsYWltaW52ZXN0bWVudF8xMl9sMwpyZWNsYWltaW52ZXN0bWVudF8xMl9sMjoKaXR4bl9iZWdpbgppbnRjXzEgLy8gcGF5Cml0eG5fZmllbGQgVHlwZUVudW0KZnJhbWVfZGlnIDIKaXR4bl9maWVsZCBSZWNlaXZlcgpmcmFtZV9kaWcgNAppdHhuX2ZpZWxkIEFtb3VudAppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEZlZQppdHhuX3N1Ym1pdApyZWNsYWltaW52ZXN0bWVudF8xMl9sMzoKaW50Y18wIC8vIDAKZnJhbWVfYnVyeSA0CmludGNfMCAvLyAwCmZyYW1lX2J1cnkgNQppbnRjXzEgLy8gMQohCiEKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyAyCmZyYW1lX2RpZyAzCml0b2IKY29uY2F0CmZyYW1lX2RpZyA0Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA1Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA3Cml0b2IKY29uY2F0CmJ5dGVjXzIgLy8gMHgwMAppbnRjXzAgLy8gMApmcmFtZV9kaWcgNgpzZXRiaXQKaW50Y18xIC8vIDEKZnJhbWVfZGlnIDgKc2V0Yml0CmNvbmNhdApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDIKYm94X2RlbApwb3AKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIDAKYm94X3B1dApyZXRzdWIKCi8vIHdpdGhkcmF3X2Ftb3VudF9yYWlzZWQKd2l0aGRyYXdhbW91bnRyYWlzZWRfMTM6CnByb3RvIDEgMApieXRlY18wIC8vICIiCmR1cAppbnRjXzAgLy8gMApkdXBuIDMKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXBuIDE2CmJ5dGVjXzAgLy8gIiIKZHVwCmZyYW1lX2RpZyAtMQppdG9iCmJveF9sZW4Kc3RvcmUgMjkKc3RvcmUgMjgKbG9hZCAyOQovLyBJbnZhbGlkIHByb2plY3QgSUQuCmFzc2VydApmcmFtZV9kaWcgLTEKaXRvYgpib3hfZ2V0CnN0b3JlIDMxCnN0b3JlIDMwCmxvYWQgMzEKYXNzZXJ0CmxvYWQgMzAKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmV4dHJhY3QgMCAzMgpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDAKaW50Y18yIC8vIDMyCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMApwdXNoaW50IDQwIC8vIDQwCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgMAppbnRjXzMgLy8gNDgKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyAwCnB1c2hpbnQgNTYgLy8gNTYKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAwCnB1c2hpbnQgNjQgLy8gNjQKZXh0cmFjdF91aW50MTYKZGlnIDEKbGVuCnN1YnN0cmluZzMKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyAwCnB1c2hpbnQgNjYgLy8gNjYKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA3CmZyYW1lX2RpZyAwCnB1c2hpbnQgNzQgLy8gNzQKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyAwCnB1c2hpbnQgODIgLy8gODIKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA5CmZyYW1lX2RpZyAwCnB1c2hpbnQgOTAgLy8gOTAKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAxMApmcmFtZV9kaWcgMApwdXNoaW50IDk4IC8vIDk4CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMTEKZnJhbWVfZGlnIDAKaW50YyA1IC8vIDg0OApnZXRiaXQKZnJhbWVfYnVyeSAxMgpmcmFtZV9kaWcgMAppbnRjIDYgLy8gODQ5CmdldGJpdApmcmFtZV9idXJ5IDEzCmZyYW1lX2RpZyAwCnB1c2hpbnQgMTA3IC8vIDEwNwpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDE0CmZyYW1lX2RpZyAwCnB1c2hpbnQgMTE1IC8vIDExNQpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDE1CmZyYW1lX2RpZyAwCnB1c2hpbnQgMTIzIC8vIDEyMwpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDE2CmZyYW1lX2RpZyAwCmludGMgNyAvLyAxMzEKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAxNwp0eG4gU2VuZGVyCmZyYW1lX2RpZyAxCj09Ci8vIEludmFsaWQgc2VuZGVyLgphc3NlcnQKZnJhbWVfZGlnIDE1CmludGNfMCAvLyAwCj4KLy8gQW1vdW50IHJhaXNlZCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLgphc3NlcnQKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcApmcmFtZV9kaWcgNAo+Ci8vIFdpdGhkcmF3YWwgbXVzdCBiZSBhZnRlciBjbGFpbSBwZXJpb2QuCmFzc2VydApwdXNoaW50IDEwIC8vIDEwCmZyYW1lX2J1cnkgMTgKZnJhbWVfZGlnIDE1CmZyYW1lX2RpZyAxOApjYWxsc3ViIGNhbGN1bGF0ZXByb2NlZWRzYWZ0ZXJmZWVkZWR1Y3Rpb25fMgpmcmFtZV9idXJ5IDE5CnB1c2hpbnQgMTAgLy8gMTAKZnJhbWVfYnVyeSAyMApmcmFtZV9kaWcgMTkKZnJhbWVfZGlnIDIwCmNhbGxzdWIgY2FsY3VsYXRlZGlzYnVyc2VtZW50XzMKZnJhbWVfYnVyeSAyMQpmcmFtZV9kaWcgMTMKaW50Y18wIC8vIDAKPT0KYm56IHdpdGhkcmF3YW1vdW50cmFpc2VkXzEzX2wyCmdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKZnJhbWVfZGlnIDE3Cj4KLy8gU3Vic2VxdWVudCB3aXRoZHJhd2FsIG11c3QgYmUgYWZ0ZXIgdmVzdGluZyBwZXJpb2QuCmFzc2VydApmcmFtZV9kaWcgMTYKZnJhbWVfZGlnIDE5CjwKLy8gQWNjdW11bGF0ZWQgd2l0aGRyYXduIGFtb3VudCBtdXN0IGJlIGxlc3MgdGhhbiBhbW91bnQgcmFpc2VkLgphc3NlcnQKaXR4bl9iZWdpbgppbnRjXzEgLy8gcGF5Cml0eG5fZmllbGQgVHlwZUVudW0KZnJhbWVfZGlnIDIxCml0eG5fZmllbGQgQW1vdW50CmZyYW1lX2RpZyAxCml0eG5fZmllbGQgUmVjZWl2ZXIKaW50Y18wIC8vIDAKaXR4bl9maWVsZCBGZWUKaXR4bl9zdWJtaXQKZnJhbWVfZGlnIDE2CmZyYW1lX2RpZyAyMQorCmZyYW1lX2J1cnkgMTYKYiB3aXRoZHJhd2Ftb3VudHJhaXNlZF8xM19sMwp3aXRoZHJhd2Ftb3VudHJhaXNlZF8xM19sMjoKaXR4bl9iZWdpbgppbnRjXzEgLy8gcGF5Cml0eG5fZmllbGQgVHlwZUVudW0KZnJhbWVfZGlnIDIxCml0eG5fZmllbGQgQW1vdW50CmZyYW1lX2RpZyAxCml0eG5fZmllbGQgUmVjZWl2ZXIKaW50Y18wIC8vIDAKaXR4bl9maWVsZCBGZWUKaXR4bl9zdWJtaXQKaW50Y18xIC8vIDEKIQohCmZyYW1lX2J1cnkgMTMKZnJhbWVfZGlnIDE2CmZyYW1lX2RpZyAyMQorCmZyYW1lX2J1cnkgMTYKd2l0aGRyYXdhbW91bnRyYWlzZWRfMTNfbDM6CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCml0b2IKY29uY2F0CmZyYW1lX2RpZyAzCml0b2IKY29uY2F0CmZyYW1lX2RpZyA0Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA1Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA2CmZyYW1lX2J1cnkgMjUKZnJhbWVfZGlnIDI1CmZyYW1lX2J1cnkgMjQKaW50YyA0IC8vIDEzOQpmcmFtZV9idXJ5IDIyCmZyYW1lX2RpZyAyMgppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgNwppdG9iCmNvbmNhdApmcmFtZV9kaWcgOAppdG9iCmNvbmNhdApmcmFtZV9kaWcgOQppdG9iCmNvbmNhdApmcmFtZV9kaWcgMTAKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDExCml0b2IKY29uY2F0CmJ5dGVjXzIgLy8gMHgwMAppbnRjXzAgLy8gMApmcmFtZV9kaWcgMTIKc2V0Yml0CmludGNfMSAvLyAxCmZyYW1lX2RpZyAxMwpzZXRiaXQKY29uY2F0CmZyYW1lX2RpZyAxNAppdG9iCmNvbmNhdApmcmFtZV9kaWcgMTUKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDE2Cml0b2IKY29uY2F0CmZyYW1lX2RpZyAxNwppdG9iCmNvbmNhdApmcmFtZV9kaWcgMjQKY29uY2F0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgLTEKaXRvYgpib3hfZGVsCnBvcApmcmFtZV9kaWcgLTEKaXRvYgpmcmFtZV9kaWcgMApib3hfcHV0CnJldHN1YgoKLy8gcGF1c2VfcHJvamVjdApwYXVzZXByb2plY3RfMTQ6CnByb3RvIDEgMApieXRlY18wIC8vICIiCmR1cAppbnRjXzAgLy8gMApkdXBuIDMKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXBuIDEyCmJ5dGVjXzAgLy8gIiIKZHVwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKZnJhbWVfZGlnIC0xCml0b2IKYm94X2xlbgpzdG9yZSAzMwpzdG9yZSAzMgpsb2FkIDMzCi8vIEludmFsaWQgcHJvamVjdCBJRC4KYXNzZXJ0CmZyYW1lX2RpZyAtMQppdG9iCmJveF9nZXQKc3RvcmUgMzUKc3RvcmUgMzQKbG9hZCAzNQphc3NlcnQKbG9hZCAzNApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKZXh0cmFjdCAwIDMyCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMAppbnRjXzIgLy8gMzIKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAwCnB1c2hpbnQgNDAgLy8gNDAKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAzCmZyYW1lX2RpZyAwCmludGNfMyAvLyA0OApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDQKZnJhbWVfZGlnIDAKcHVzaGludCA1NiAvLyA1NgpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDAKcHVzaGludCA2NCAvLyA2NApleHRyYWN0X3VpbnQxNgpkaWcgMQpsZW4Kc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIDAKcHVzaGludCA2NiAvLyA2NgpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDAKcHVzaGludCA3NCAvLyA3NApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDgKZnJhbWVfZGlnIDAKcHVzaGludCA4MiAvLyA4MgpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDkKZnJhbWVfZGlnIDAKcHVzaGludCA5MCAvLyA5MApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDEwCmZyYW1lX2RpZyAwCnB1c2hpbnQgOTggLy8gOTgKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAxMQpmcmFtZV9kaWcgMAppbnRjIDUgLy8gODQ4CmdldGJpdApmcmFtZV9idXJ5IDEyCmZyYW1lX2RpZyAwCmludGMgNiAvLyA4NDkKZ2V0Yml0CmZyYW1lX2J1cnkgMTMKZnJhbWVfZGlnIDAKcHVzaGludCAxMDcgLy8gMTA3CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMTQKZnJhbWVfZGlnIDAKcHVzaGludCAxMTUgLy8gMTE1CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMTUKZnJhbWVfZGlnIDAKcHVzaGludCAxMjMgLy8gMTIzCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMTYKZnJhbWVfZGlnIDAKaW50YyA3IC8vIDEzMQpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDE3CmZyYW1lX2RpZyAxMgppbnRjXzAgLy8gMAo9PQovLyBQcm9qZWN0IG11c3Qgbm90IGJlIHVucGF1c2VkIGJlZm9yZSB0cnlpbmcgdG8gcGF1c2UuCmFzc2VydAppbnRjXzEgLy8gMQohCiEKZnJhbWVfYnVyeSAxMgpmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgppdG9iCmNvbmNhdApmcmFtZV9kaWcgMwppdG9iCmNvbmNhdApmcmFtZV9kaWcgNAppdG9iCmNvbmNhdApmcmFtZV9kaWcgNQppdG9iCmNvbmNhdApmcmFtZV9kaWcgNgpmcmFtZV9idXJ5IDIxCmZyYW1lX2RpZyAyMQpmcmFtZV9idXJ5IDIwCmludGMgNCAvLyAxMzkKZnJhbWVfYnVyeSAxOApmcmFtZV9kaWcgMTgKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIDcKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDgKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDkKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDEwCml0b2IKY29uY2F0CmZyYW1lX2RpZyAxMQppdG9iCmNvbmNhdApieXRlY18yIC8vIDB4MDAKaW50Y18wIC8vIDAKZnJhbWVfZGlnIDEyCnNldGJpdAppbnRjXzEgLy8gMQpmcmFtZV9kaWcgMTMKc2V0Yml0CmNvbmNhdApmcmFtZV9kaWcgMTQKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDE1Cml0b2IKY29uY2F0CmZyYW1lX2RpZyAxNgppdG9iCmNvbmNhdApmcmFtZV9kaWcgMTcKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDIwCmNvbmNhdApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIC0xCml0b2IKYm94X2RlbApwb3AKZnJhbWVfZGlnIC0xCml0b2IKZnJhbWVfZGlnIDAKYm94X3B1dApyZXRzdWIKCi8vIHVucGF1c2VfcHJvamVjdAp1bnBhdXNlcHJvamVjdF8xNToKcHJvdG8gMSAwCmJ5dGVjXzAgLy8gIiIKZHVwCmludGNfMCAvLyAwCmR1cG4gMwpieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cG4gMTIKYnl0ZWNfMCAvLyAiIgpkdXAKdHhuIFNlbmRlcgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKPT0KLy8gdW5hdXRob3JpemVkCmFzc2VydApmcmFtZV9kaWcgLTEKaXRvYgpib3hfbGVuCnN0b3JlIDM3CnN0b3JlIDM2CmxvYWQgMzcKLy8gSW52YWxpZCBwcm9qZWN0IElELgphc3NlcnQKZnJhbWVfZGlnIC0xCml0b2IKYm94X2dldApzdG9yZSAzOQpzdG9yZSAzOApsb2FkIDM5CmFzc2VydApsb2FkIDM4CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApleHRyYWN0IDAgMzIKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAwCmludGNfMiAvLyAzMgpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIDAKcHVzaGludCA0MCAvLyA0MApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIDAKaW50Y18zIC8vIDQ4CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgNApmcmFtZV9kaWcgMApwdXNoaW50IDU2IC8vIDU2CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgNQpmcmFtZV9kaWcgMApmcmFtZV9kaWcgMApwdXNoaW50IDY0IC8vIDY0CmV4dHJhY3RfdWludDE2CmRpZyAxCmxlbgpzdWJzdHJpbmczCmZyYW1lX2J1cnkgNgpmcmFtZV9kaWcgMApwdXNoaW50IDY2IC8vIDY2CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgMApwdXNoaW50IDc0IC8vIDc0CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgOApmcmFtZV9kaWcgMApwdXNoaW50IDgyIC8vIDgyCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgOQpmcmFtZV9kaWcgMApwdXNoaW50IDkwIC8vIDkwCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMTAKZnJhbWVfZGlnIDAKcHVzaGludCA5OCAvLyA5OApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDExCmZyYW1lX2RpZyAwCmludGMgNSAvLyA4NDgKZ2V0Yml0CmZyYW1lX2J1cnkgMTIKZnJhbWVfZGlnIDAKaW50YyA2IC8vIDg0OQpnZXRiaXQKZnJhbWVfYnVyeSAxMwpmcmFtZV9kaWcgMApwdXNoaW50IDEwNyAvLyAxMDcKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAxNApmcmFtZV9kaWcgMApwdXNoaW50IDExNSAvLyAxMTUKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAxNQpmcmFtZV9kaWcgMApwdXNoaW50IDEyMyAvLyAxMjMKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAxNgpmcmFtZV9kaWcgMAppbnRjIDcgLy8gMTMxCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMTcKZnJhbWVfZGlnIDEyCmludGNfMSAvLyAxCj09Ci8vIFByb2plY3QgbXVzdCBiZSBwYXVzZWQgYmVmb3JlIGF0dGVtcHRpbmcgdG8gdW5wYXVzZS4KYXNzZXJ0CmludGNfMCAvLyAwCiEKIQpmcmFtZV9idXJ5IDEyCmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCml0b2IKY29uY2F0CmZyYW1lX2RpZyAzCml0b2IKY29uY2F0CmZyYW1lX2RpZyA0Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA1Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA2CmZyYW1lX2J1cnkgMjEKZnJhbWVfZGlnIDIxCmZyYW1lX2J1cnkgMjAKaW50YyA0IC8vIDEzOQpmcmFtZV9idXJ5IDE4CmZyYW1lX2RpZyAxOAppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgNwppdG9iCmNvbmNhdApmcmFtZV9kaWcgOAppdG9iCmNvbmNhdApmcmFtZV9kaWcgOQppdG9iCmNvbmNhdApmcmFtZV9kaWcgMTAKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDExCml0b2IKY29uY2F0CmJ5dGVjXzIgLy8gMHgwMAppbnRjXzAgLy8gMApmcmFtZV9kaWcgMTIKc2V0Yml0CmludGNfMSAvLyAxCmZyYW1lX2RpZyAxMwpzZXRiaXQKY29uY2F0CmZyYW1lX2RpZyAxNAppdG9iCmNvbmNhdApmcmFtZV9kaWcgMTUKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDE2Cml0b2IKY29uY2F0CmZyYW1lX2RpZyAxNwppdG9iCmNvbmNhdApmcmFtZV9kaWcgMjAKY29uY2F0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgLTEKaXRvYgpib3hfZGVsCnBvcApmcmFtZV9kaWcgLTEKaXRvYgpmcmFtZV9kaWcgMApib3hfcHV0CnJldHN1YgoKLy8gY2hhbmdlX2xhdW5jaHBhZF9hZG1pbgpjaGFuZ2VsYXVuY2hwYWRhZG1pbl8xNjoKcHJvdG8gMSAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKYnl0ZWNfMyAvLyAiYWRtaW5fYWNjdCIKZnJhbWVfZGlnIC0xCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gZ2V0X2ludmVzdG9yCmdldGludmVzdG9yXzE3Ogpwcm90byAxIDEKYnl0ZWNfMCAvLyAiIgpmcmFtZV9kaWcgLTEKYm94X2dldApzdG9yZSA0MQpzdG9yZSA0MApsb2FkIDQxCmFzc2VydApsb2FkIDQwCmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGdldF9wcm9qZWN0CmdldHByb2plY3RfMTg6CnByb3RvIDEgMQpieXRlY18wIC8vICIiCmZyYW1lX2RpZyAtMQppdG9iCmJveF9nZXQKc3RvcmUgNDMKc3RvcmUgNDIKbG9hZCA0Mwphc3NlcnQKbG9hZCA0MgpmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBib290c3RyYXBfY2FzdGVyCmJvb3RzdHJhcGNhc3Rlcl8xOToKcHJvdG8gMCAwCmludGNfMCAvLyAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKY2FsbHN1YiBib290c3RyYXBfNApyZXRzdWIKCi8vIGZ1bmRfZXNjcm93X2FkZHJlc3NfY2FzdGVyCmZ1bmRlc2Nyb3dhZGRyZXNzY2FzdGVyXzIwOgpwcm90byAwIDAKaW50Y18wIC8vIDAKdHhuIEdyb3VwSW5kZXgKaW50Y18xIC8vIDEKLQpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKZnJhbWVfZGlnIDAKY2FsbHN1YiBmdW5kZXNjcm93YWRkcmVzc181CnJldHN1YgoKLy8gbGlzdF9wcm9qZWN0X2Nhc3RlcgpsaXN0cHJvamVjdGNhc3Rlcl8yMToKcHJvdG8gMCAwCmludGNfMCAvLyAwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKZHVwbiA2CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpmcmFtZV9idXJ5IDEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwpidG9pCmZyYW1lX2J1cnkgMgp0eG5hIEFwcGxpY2F0aW9uQXJncyA0CmJ0b2kKZnJhbWVfYnVyeSAzCnR4bmEgQXBwbGljYXRpb25BcmdzIDUKYnRvaQpmcmFtZV9idXJ5IDQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgpidG9pCmZyYW1lX2J1cnkgNQp0eG5hIEFwcGxpY2F0aW9uQXJncyA3CmJ0b2kKZnJhbWVfYnVyeSA2CnR4bmEgQXBwbGljYXRpb25BcmdzIDgKYnRvaQpmcmFtZV9idXJ5IDcKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgOQpidG9pCmZyYW1lX2J1cnkgOApmcmFtZV9kaWcgMApmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpmcmFtZV9kaWcgMwpmcmFtZV9kaWcgNApmcmFtZV9kaWcgNQpmcmFtZV9kaWcgNgpmcmFtZV9kaWcgNwpmcmFtZV9kaWcgOApjYWxsc3ViIGxpc3Rwcm9qZWN0XzYKcmV0c3ViCgovLyBkZXBvc2l0X2lkb19hc3NldHNfY2FzdGVyCmRlcG9zaXRpZG9hc3NldHNjYXN0ZXJfMjI6CnByb3RvIDAgMAppbnRjXzAgLy8gMApkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApnZXRieXRlCmZyYW1lX2J1cnkgMQp0eG4gR3JvdXBJbmRleAppbnRjXzEgLy8gMQotCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApndHhucyBUeXBlRW51bQpwdXNoaW50IDQgLy8gYXhmZXIKPT0KYXNzZXJ0CmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAxCmNhbGxzdWIgZGVwb3NpdGlkb2Fzc2V0c183CnJldHN1YgoKLy8gaW52ZXN0X2Nhc3RlcgppbnZlc3RjYXN0ZXJfMjM6CnByb3RvIDAgMAppbnRjXzAgLy8gMApkdXBuIDMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApwdXNoaW50IDggLy8gOAoqCmdldGJpdApmcmFtZV9idXJ5IDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgppbnRjXzAgLy8gMApnZXRieXRlCmZyYW1lX2J1cnkgMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAzCmludGNfMCAvLyAwCmdldGJ5dGUKZnJhbWVfYnVyeSAzCnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmZyYW1lX2RpZyAzCmNhbGxzdWIgaW52ZXN0XzEwCnJldHN1YgoKLy8gY2xhaW1faWRvX2Fzc2V0X2Nhc3RlcgpjbGFpbWlkb2Fzc2V0Y2FzdGVyXzI0Ogpwcm90byAwIDAKaW50Y18wIC8vIDAKZHVwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgppbnRjXzAgLy8gMApwdXNoaW50IDggLy8gOAoqCmdldGJpdApmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDEKY2FsbHN1YiBjbGFpbWlkb2Fzc2V0XzExCnJldHN1YgoKLy8gcmVjbGFpbV9pbnZlc3RtZW50X2Nhc3RlcgpyZWNsYWltaW52ZXN0bWVudGNhc3Rlcl8yNToKcHJvdG8gMCAwCmludGNfMCAvLyAwCmR1cG4gMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmludGNfMCAvLyAwCmdldGJ5dGUKZnJhbWVfYnVyeSAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKaW50Y18wIC8vIDAKcHVzaGludCA4IC8vIDgKKgpnZXRiaXQKZnJhbWVfYnVyeSAxCnR4bmEgQXBwbGljYXRpb25BcmdzIDMKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKY2FsbHN1YiByZWNsYWltaW52ZXN0bWVudF8xMgpyZXRzdWIKCi8vIHdpdGhkcmF3X2Ftb3VudF9yYWlzZWRfY2FzdGVyCndpdGhkcmF3YW1vdW50cmFpc2VkY2FzdGVyXzI2Ogpwcm90byAwIDAKaW50Y18wIC8vIDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpidG9pCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApjYWxsc3ViIHdpdGhkcmF3YW1vdW50cmFpc2VkXzEzCnJldHN1YgoKLy8gcGF1c2VfcHJvamVjdF9jYXN0ZXIKcGF1c2Vwcm9qZWN0Y2FzdGVyXzI3Ogpwcm90byAwIDAKaW50Y18wIC8vIDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpidG9pCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApjYWxsc3ViIHBhdXNlcHJvamVjdF8xNApyZXRzdWIKCi8vIHVucGF1c2VfcHJvamVjdF9jYXN0ZXIKdW5wYXVzZXByb2plY3RjYXN0ZXJfMjg6CnByb3RvIDAgMAppbnRjXzAgLy8gMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgdW5wYXVzZXByb2plY3RfMTUKcmV0c3ViCgovLyBjaGFuZ2VfbGF1bmNocGFkX2FkbWluX2Nhc3RlcgpjaGFuZ2VsYXVuY2hwYWRhZG1pbmNhc3Rlcl8yOToKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKY2FsbHN1YiBjaGFuZ2VsYXVuY2hwYWRhZG1pbl8xNgpyZXRzdWIKCi8vIGdldF9pbnZlc3Rvcl9jYXN0ZXIKZ2V0aW52ZXN0b3JjYXN0ZXJfMzA6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmR1cAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpjYWxsc3ViIGdldGludmVzdG9yXzE3CmZyYW1lX2J1cnkgMApieXRlYyA0IC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIGdldF9wcm9qZWN0X2Nhc3RlcgpnZXRwcm9qZWN0Y2FzdGVyXzMxOgpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmNhbGxzdWIgZ2V0cHJvamVjdF8xOApmcmFtZV9idXJ5IDAKYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3Vi",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "admin_acct": {
          "type": "bytes",
          "key": "admin_acct",
          "descr": ""
        },
        "escrow_address": {
          "type": "bytes",
          "key": "escrow_address",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "launch_vest",
    "methods": [
      {
        "name": "bootstrap",
        "args": [
          {
            "type": "asset",
            "name": "asset"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Initializes Launch Vest application's global state, sets the admin account, and sets the escrow address."
      },
      {
        "name": "fund_escrow_address",
        "args": [
          {
            "type": "pay",
            "name": "txn",
            "desc": "The payment transaction to fund the escrow address."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Fund escrow address with Algos."
      },
      {
        "name": "list_project",
        "args": [
          {
            "type": "asset",
            "name": "asset_id",
            "desc": "The unique identifier of the asset."
          },
          {
            "type": "string",
            "name": "image_url",
            "desc": "The project image url."
          },
          {
            "type": "uint64",
            "name": "start_timestamp",
            "desc": "The timestamp when the project starts."
          },
          {
            "type": "uint64",
            "name": "end_timestamp",
            "desc": "The timestamp when the project ends."
          },
          {
            "type": "uint64",
            "name": "claim_timestamp",
            "desc": "The timestamp for asset claiming."
          },
          {
            "type": "uint64",
            "name": "price_per_asset",
            "desc": "The price of each asset."
          },
          {
            "type": "uint64",
            "name": "min_investment_per_investor",
            "desc": "The minimum investment per user."
          },
          {
            "type": "uint64",
            "name": "max_investment_per_investor",
            "desc": "The maximum investment per user."
          },
          {
            "type": "uint64",
            "name": "vesting_schedule",
            "desc": "The vesting schedule of project."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Lists a new IDO Project on LaunchVest."
      },
      {
        "name": "deposit_ido_assets",
        "args": [
          {
            "type": "axfer",
            "name": "txn",
            "desc": "The asset transfer transaction for the deposit."
          },
          {
            "type": "asset",
            "name": "asset",
            "desc": "The asset to be deposited."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows depositing IDO assets using the provided transaction and asset."
      },
      {
        "name": "invest",
        "args": [
          {
            "type": "bool",
            "name": "is_staking",
            "desc": "Indicates whether the investor is staking $VEST"
          },
          {
            "type": "asset",
            "name": "project_id",
            "desc": "The project (asset) ID to invest in."
          },
          {
            "type": "txn",
            "name": "txn",
            "desc": "The payment transaction for the investment."
          },
          {
            "type": "asset",
            "name": "investment_asset_id",
            "desc": "The unique ID to of the asset."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Executes an investment transaction for a project."
      },
      {
        "name": "claim_ido_asset",
        "args": [
          {
            "type": "asset",
            "name": "project_id",
            "desc": "Project (asset) ID to be claimed."
          },
          {
            "type": "bool",
            "name": "is_staking",
            "desc": "Flag to indicate whether investor is staking $VEST."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows users to claim a specific IDO Project asset."
      },
      {
        "name": "reclaim_investment",
        "args": [
          {
            "type": "asset",
            "name": "project_id",
            "desc": "Project (asset) ID to be claimed."
          },
          {
            "type": "bool",
            "name": "is_staking",
            "desc": "Flag to indicate whether investor is current staking $VEST."
          },
          {
            "type": "asset",
            "name": "investment_asset_id",
            "desc": "The unique asset ID of investment (ALGO, USDC)."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows investors to reclaim their investment."
      },
      {
        "name": "withdraw_amount_raised",
        "args": [
          {
            "type": "uint64",
            "name": "project_id",
            "desc": "The unique identifier of the project for which funds are withdrawn."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows the withdrawal of the amount raised for a specific project, retains LaunchVest fee in the escrow."
      },
      {
        "name": "pause_project",
        "args": [
          {
            "type": "uint64",
            "name": "project_id",
            "desc": "The unique identifier of the project to be paused."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows pausing a project with the specified project ID."
      },
      {
        "name": "unpause_project",
        "args": [
          {
            "type": "uint64",
            "name": "project_id",
            "desc": "The unique identifier of the project to be un-paused."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows un-pausing a project with the specified project ID."
      },
      {
        "name": "change_launchpad_admin",
        "args": [
          {
            "type": "address",
            "name": "new_admin_acct",
            "desc": "The new admin account address."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows changing the admin account for the launchpad."
      },
      {
        "name": "get_investor",
        "args": [
          {
            "type": "address",
            "name": "investor",
            "desc": "The Algorand address of the investor to retrieve."
          }
        ],
        "returns": {
          "type": "(address,uint64,uint64,uint64,uint64,bool,bool)"
        },
        "desc": "Retrieves investor information for the specified investor address and stores it in the output."
      },
      {
        "name": "get_project",
        "args": [
          {
            "type": "uint64",
            "name": "project_id",
            "desc": "The unique identifier of the project to retrieve."
          }
        ],
        "returns": {
          "type": "(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)"
        },
        "desc": "Retrieves project information for the specified project ID and stores it in the output."
      }
    ],
    "networks": {},
    "desc": "LaunchVest Application"
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the LaunchVest smart contract.
 */
export type LaunchVest = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap(asset)void' | 'bootstrap', {
      argsObj: {
        asset: number | bigint
      }
      argsTuple: [asset: number | bigint]
      returns: void
    }>
    & Record<'fund_escrow_address(pay)void' | 'fund_escrow_address', {
      argsObj: {
        /**
         * The payment transaction to fund the escrow address.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' | 'list_project', {
      argsObj: {
        /**
         * The unique identifier of the asset.
         */
        asset_id: number | bigint
        /**
         * The project image url.
         */
        image_url: string
        /**
         * The timestamp when the project starts.
         */
        start_timestamp: bigint | number
        /**
         * The timestamp when the project ends.
         */
        end_timestamp: bigint | number
        /**
         * The timestamp for asset claiming.
         */
        claim_timestamp: bigint | number
        /**
         * The price of each asset.
         */
        price_per_asset: bigint | number
        /**
         * The minimum investment per user.
         */
        min_investment_per_investor: bigint | number
        /**
         * The maximum investment per user.
         */
        max_investment_per_investor: bigint | number
        /**
         * The vesting schedule of project.
         */
        vesting_schedule: bigint | number
      }
      argsTuple: [asset_id: number | bigint, image_url: string, start_timestamp: bigint | number, end_timestamp: bigint | number, claim_timestamp: bigint | number, price_per_asset: bigint | number, min_investment_per_investor: bigint | number, max_investment_per_investor: bigint | number, vesting_schedule: bigint | number]
      returns: void
    }>
    & Record<'deposit_ido_assets(axfer,asset)void' | 'deposit_ido_assets', {
      argsObj: {
        /**
         * The asset transfer transaction for the deposit.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The asset to be deposited.
         */
        asset: number | bigint
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset: number | bigint]
      returns: void
    }>
    & Record<'invest(bool,asset,txn,asset)void' | 'invest', {
      argsObj: {
        /**
         * Indicates whether the investor is staking $VEST
         */
        is_staking: boolean
        /**
         * The project (asset) ID to invest in.
         */
        project_id: number | bigint
        /**
         * The payment transaction for the investment.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The unique ID to of the asset.
         */
        investment_asset_id: number | bigint
      }
      argsTuple: [is_staking: boolean, project_id: number | bigint, txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, investment_asset_id: number | bigint]
      returns: void
    }>
    & Record<'claim_ido_asset(asset,bool)void' | 'claim_ido_asset', {
      argsObj: {
        /**
         * Project (asset) ID to be claimed.
         */
        project_id: number | bigint
        /**
         * Flag to indicate whether investor is staking $VEST.
         */
        is_staking: boolean
      }
      argsTuple: [project_id: number | bigint, is_staking: boolean]
      returns: void
    }>
    & Record<'reclaim_investment(asset,bool,asset)void' | 'reclaim_investment', {
      argsObj: {
        /**
         * Project (asset) ID to be claimed.
         */
        project_id: number | bigint
        /**
         * Flag to indicate whether investor is current staking $VEST.
         */
        is_staking: boolean
        /**
         * The unique asset ID of investment (ALGO, USDC).
         */
        investment_asset_id: number | bigint
      }
      argsTuple: [project_id: number | bigint, is_staking: boolean, investment_asset_id: number | bigint]
      returns: void
    }>
    & Record<'withdraw_amount_raised(uint64)void' | 'withdraw_amount_raised', {
      argsObj: {
        /**
         * The unique identifier of the project for which funds are withdrawn.
         */
        project_id: bigint | number
      }
      argsTuple: [project_id: bigint | number]
      returns: void
    }>
    & Record<'pause_project(uint64)void' | 'pause_project', {
      argsObj: {
        /**
         * The unique identifier of the project to be paused.
         */
        project_id: bigint | number
      }
      argsTuple: [project_id: bigint | number]
      returns: void
    }>
    & Record<'unpause_project(uint64)void' | 'unpause_project', {
      argsObj: {
        /**
         * The unique identifier of the project to be un-paused.
         */
        project_id: bigint | number
      }
      argsTuple: [project_id: bigint | number]
      returns: void
    }>
    & Record<'change_launchpad_admin(address)void' | 'change_launchpad_admin', {
      argsObj: {
        /**
         * The new admin account address.
         */
        new_admin_acct: string
      }
      argsTuple: [new_admin_acct: string]
      returns: void
    }>
    & Record<'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)' | 'get_investor', {
      argsObj: {
        /**
         * The Algorand address of the investor to retrieve.
         */
        investor: string
      }
      argsTuple: [investor: string]
      returns: Investor
    }>
    & Record<'get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)' | 'get_project', {
      argsObj: {
        /**
         * The unique identifier of the project to retrieve.
         */
        project_id: bigint | number
      }
      argsTuple: [project_id: bigint | number]
      returns: Project
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'admin_acct'?: BinaryState
      'escrow_address'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type LaunchVestSig = keyof LaunchVest['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends LaunchVestSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a Investor result as a struct
 */
export type Investor = {
  address: string
  project_id: bigint
  investment_amount: bigint
  asset_allocation: bigint
  asset_claim_timestamp: bigint
  claimed_ido_asset: boolean
  reclaimed_investment: boolean
}
/**
 * Converts the tuple representation of a Investor to the struct representation
 */
export function Investor([address, project_id, investment_amount, asset_allocation, asset_claim_timestamp, claimed_ido_asset, reclaimed_investment]: [string, bigint, bigint, bigint, bigint, boolean, boolean] ) {
  return {
    address,
    project_id,
    investment_amount,
    asset_allocation,
    asset_claim_timestamp,
    claimed_ido_asset,
    reclaimed_investment,
  }
}
/**
 * Represents a Project result as a struct
 */
export type Project = {
  owner_address: string
  start_timestamp: bigint
  end_timestamp: bigint
  claim_timestamp: bigint
  asset_id: bigint
  image_url: string
  price_per_asset: bigint
  min_investment_per_investor: bigint
  max_investment_per_investor: bigint
  max_cap: bigint
  total_assets_for_sale: bigint
  is_paused: boolean
  initiated_withdrawal: boolean
  total_assets_sold: bigint
  total_amount_raised: bigint
  amount_withdrawn: bigint
  vesting_schedule: bigint
}
/**
 * Converts the tuple representation of a Project to the struct representation
 */
export function Project([owner_address, start_timestamp, end_timestamp, claim_timestamp, asset_id, image_url, price_per_asset, min_investment_per_investor, max_investment_per_investor, max_cap, total_assets_for_sale, is_paused, initiated_withdrawal, total_assets_sold, total_amount_raised, amount_withdrawn, vesting_schedule]: [string, bigint, bigint, bigint, bigint, string, bigint, bigint, bigint, bigint, bigint, boolean, boolean, bigint, bigint, bigint, bigint] ) {
  return {
    owner_address,
    start_timestamp,
    end_timestamp,
    claim_timestamp,
    asset_id,
    image_url,
    price_per_asset,
    min_investment_per_investor,
    max_investment_per_investor,
    max_cap,
    total_assets_for_sale,
    is_paused,
    initiated_withdrawal,
    total_assets_sold,
    total_amount_raised,
    amount_withdrawn,
    vesting_schedule,
  }
}
/**
 * Maps a method signature from the LaunchVest smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends LaunchVestSig> = LaunchVest['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LaunchVest smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LaunchVestSig> = LaunchVest['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type LaunchVestCreateCalls = (typeof LaunchVestCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type LaunchVestCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type LaunchVestDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: LaunchVestCreateCalls) => LaunchVestCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class LaunchVestCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the launch_vest smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(asset)void ABI method
   *
   * Initializes Launch Vest application's global state, sets the admin account, and sets the escrow address.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fund_escrow_address(pay)void ABI method
   *
   * Fund escrow address with Algos.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fund_escrow_address(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * Lists a new IDO Project on LaunchVest.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static listProject(args: MethodArgs<'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset_id, args.image_url, args.start_timestamp, args.end_timestamp, args.claim_timestamp, args.price_per_asset, args.min_investment_per_investor, args.max_investment_per_investor, args.vesting_schedule],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deposit_ido_assets(axfer,asset)void ABI method
   *
   * Allows depositing IDO assets using the provided transaction and asset.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static depositIdoAssets(args: MethodArgs<'deposit_ido_assets(axfer,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deposit_ido_assets(axfer,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the invest(bool,asset,txn,asset)void ABI method
   *
   * Executes an investment transaction for a project.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static invest(args: MethodArgs<'invest(bool,asset,txn,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'invest(bool,asset,txn,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.is_staking, args.project_id, args.txn, args.investment_asset_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim_ido_asset(asset,bool)void ABI method
   *
   * Allows users to claim a specific IDO Project asset.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimIdoAsset(args: MethodArgs<'claim_ido_asset(asset,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim_ido_asset(asset,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.project_id, args.is_staking],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reclaim_investment(asset,bool,asset)void ABI method
   *
   * Allows investors to reclaim their investment.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reclaimInvestment(args: MethodArgs<'reclaim_investment(asset,bool,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reclaim_investment(asset,bool,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.project_id, args.is_staking, args.investment_asset_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw_amount_raised(uint64)void ABI method
   *
   * Allows the withdrawal of the amount raised for a specific project, retains LaunchVest fee in the escrow.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawAmountRaised(args: MethodArgs<'withdraw_amount_raised(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw_amount_raised(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.project_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the pause_project(uint64)void ABI method
   *
   * Allows pausing a project with the specified project ID.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static pauseProject(args: MethodArgs<'pause_project(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'pause_project(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.project_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unpause_project(uint64)void ABI method
   *
   * Allows un-pausing a project with the specified project ID.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unpauseProject(args: MethodArgs<'unpause_project(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unpause_project(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.project_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the change_launchpad_admin(address)void ABI method
   *
   * Allows changing the admin account for the launchpad.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeLaunchpadAdmin(args: MethodArgs<'change_launchpad_admin(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'change_launchpad_admin(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.new_admin_acct],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool) ABI method
   *
   * Retrieves investor information for the specified investor address and stores it in the output.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getInvestor(args: MethodArgs<'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.investor],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64) ABI method
   *
   * Retrieves project information for the specified project ID and stores it in the output.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProject(args: MethodArgs<'get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.project_id],
      ...params,
    }
  }
}

/**
 * A client to make calls to the launch_vest smart contract
 */
export class LaunchVestClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `LaunchVestClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof LaunchVest['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the launch_vest smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: LaunchVestDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(LaunchVestCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the launch_vest smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the launch_vest smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap(asset)void ABI method.
   *
   * Initializes Launch Vest application's global state, sets the admin account, and sets the escrow address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the fund_escrow_address(pay)void ABI method.
   *
   * Fund escrow address with Algos.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.fundEscrowAddress(args, params))
  }

  /**
   * Calls the list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * Lists a new IDO Project on LaunchVest.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public listProject(args: MethodArgs<'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.listProject(args, params))
  }

  /**
   * Calls the deposit_ido_assets(axfer,asset)void ABI method.
   *
   * Allows depositing IDO assets using the provided transaction and asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public depositIdoAssets(args: MethodArgs<'deposit_ido_assets(axfer,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.depositIdoAssets(args, params))
  }

  /**
   * Calls the invest(bool,asset,txn,asset)void ABI method.
   *
   * Executes an investment transaction for a project.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public invest(args: MethodArgs<'invest(bool,asset,txn,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.invest(args, params))
  }

  /**
   * Calls the claim_ido_asset(asset,bool)void ABI method.
   *
   * Allows users to claim a specific IDO Project asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimIdoAsset(args: MethodArgs<'claim_ido_asset(asset,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.claimIdoAsset(args, params))
  }

  /**
   * Calls the reclaim_investment(asset,bool,asset)void ABI method.
   *
   * Allows investors to reclaim their investment.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reclaimInvestment(args: MethodArgs<'reclaim_investment(asset,bool,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.reclaimInvestment(args, params))
  }

  /**
   * Calls the withdraw_amount_raised(uint64)void ABI method.
   *
   * Allows the withdrawal of the amount raised for a specific project, retains LaunchVest fee in the escrow.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawAmountRaised(args: MethodArgs<'withdraw_amount_raised(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.withdrawAmountRaised(args, params))
  }

  /**
   * Calls the pause_project(uint64)void ABI method.
   *
   * Allows pausing a project with the specified project ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public pauseProject(args: MethodArgs<'pause_project(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.pauseProject(args, params))
  }

  /**
   * Calls the unpause_project(uint64)void ABI method.
   *
   * Allows un-pausing a project with the specified project ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unpauseProject(args: MethodArgs<'unpause_project(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.unpauseProject(args, params))
  }

  /**
   * Calls the change_launchpad_admin(address)void ABI method.
   *
   * Allows changing the admin account for the launchpad.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeLaunchpadAdmin(args: MethodArgs<'change_launchpad_admin(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.changeLaunchpadAdmin(args, params))
  }

  /**
   * Calls the get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool) ABI method.
   *
   * Retrieves investor information for the specified investor address and stores it in the output.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getInvestor(args: MethodArgs<'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.getInvestor(args, params), Investor)
  }

  /**
   * Calls the get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64) ABI method.
   *
   * Retrieves project information for the specified project ID and stores it in the output.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProject(args: MethodArgs<'get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.getProject(args, params), Project)
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<LaunchVest['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get admin_acct() {
        return LaunchVestClient.getBinaryState(state, 'admin_acct')
      },
      get escrow_address() {
        return LaunchVestClient.getBinaryState(state, 'escrow_address')
      },
    }
  }

  public compose(): LaunchVestComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fundEscrowAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      listProject(args: MethodArgs<'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.listProject(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      depositIdoAssets(args: MethodArgs<'deposit_ido_assets(axfer,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.depositIdoAssets(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      invest(args: MethodArgs<'invest(bool,asset,txn,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.invest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimIdoAsset(args: MethodArgs<'claim_ido_asset(asset,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimIdoAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reclaimInvestment(args: MethodArgs<'reclaim_investment(asset,bool,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reclaimInvestment(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawAmountRaised(args: MethodArgs<'withdraw_amount_raised(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawAmountRaised(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      pauseProject(args: MethodArgs<'pause_project(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.pauseProject(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unpauseProject(args: MethodArgs<'unpause_project(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unpauseProject(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeLaunchpadAdmin(args: MethodArgs<'change_launchpad_admin(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeLaunchpadAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getInvestor(args: MethodArgs<'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getInvestor(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Investor)
        return this
      },
      getProject(args: MethodArgs<'get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProject(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Project)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as LaunchVestComposer
  }
}
export type LaunchVestComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(asset)void ABI method.
   *
   * Initializes Launch Vest application's global state, sets the admin account, and sets the escrow address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'bootstrap(asset)void'>]>

  /**
   * Calls the fund_escrow_address(pay)void ABI method.
   *
   * Fund escrow address with Algos.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'fund_escrow_address(pay)void'>]>

  /**
   * Calls the list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * Lists a new IDO Project on LaunchVest.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  listProject(args: MethodArgs<'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>]>

  /**
   * Calls the deposit_ido_assets(axfer,asset)void ABI method.
   *
   * Allows depositing IDO assets using the provided transaction and asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositIdoAssets(args: MethodArgs<'deposit_ido_assets(axfer,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'deposit_ido_assets(axfer,asset)void'>]>

  /**
   * Calls the invest(bool,asset,txn,asset)void ABI method.
   *
   * Executes an investment transaction for a project.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  invest(args: MethodArgs<'invest(bool,asset,txn,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'invest(bool,asset,txn,asset)void'>]>

  /**
   * Calls the claim_ido_asset(asset,bool)void ABI method.
   *
   * Allows users to claim a specific IDO Project asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimIdoAsset(args: MethodArgs<'claim_ido_asset(asset,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'claim_ido_asset(asset,bool)void'>]>

  /**
   * Calls the reclaim_investment(asset,bool,asset)void ABI method.
   *
   * Allows investors to reclaim their investment.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reclaimInvestment(args: MethodArgs<'reclaim_investment(asset,bool,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'reclaim_investment(asset,bool,asset)void'>]>

  /**
   * Calls the withdraw_amount_raised(uint64)void ABI method.
   *
   * Allows the withdrawal of the amount raised for a specific project, retains LaunchVest fee in the escrow.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAmountRaised(args: MethodArgs<'withdraw_amount_raised(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'withdraw_amount_raised(uint64)void'>]>

  /**
   * Calls the pause_project(uint64)void ABI method.
   *
   * Allows pausing a project with the specified project ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseProject(args: MethodArgs<'pause_project(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'pause_project(uint64)void'>]>

  /**
   * Calls the unpause_project(uint64)void ABI method.
   *
   * Allows un-pausing a project with the specified project ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpauseProject(args: MethodArgs<'unpause_project(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'unpause_project(uint64)void'>]>

  /**
   * Calls the change_launchpad_admin(address)void ABI method.
   *
   * Allows changing the admin account for the launchpad.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeLaunchpadAdmin(args: MethodArgs<'change_launchpad_admin(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'change_launchpad_admin(address)void'>]>

  /**
   * Calls the get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool) ABI method.
   *
   * Retrieves investor information for the specified investor address and stores it in the output.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getInvestor(args: MethodArgs<'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)'>]>

  /**
   * Calls the get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64) ABI method.
   *
   * Retrieves project information for the specified project ID and stores it in the output.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProject(args: MethodArgs<'get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'get_project(uint64)(address,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)'>]>

  /**
   * Makes a clear_state call to an existing instance of the launch_vest smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): LaunchVestComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<LaunchVestComposerResults<TReturns>>
}
export type LaunchVestComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
