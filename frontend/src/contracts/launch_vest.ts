/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "bootstrap()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "list_project(asset,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "invest(asset,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim_tokens(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pause()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unpause()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit_ido_tokens()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "change_end_time()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw_amount_raised()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "change_launchpad_admin()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64)": {
      "structs": {
        "output": {
          "name": "Project",
          "elements": [
            [
              "project_owner_address",
              "address"
            ],
            [
              "start_timestamp",
              "uint64"
            ],
            [
              "end_timestamp",
              "uint64"
            ],
            [
              "claim_timestamp",
              "uint64"
            ],
            [
              "asset_price",
              "uint64"
            ],
            [
              "min_investment_per_user",
              "uint64"
            ],
            [
              "max_investment_per_user",
              "uint64"
            ],
            [
              "max_cap",
              "uint64"
            ],
            [
              "total_tokens_for_sale",
              "uint64"
            ],
            [
              "is_paused",
              "bool"
            ],
            [
              "withdrawn",
              "bool"
            ],
            [
              "total_tokens_sold",
              "uint64"
            ],
            [
              "total_amount_raised",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "admin_acct": {
          "type": "bytes",
          "key": "admin_acct",
          "descr": ""
        },
        "escrow_account": {
          "type": "bytes",
          "key": "escrow_account",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "launch_vest",
    "methods": [
      {
        "name": "bootstrap",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Initialize LaunchVest global states.\nReturns     :return: PyTeal Expression to initialize global state.     :rtype: pt.Expr."
      },
      {
        "name": "list_project",
        "args": [
          {
            "type": "asset",
            "name": "asset_id"
          },
          {
            "type": "uint64",
            "name": "start_timestamp"
          },
          {
            "type": "uint64",
            "name": "end_timestamp"
          },
          {
            "type": "uint64",
            "name": "claim_timestamp"
          },
          {
            "type": "uint64",
            "name": "asset_price"
          },
          {
            "type": "uint64",
            "name": "min_investment_per_user"
          },
          {
            "type": "uint64",
            "name": "max_investment_per_user"
          },
          {
            "type": "uint64",
            "name": "max_cap"
          },
          {
            "type": "uint64",
            "name": "total_tokens_for_sale"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Creates a new IDO Project listing on LaunchVest."
      },
      {
        "name": "invest",
        "args": [
          {
            "type": "asset",
            "name": "asset"
          },
          {
            "type": "pay",
            "name": "txn"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows interested investors invest in an IDO Project."
      },
      {
        "name": "claim_tokens",
        "args": [
          {
            "type": "asset",
            "name": "asset"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows investors claim their tokens if qualified."
      },
      {
        "name": "pause",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unpause",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deposit_ido_tokens",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Alternate function for token deposit."
      },
      {
        "name": "change_end_time",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw_amount_raised",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Charge fee before withdrawal"
      },
      {
        "name": "change_launchpad_admin",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_project",
        "args": [
          {
            "type": "uint64",
            "name": "project_id"
          }
        ],
        "returns": {
          "type": "(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64)",
          "desc": ":return: A valid IDO project. :rtype: pt.Expr."
        },
        "desc": "Retrieves a specific IDO project."
      }
    ],
    "networks": {},
    "desc": "LaunchVest Application"
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the LaunchVest smart contract.
 */
export type LaunchVest = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap()void' | 'bootstrap', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'list_project(asset,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' | 'list_project', {
      argsObj: {
        asset_id: number | bigint
        start_timestamp: bigint | number
        end_timestamp: bigint | number
        claim_timestamp: bigint | number
        asset_price: bigint | number
        min_investment_per_user: bigint | number
        max_investment_per_user: bigint | number
        max_cap: bigint | number
        total_tokens_for_sale: bigint | number
      }
      argsTuple: [asset_id: number | bigint, start_timestamp: bigint | number, end_timestamp: bigint | number, claim_timestamp: bigint | number, asset_price: bigint | number, min_investment_per_user: bigint | number, max_investment_per_user: bigint | number, max_cap: bigint | number, total_tokens_for_sale: bigint | number]
      returns: void
    }>
    & Record<'invest(asset,pay)void' | 'invest', {
      argsObj: {
        asset: number | bigint
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [asset: number | bigint, txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'claim_tokens(asset)void' | 'claim_tokens', {
      argsObj: {
        asset: number | bigint
      }
      argsTuple: [asset: number | bigint]
      returns: void
    }>
    & Record<'pause()void' | 'pause', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'unpause()void' | 'unpause', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'deposit_ido_tokens()void' | 'deposit_ido_tokens', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'change_end_time()void' | 'change_end_time', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'withdraw_amount_raised()void' | 'withdraw_amount_raised', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'change_launchpad_admin()void' | 'change_launchpad_admin', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64)' | 'get_project', {
      argsObj: {
        project_id: bigint | number
      }
      argsTuple: [project_id: bigint | number]
      /**
       * :return: A valid IDO project. :rtype: pt.Expr.
       */
      returns: Project
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'admin_acct'?: BinaryState
      'escrow_account'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type LaunchVestSig = keyof LaunchVest['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends LaunchVestSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a Project result as a struct
 */
export type Project = {
  project_owner_address: string
  start_timestamp: bigint
  end_timestamp: bigint
  claim_timestamp: bigint
  asset_price: bigint
  min_investment_per_user: bigint
  max_investment_per_user: bigint
  max_cap: bigint
  total_tokens_for_sale: bigint
  is_paused: boolean
  withdrawn: boolean
  total_tokens_sold: bigint
  total_amount_raised: bigint
}
/**
 * Converts the tuple representation of a Project to the struct representation
 */
export function Project([project_owner_address, start_timestamp, end_timestamp, claim_timestamp, asset_price, min_investment_per_user, max_investment_per_user, max_cap, total_tokens_for_sale, is_paused, withdrawn, total_tokens_sold, total_amount_raised]: [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean, boolean, bigint, bigint] ) {
  return {
    project_owner_address,
    start_timestamp,
    end_timestamp,
    claim_timestamp,
    asset_price,
    min_investment_per_user,
    max_investment_per_user,
    max_cap,
    total_tokens_for_sale,
    is_paused,
    withdrawn,
    total_tokens_sold,
    total_amount_raised,
  }
}
/**
 * Maps a method signature from the LaunchVest smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends LaunchVestSig> = LaunchVest['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LaunchVest smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LaunchVestSig> = LaunchVest['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type LaunchVestCreateCalls = (typeof LaunchVestCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type LaunchVestCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type LaunchVestDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: LaunchVestCreateCalls) => LaunchVestCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class LaunchVestCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the launch_vest smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap()void ABI method
   *
   * Initialize LaunchVest global states.
Returns     :return: PyTeal Expression to initialize global state.     :rtype: pt.Expr.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the list_project(asset,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * Creates a new IDO Project listing on LaunchVest.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static listProject(args: MethodArgs<'list_project(asset,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'list_project(asset,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset_id, args.start_timestamp, args.end_timestamp, args.claim_timestamp, args.asset_price, args.min_investment_per_user, args.max_investment_per_user, args.max_cap, args.total_tokens_for_sale],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the invest(asset,pay)void ABI method
   *
   * Allows interested investors invest in an IDO Project.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static invest(args: MethodArgs<'invest(asset,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'invest(asset,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset, args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim_tokens(asset)void ABI method
   *
   * Allows investors claim their tokens if qualified.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimTokens(args: MethodArgs<'claim_tokens(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim_tokens(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the pause()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static pause(args: MethodArgs<'pause()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'pause()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unpause()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unpause(args: MethodArgs<'unpause()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unpause()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deposit_ido_tokens()void ABI method
   *
   * Alternate function for token deposit.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static depositIdoTokens(args: MethodArgs<'deposit_ido_tokens()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deposit_ido_tokens()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the change_end_time()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeEndTime(args: MethodArgs<'change_end_time()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'change_end_time()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw_amount_raised()void ABI method
   *
   * Charge fee before withdrawal
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawAmountRaised(args: MethodArgs<'withdraw_amount_raised()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw_amount_raised()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the change_launchpad_admin()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeLaunchpadAdmin(args: MethodArgs<'change_launchpad_admin()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'change_launchpad_admin()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64) ABI method
   *
   * Retrieves a specific IDO project.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProject(args: MethodArgs<'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.project_id],
      ...params,
    }
  }
}

/**
 * A client to make calls to the launch_vest smart contract
 */
export class LaunchVestClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `LaunchVestClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof LaunchVest['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the launch_vest smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: LaunchVestDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(LaunchVestCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the launch_vest smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the launch_vest smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap()void ABI method.
   *
   * Initialize LaunchVest global states.
Returns     :return: PyTeal Expression to initialize global state.     :rtype: pt.Expr.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the list_project(asset,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * Creates a new IDO Project listing on LaunchVest.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public listProject(args: MethodArgs<'list_project(asset,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.listProject(args, params))
  }

  /**
   * Calls the invest(asset,pay)void ABI method.
   *
   * Allows interested investors invest in an IDO Project.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public invest(args: MethodArgs<'invest(asset,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.invest(args, params))
  }

  /**
   * Calls the claim_tokens(asset)void ABI method.
   *
   * Allows investors claim their tokens if qualified.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimTokens(args: MethodArgs<'claim_tokens(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.claimTokens(args, params))
  }

  /**
   * Calls the pause()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public pause(args: MethodArgs<'pause()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.pause(args, params))
  }

  /**
   * Calls the unpause()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unpause(args: MethodArgs<'unpause()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.unpause(args, params))
  }

  /**
   * Calls the deposit_ido_tokens()void ABI method.
   *
   * Alternate function for token deposit.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public depositIdoTokens(args: MethodArgs<'deposit_ido_tokens()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.depositIdoTokens(args, params))
  }

  /**
   * Calls the change_end_time()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeEndTime(args: MethodArgs<'change_end_time()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.changeEndTime(args, params))
  }

  /**
   * Calls the withdraw_amount_raised()void ABI method.
   *
   * Charge fee before withdrawal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawAmountRaised(args: MethodArgs<'withdraw_amount_raised()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.withdrawAmountRaised(args, params))
  }

  /**
   * Calls the change_launchpad_admin()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeLaunchpadAdmin(args: MethodArgs<'change_launchpad_admin()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.changeLaunchpadAdmin(args, params))
  }

  /**
   * Calls the get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64) ABI method.
   *
   * Retrieves a specific IDO project.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: :return: A valid IDO project. :rtype: pt.Expr.
   */
  public getProject(args: MethodArgs<'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.getProject(args, params), Project)
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<LaunchVest['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get admin_acct() {
        return LaunchVestClient.getBinaryState(state, 'admin_acct')
      },
      get escrow_account() {
        return LaunchVestClient.getBinaryState(state, 'escrow_account')
      },
    }
  }

  public compose(): LaunchVestComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      listProject(args: MethodArgs<'list_project(asset,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.listProject(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      invest(args: MethodArgs<'invest(asset,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.invest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimTokens(args: MethodArgs<'claim_tokens(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimTokens(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      pause(args: MethodArgs<'pause()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.pause(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unpause(args: MethodArgs<'unpause()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unpause(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      depositIdoTokens(args: MethodArgs<'deposit_ido_tokens()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.depositIdoTokens(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeEndTime(args: MethodArgs<'change_end_time()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeEndTime(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawAmountRaised(args: MethodArgs<'withdraw_amount_raised()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawAmountRaised(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeLaunchpadAdmin(args: MethodArgs<'change_launchpad_admin()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeLaunchpadAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProject(args: MethodArgs<'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProject(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Project)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as LaunchVestComposer
  }
}
export type LaunchVestComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap()void ABI method.
   *
   * Initialize LaunchVest global states.
Returns     :return: PyTeal Expression to initialize global state.     :rtype: pt.Expr.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'bootstrap()void'>]>

  /**
   * Calls the list_project(asset,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * Creates a new IDO Project listing on LaunchVest.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  listProject(args: MethodArgs<'list_project(asset,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'list_project(asset,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>]>

  /**
   * Calls the invest(asset,pay)void ABI method.
   *
   * Allows interested investors invest in an IDO Project.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  invest(args: MethodArgs<'invest(asset,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'invest(asset,pay)void'>]>

  /**
   * Calls the claim_tokens(asset)void ABI method.
   *
   * Allows investors claim their tokens if qualified.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimTokens(args: MethodArgs<'claim_tokens(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'claim_tokens(asset)void'>]>

  /**
   * Calls the pause()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pause(args: MethodArgs<'pause()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'pause()void'>]>

  /**
   * Calls the unpause()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpause(args: MethodArgs<'unpause()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'unpause()void'>]>

  /**
   * Calls the deposit_ido_tokens()void ABI method.
   *
   * Alternate function for token deposit.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositIdoTokens(args: MethodArgs<'deposit_ido_tokens()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'deposit_ido_tokens()void'>]>

  /**
   * Calls the change_end_time()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeEndTime(args: MethodArgs<'change_end_time()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'change_end_time()void'>]>

  /**
   * Calls the withdraw_amount_raised()void ABI method.
   *
   * Charge fee before withdrawal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAmountRaised(args: MethodArgs<'withdraw_amount_raised()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'withdraw_amount_raised()void'>]>

  /**
   * Calls the change_launchpad_admin()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeLaunchpadAdmin(args: MethodArgs<'change_launchpad_admin()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'change_launchpad_admin()void'>]>

  /**
   * Calls the get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64) ABI method.
   *
   * Retrieves a specific IDO project.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProject(args: MethodArgs<'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64)'>]>

  /**
   * Makes a clear_state call to an existing instance of the launch_vest smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): LaunchVestComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<LaunchVestComposerResults<TReturns>>
}
export type LaunchVestComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
