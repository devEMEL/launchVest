/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "bootstrap()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fund_escrow_address(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit_ido_assets(axfer,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "invest(bool,asset,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim_ido_asset(asset,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reclaim_investment(asset,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw_amount_raised(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pause_project(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unpause_project(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "change_launchpad_admin(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)": {
      "read_only": true,
      "structs": {
        "output": {
          "name": "Project",
          "elements": [
            [
              "owner_address",
              "address"
            ],
            [
              "start_timestamp",
              "uint64"
            ],
            [
              "end_timestamp",
              "uint64"
            ],
            [
              "claim_timestamp",
              "uint64"
            ],
            [
              "asset_id",
              "uint64"
            ],
            [
              "asset_decimal",
              "uint64"
            ],
            [
              "image_url",
              "string"
            ],
            [
              "price_per_asset",
              "uint64"
            ],
            [
              "min_investment_per_investor",
              "uint64"
            ],
            [
              "max_investment_per_investor",
              "uint64"
            ],
            [
              "max_cap",
              "uint64"
            ],
            [
              "total_assets_for_sale",
              "uint64"
            ],
            [
              "is_paused",
              "bool"
            ],
            [
              "initiated_withdrawal",
              "bool"
            ],
            [
              "total_assets_sold",
              "uint64"
            ],
            [
              "total_amount_raised",
              "uint64"
            ],
            [
              "amount_withdrawn",
              "uint64"
            ],
            [
              "vesting_schedule",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)": {
      "read_only": true,
      "structs": {
        "output": {
          "name": "Investor",
          "elements": [
            [
              "address",
              "address"
            ],
            [
              "project_id",
              "uint64"
            ],
            [
              "investment_amount",
              "uint64"
            ],
            [
              "asset_allocated",
              "uint64"
            ],
            [
              "asset_claim_timestamp",
              "uint64"
            ],
            [
              "claimed_ido_asset",
              "bool"
            ],
            [
              "reclaimed_investment",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "admin_acct": {
          "type": "bytes",
          "key": "admin_acct",
          "descr": ""
        },
        "escrow_address": {
          "type": "bytes",
          "key": "escrow_address",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "launch_vest",
    "methods": [
      {
        "name": "bootstrap",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Initializes Launch Vest application's global state, sets the admin account, and sets the escrow address."
      },
      {
        "name": "fund_escrow_address",
        "args": [
          {
            "type": "pay",
            "name": "txn",
            "desc": "The payment transaction to fund the escrow address."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Fund escrow address with Algos."
      },
      {
        "name": "list_project",
        "args": [
          {
            "type": "asset",
            "name": "asset_id",
            "desc": "The unique identifier of the asset."
          },
          {
            "type": "string",
            "name": "image_url"
          },
          {
            "type": "uint64",
            "name": "start_timestamp",
            "desc": "The timestamp when the project starts."
          },
          {
            "type": "uint64",
            "name": "end_timestamp",
            "desc": "The timestamp when the project ends."
          },
          {
            "type": "uint64",
            "name": "claim_timestamp",
            "desc": "The timestamp for asset claiming."
          },
          {
            "type": "uint64",
            "name": "price_per_asset",
            "desc": "The price of each asset."
          },
          {
            "type": "uint64",
            "name": "min_investment_per_investor",
            "desc": "The minimum investment per user."
          },
          {
            "type": "uint64",
            "name": "max_investment_per_investor",
            "desc": "The maximum investment per user."
          },
          {
            "type": "uint64",
            "name": "vesting_schedule"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Lists a new IDO Project on LaunchVest."
      },
      {
        "name": "deposit_ido_assets",
        "args": [
          {
            "type": "axfer",
            "name": "txn",
            "desc": "The asset transfer transaction for the deposit."
          },
          {
            "type": "asset",
            "name": "asset",
            "desc": "The asset to be deposited."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows depositing IDO assets using the provided transaction and asset."
      },
      {
        "name": "invest",
        "args": [
          {
            "type": "bool",
            "name": "is_staking",
            "desc": "Indicates whether the investor is staking $VEST"
          },
          {
            "type": "asset",
            "name": "project",
            "desc": "The project (asset) ID to invest in."
          },
          {
            "type": "pay",
            "name": "txn",
            "desc": "The payment transaction for the investment."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows investors invest in a Project."
      },
      {
        "name": "claim_ido_asset",
        "args": [
          {
            "type": "asset",
            "name": "project",
            "desc": "Project (asset) ID to be claimed."
          },
          {
            "type": "bool",
            "name": "is_staking"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows users to claim a specific IDO Project asset."
      },
      {
        "name": "reclaim_investment",
        "args": [
          {
            "type": "asset",
            "name": "project",
            "desc": "Project (asset) ID to be claimed."
          },
          {
            "type": "bool",
            "name": "is_staking"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows investors to reclaim their investment."
      },
      {
        "name": "withdraw_amount_raised",
        "args": [
          {
            "type": "uint64",
            "name": "project_id",
            "desc": "The unique identifier of the project for which funds are withdrawn."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows withdrawing the amount raised for a specific project and retains the fee in the escrow address."
      },
      {
        "name": "pause_project",
        "args": [
          {
            "type": "uint64",
            "name": "project_id",
            "desc": "The unique identifier of the project to be paused."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows pausing a project with the specified project ID."
      },
      {
        "name": "unpause_project",
        "args": [
          {
            "type": "uint64",
            "name": "project_id",
            "desc": "The unique identifier of the project to be un-paused."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows un-pausing a project with the specified project ID."
      },
      {
        "name": "change_launchpad_admin",
        "args": [
          {
            "type": "address",
            "name": "new_admin_acct",
            "desc": "The new admin account address."
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Allows changing the admin account for the launchpad."
      },
      {
        "name": "get_project",
        "args": [
          {
            "type": "uint64",
            "name": "project_id",
            "desc": "The unique identifier of the project to retrieve."
          }
        ],
        "returns": {
          "type": "(address,uint64,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)"
        },
        "desc": "Retrieves project information for the specified project ID and stores it in the output."
      },
      {
        "name": "get_investor",
        "args": [
          {
            "type": "address",
            "name": "investor",
            "desc": "The Algorand address of the investor to retrieve."
          }
        ],
        "returns": {
          "type": "(address,uint64,uint64,uint64,uint64,bool,bool)"
        },
        "desc": "Retrieves investor information for the specified investor address and stores it in the output."
      }
    ],
    "networks": {},
    "desc": "LaunchVest Application"
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the LaunchVest smart contract.
 */
export type LaunchVest = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap()void' | 'bootstrap', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'fund_escrow_address(pay)void' | 'fund_escrow_address', {
      argsObj: {
        /**
         * The payment transaction to fund the escrow address.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' | 'list_project', {
      argsObj: {
        /**
         * The unique identifier of the asset.
         */
        asset_id: number | bigint
        image_url: string
        /**
         * The timestamp when the project starts.
         */
        start_timestamp: bigint | number
        /**
         * The timestamp when the project ends.
         */
        end_timestamp: bigint | number
        /**
         * The timestamp for asset claiming.
         */
        claim_timestamp: bigint | number
        /**
         * The price of each asset.
         */
        price_per_asset: bigint | number
        /**
         * The minimum investment per user.
         */
        min_investment_per_investor: bigint | number
        /**
         * The maximum investment per user.
         */
        max_investment_per_investor: bigint | number
        vesting_schedule: bigint | number
      }
      argsTuple: [asset_id: number | bigint, image_url: string, start_timestamp: bigint | number, end_timestamp: bigint | number, claim_timestamp: bigint | number, price_per_asset: bigint | number, min_investment_per_investor: bigint | number, max_investment_per_investor: bigint | number, vesting_schedule: bigint | number]
      returns: void
    }>
    & Record<'deposit_ido_assets(axfer,asset)void' | 'deposit_ido_assets', {
      argsObj: {
        /**
         * The asset transfer transaction for the deposit.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The asset to be deposited.
         */
        asset: number | bigint
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset: number | bigint]
      returns: void
    }>
    & Record<'invest(bool,asset,pay)void' | 'invest', {
      argsObj: {
        /**
         * Indicates whether the investor is staking $VEST
         */
        is_staking: boolean
        /**
         * The project (asset) ID to invest in.
         */
        project: number | bigint
        /**
         * The payment transaction for the investment.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [is_staking: boolean, project: number | bigint, txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'claim_ido_asset(asset,bool)void' | 'claim_ido_asset', {
      argsObj: {
        /**
         * Project (asset) ID to be claimed.
         */
        project: number | bigint
        is_staking: boolean
      }
      argsTuple: [project: number | bigint, is_staking: boolean]
      returns: void
    }>
    & Record<'reclaim_investment(asset,bool)void' | 'reclaim_investment', {
      argsObj: {
        /**
         * Project (asset) ID to be claimed.
         */
        project: number | bigint
        is_staking: boolean
      }
      argsTuple: [project: number | bigint, is_staking: boolean]
      returns: void
    }>
    & Record<'withdraw_amount_raised(uint64)void' | 'withdraw_amount_raised', {
      argsObj: {
        /**
         * The unique identifier of the project for which funds are withdrawn.
         */
        project_id: bigint | number
      }
      argsTuple: [project_id: bigint | number]
      returns: void
    }>
    & Record<'pause_project(uint64)void' | 'pause_project', {
      argsObj: {
        /**
         * The unique identifier of the project to be paused.
         */
        project_id: bigint | number
      }
      argsTuple: [project_id: bigint | number]
      returns: void
    }>
    & Record<'unpause_project(uint64)void' | 'unpause_project', {
      argsObj: {
        /**
         * The unique identifier of the project to be un-paused.
         */
        project_id: bigint | number
      }
      argsTuple: [project_id: bigint | number]
      returns: void
    }>
    & Record<'change_launchpad_admin(address)void' | 'change_launchpad_admin', {
      argsObj: {
        /**
         * The new admin account address.
         */
        new_admin_acct: string
      }
      argsTuple: [new_admin_acct: string]
      returns: void
    }>
    & Record<'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)' | 'get_project', {
      argsObj: {
        /**
         * The unique identifier of the project to retrieve.
         */
        project_id: bigint | number
      }
      argsTuple: [project_id: bigint | number]
      returns: Project
    }>
    & Record<'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)' | 'get_investor', {
      argsObj: {
        /**
         * The Algorand address of the investor to retrieve.
         */
        investor: string
      }
      argsTuple: [investor: string]
      returns: Investor
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'admin_acct'?: BinaryState
      'escrow_address'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type LaunchVestSig = keyof LaunchVest['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends LaunchVestSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a Project result as a struct
 */
export type Project = {
  owner_address: string
  start_timestamp: bigint
  end_timestamp: bigint
  claim_timestamp: bigint
  asset_id: bigint
  asset_decimal: bigint
  image_url: string
  price_per_asset: bigint
  min_investment_per_investor: bigint
  max_investment_per_investor: bigint
  max_cap: bigint
  total_assets_for_sale: bigint
  is_paused: boolean
  initiated_withdrawal: boolean
  total_assets_sold: bigint
  total_amount_raised: bigint
  amount_withdrawn: bigint
  vesting_schedule: bigint
}
/**
 * Converts the tuple representation of a Project to the struct representation
 */
export function Project([owner_address, start_timestamp, end_timestamp, claim_timestamp, asset_id, asset_decimal, image_url, price_per_asset, min_investment_per_investor, max_investment_per_investor, max_cap, total_assets_for_sale, is_paused, initiated_withdrawal, total_assets_sold, total_amount_raised, amount_withdrawn, vesting_schedule]: [string, bigint, bigint, bigint, bigint, bigint, string, bigint, bigint, bigint, bigint, bigint, boolean, boolean, bigint, bigint, bigint, bigint] ) {
  return {
    owner_address,
    start_timestamp,
    end_timestamp,
    claim_timestamp,
    asset_id,
    asset_decimal,
    image_url,
    price_per_asset,
    min_investment_per_investor,
    max_investment_per_investor,
    max_cap,
    total_assets_for_sale,
    is_paused,
    initiated_withdrawal,
    total_assets_sold,
    total_amount_raised,
    amount_withdrawn,
    vesting_schedule,
  }
}
/**
 * Represents a Investor result as a struct
 */
export type Investor = {
  address: string
  project_id: bigint
  investment_amount: bigint
  asset_allocated: bigint
  asset_claim_timestamp: bigint
  claimed_ido_asset: boolean
  reclaimed_investment: boolean
}
/**
 * Converts the tuple representation of a Investor to the struct representation
 */
export function Investor([address, project_id, investment_amount, asset_allocated, asset_claim_timestamp, claimed_ido_asset, reclaimed_investment]: [string, bigint, bigint, bigint, bigint, boolean, boolean] ) {
  return {
    address,
    project_id,
    investment_amount,
    asset_allocated,
    asset_claim_timestamp,
    claimed_ido_asset,
    reclaimed_investment,
  }
}
/**
 * Maps a method signature from the LaunchVest smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends LaunchVestSig> = LaunchVest['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LaunchVest smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LaunchVestSig> = LaunchVest['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type LaunchVestCreateCalls = (typeof LaunchVestCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type LaunchVestCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type LaunchVestDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: LaunchVestCreateCalls) => LaunchVestCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class LaunchVestCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the launch_vest smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap()void ABI method
   *
   * Initializes Launch Vest application's global state, sets the admin account, and sets the escrow address.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fund_escrow_address(pay)void ABI method
   *
   * Fund escrow address with Algos.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fund_escrow_address(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * Lists a new IDO Project on LaunchVest.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static listProject(args: MethodArgs<'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset_id, args.image_url, args.start_timestamp, args.end_timestamp, args.claim_timestamp, args.price_per_asset, args.min_investment_per_investor, args.max_investment_per_investor, args.vesting_schedule],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deposit_ido_assets(axfer,asset)void ABI method
   *
   * Allows depositing IDO assets using the provided transaction and asset.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static depositIdoAssets(args: MethodArgs<'deposit_ido_assets(axfer,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deposit_ido_assets(axfer,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the invest(bool,asset,pay)void ABI method
   *
   * Allows investors invest in a Project.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static invest(args: MethodArgs<'invest(bool,asset,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'invest(bool,asset,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.is_staking, args.project, args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim_ido_asset(asset,bool)void ABI method
   *
   * Allows users to claim a specific IDO Project asset.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimIdoAsset(args: MethodArgs<'claim_ido_asset(asset,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim_ido_asset(asset,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.project, args.is_staking],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reclaim_investment(asset,bool)void ABI method
   *
   * Allows investors to reclaim their investment.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reclaimInvestment(args: MethodArgs<'reclaim_investment(asset,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reclaim_investment(asset,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.project, args.is_staking],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw_amount_raised(uint64)void ABI method
   *
   * Allows withdrawing the amount raised for a specific project and retains the fee in the escrow address.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawAmountRaised(args: MethodArgs<'withdraw_amount_raised(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw_amount_raised(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.project_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the pause_project(uint64)void ABI method
   *
   * Allows pausing a project with the specified project ID.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static pauseProject(args: MethodArgs<'pause_project(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'pause_project(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.project_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unpause_project(uint64)void ABI method
   *
   * Allows un-pausing a project with the specified project ID.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unpauseProject(args: MethodArgs<'unpause_project(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unpause_project(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.project_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the change_launchpad_admin(address)void ABI method
   *
   * Allows changing the admin account for the launchpad.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeLaunchpadAdmin(args: MethodArgs<'change_launchpad_admin(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'change_launchpad_admin(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.new_admin_acct],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64) ABI method
   *
   * Retrieves project information for the specified project ID and stores it in the output.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProject(args: MethodArgs<'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.project_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool) ABI method
   *
   * Retrieves investor information for the specified investor address and stores it in the output.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getInvestor(args: MethodArgs<'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.investor],
      ...params,
    }
  }
}

/**
 * A client to make calls to the launch_vest smart contract
 */
export class LaunchVestClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `LaunchVestClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof LaunchVest['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the launch_vest smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: LaunchVestDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(LaunchVestCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the launch_vest smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the launch_vest smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap()void ABI method.
   *
   * Initializes Launch Vest application's global state, sets the admin account, and sets the escrow address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the fund_escrow_address(pay)void ABI method.
   *
   * Fund escrow address with Algos.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.fundEscrowAddress(args, params))
  }

  /**
   * Calls the list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * Lists a new IDO Project on LaunchVest.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public listProject(args: MethodArgs<'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.listProject(args, params))
  }

  /**
   * Calls the deposit_ido_assets(axfer,asset)void ABI method.
   *
   * Allows depositing IDO assets using the provided transaction and asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public depositIdoAssets(args: MethodArgs<'deposit_ido_assets(axfer,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.depositIdoAssets(args, params))
  }

  /**
   * Calls the invest(bool,asset,pay)void ABI method.
   *
   * Allows investors invest in a Project.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public invest(args: MethodArgs<'invest(bool,asset,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.invest(args, params))
  }

  /**
   * Calls the claim_ido_asset(asset,bool)void ABI method.
   *
   * Allows users to claim a specific IDO Project asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimIdoAsset(args: MethodArgs<'claim_ido_asset(asset,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.claimIdoAsset(args, params))
  }

  /**
   * Calls the reclaim_investment(asset,bool)void ABI method.
   *
   * Allows investors to reclaim their investment.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reclaimInvestment(args: MethodArgs<'reclaim_investment(asset,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.reclaimInvestment(args, params))
  }

  /**
   * Calls the withdraw_amount_raised(uint64)void ABI method.
   *
   * Allows withdrawing the amount raised for a specific project and retains the fee in the escrow address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawAmountRaised(args: MethodArgs<'withdraw_amount_raised(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.withdrawAmountRaised(args, params))
  }

  /**
   * Calls the pause_project(uint64)void ABI method.
   *
   * Allows pausing a project with the specified project ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public pauseProject(args: MethodArgs<'pause_project(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.pauseProject(args, params))
  }

  /**
   * Calls the unpause_project(uint64)void ABI method.
   *
   * Allows un-pausing a project with the specified project ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unpauseProject(args: MethodArgs<'unpause_project(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.unpauseProject(args, params))
  }

  /**
   * Calls the change_launchpad_admin(address)void ABI method.
   *
   * Allows changing the admin account for the launchpad.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeLaunchpadAdmin(args: MethodArgs<'change_launchpad_admin(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.changeLaunchpadAdmin(args, params))
  }

  /**
   * Calls the get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64) ABI method.
   *
   * Retrieves project information for the specified project ID and stores it in the output.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProject(args: MethodArgs<'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.getProject(args, params), Project)
  }

  /**
   * Calls the get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool) ABI method.
   *
   * Retrieves investor information for the specified investor address and stores it in the output.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getInvestor(args: MethodArgs<'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LaunchVestCallFactory.getInvestor(args, params), Investor)
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<LaunchVest['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get admin_acct() {
        return LaunchVestClient.getBinaryState(state, 'admin_acct')
      },
      get escrow_address() {
        return LaunchVestClient.getBinaryState(state, 'escrow_address')
      },
    }
  }

  public compose(): LaunchVestComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fundEscrowAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      listProject(args: MethodArgs<'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.listProject(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      depositIdoAssets(args: MethodArgs<'deposit_ido_assets(axfer,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.depositIdoAssets(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      invest(args: MethodArgs<'invest(bool,asset,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.invest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimIdoAsset(args: MethodArgs<'claim_ido_asset(asset,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimIdoAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reclaimInvestment(args: MethodArgs<'reclaim_investment(asset,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reclaimInvestment(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawAmountRaised(args: MethodArgs<'withdraw_amount_raised(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawAmountRaised(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      pauseProject(args: MethodArgs<'pause_project(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.pauseProject(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unpauseProject(args: MethodArgs<'unpause_project(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unpauseProject(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeLaunchpadAdmin(args: MethodArgs<'change_launchpad_admin(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeLaunchpadAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProject(args: MethodArgs<'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProject(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Project)
        return this
      },
      getInvestor(args: MethodArgs<'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getInvestor(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Investor)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as LaunchVestComposer
  }
}
export type LaunchVestComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap()void ABI method.
   *
   * Initializes Launch Vest application's global state, sets the admin account, and sets the escrow address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'bootstrap()void'>]>

  /**
   * Calls the fund_escrow_address(pay)void ABI method.
   *
   * Fund escrow address with Algos.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundEscrowAddress(args: MethodArgs<'fund_escrow_address(pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'fund_escrow_address(pay)void'>]>

  /**
   * Calls the list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * Lists a new IDO Project on LaunchVest.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  listProject(args: MethodArgs<'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'list_project(asset,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>]>

  /**
   * Calls the deposit_ido_assets(axfer,asset)void ABI method.
   *
   * Allows depositing IDO assets using the provided transaction and asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositIdoAssets(args: MethodArgs<'deposit_ido_assets(axfer,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'deposit_ido_assets(axfer,asset)void'>]>

  /**
   * Calls the invest(bool,asset,pay)void ABI method.
   *
   * Allows investors invest in a Project.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  invest(args: MethodArgs<'invest(bool,asset,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'invest(bool,asset,pay)void'>]>

  /**
   * Calls the claim_ido_asset(asset,bool)void ABI method.
   *
   * Allows users to claim a specific IDO Project asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimIdoAsset(args: MethodArgs<'claim_ido_asset(asset,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'claim_ido_asset(asset,bool)void'>]>

  /**
   * Calls the reclaim_investment(asset,bool)void ABI method.
   *
   * Allows investors to reclaim their investment.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reclaimInvestment(args: MethodArgs<'reclaim_investment(asset,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'reclaim_investment(asset,bool)void'>]>

  /**
   * Calls the withdraw_amount_raised(uint64)void ABI method.
   *
   * Allows withdrawing the amount raised for a specific project and retains the fee in the escrow address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAmountRaised(args: MethodArgs<'withdraw_amount_raised(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'withdraw_amount_raised(uint64)void'>]>

  /**
   * Calls the pause_project(uint64)void ABI method.
   *
   * Allows pausing a project with the specified project ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseProject(args: MethodArgs<'pause_project(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'pause_project(uint64)void'>]>

  /**
   * Calls the unpause_project(uint64)void ABI method.
   *
   * Allows un-pausing a project with the specified project ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpauseProject(args: MethodArgs<'unpause_project(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'unpause_project(uint64)void'>]>

  /**
   * Calls the change_launchpad_admin(address)void ABI method.
   *
   * Allows changing the admin account for the launchpad.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeLaunchpadAdmin(args: MethodArgs<'change_launchpad_admin(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'change_launchpad_admin(address)void'>]>

  /**
   * Calls the get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64) ABI method.
   *
   * Retrieves project information for the specified project ID and stores it in the output.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProject(args: MethodArgs<'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'get_project(uint64)(address,uint64,uint64,uint64,uint64,uint64,string,uint64,uint64,uint64,uint64,uint64,bool,bool,uint64,uint64,uint64,uint64)'>]>

  /**
   * Calls the get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool) ABI method.
   *
   * Retrieves investor information for the specified investor address and stores it in the output.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getInvestor(args: MethodArgs<'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, MethodReturn<'get_investor(address)(address,uint64,uint64,uint64,uint64,bool,bool)'>]>

  /**
   * Makes a clear_state call to an existing instance of the launch_vest smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): LaunchVestComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): LaunchVestComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<LaunchVestComposerResults<TReturns>>
}
export type LaunchVestComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
